"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/email/route";
exports.ids = ["app/api/email/route"];
exports.modules = {

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "dns":
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("dns");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Femail%2Froute&page=%2Fapi%2Femail%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Femail%2Froute.js&appDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Femail%2Froute&page=%2Fapi%2Femail%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Femail%2Froute.js&appDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/node-polyfill-headers */ \"(rsc)/./node_modules/next/dist/server/node-polyfill-headers.js\");\n/* harmony import */ var next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_node_polyfill_headers__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var D_Ridwana_Ostad_Module_14_Practice_my_app_src_app_api_email_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/email/route.js */ \"(rsc)/./src/app/api/email/route.js\");\n\n// @ts-ignore this need to be imported from next/dist to be external\n\n\n// @ts-expect-error - replaced by webpack/turbopack loader\n\nconst AppRouteRouteModule = next_dist_server_future_route_modules_app_route_module__WEBPACK_IMPORTED_MODULE_1__.AppRouteRouteModule;\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_2__.RouteKind.APP_ROUTE,\n        page: \"/api/email/route\",\n        pathname: \"/api/email\",\n        filename: \"route\",\n        bundlePath: \"app/api/email/route\"\n    },\n    resolvedPagePath: \"D:\\\\Ridwana\\\\Ostad\\\\Module 14 Practice\\\\my-app\\\\src\\\\app\\\\api\\\\email\\\\route.js\",\n    nextConfigOutput,\n    userland: D_Ridwana_Ostad_Module_14_Practice_my_app_src_app_api_email_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage , staticGenerationAsyncStorage , serverHooks , headerHooks , staticGenerationBailout  } = routeModule;\nconst originalPathname = \"/api/email/route\";\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZlbWFpbCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZW1haWwlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZlbWFpbCUyRnJvdXRlLmpzJmFwcERpcj1EJTNBJTVDUmlkd2FuYSU1Q09zdGFkJTVDTW9kdWxlJTIwMTQlMjBQcmFjdGljZSU1Q215LWFwcCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9RCUzQSU1Q1JpZHdhbmElNUNPc3RhZCU1Q01vZHVsZSUyMDE0JTIwUHJhY3RpY2UlNUNteS1hcHAmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDaEQ7QUFDaUY7QUFDbEI7QUFDL0Q7QUFDMkc7QUFDM0csNEJBQTRCLHVHQUEwQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLDRHQUE0RztBQUNwSDtBQUNpSjs7QUFFakoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvP2EyZDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwibmV4dC9kaXN0L3NlcnZlci9ub2RlLXBvbHlmaWxsLWhlYWRlcnNcIjtcbi8vIEB0cy1pZ25vcmUgdGhpcyBuZWVkIHRvIGJlIGltcG9ydGVkIGZyb20gbmV4dC9kaXN0IHRvIGJlIGV4dGVybmFsXG5pbXBvcnQgKiBhcyBtb2R1bGUgZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZVwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbi8vIEB0cy1leHBlY3QtZXJyb3IgLSByZXBsYWNlZCBieSB3ZWJwYWNrL3R1cmJvcGFjayBsb2FkZXJcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFxSaWR3YW5hXFxcXE9zdGFkXFxcXE1vZHVsZSAxNCBQcmFjdGljZVxcXFxteS1hcHBcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcZW1haWxcXFxccm91dGUuanNcIjtcbmNvbnN0IEFwcFJvdXRlUm91dGVNb2R1bGUgPSBtb2R1bGUuQXBwUm91dGVSb3V0ZU1vZHVsZTtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2VtYWlsL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZW1haWxcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2VtYWlsL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiRDpcXFxcUmlkd2FuYVxcXFxPc3RhZFxcXFxNb2R1bGUgMTQgUHJhY3RpY2VcXFxcbXktYXBwXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGVtYWlsXFxcXHJvdXRlLmpzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSAsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UgLCBzZXJ2ZXJIb29rcyAsIGhlYWRlckhvb2tzICwgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZW1haWwvcm91dGVcIjtcbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Femail%2Froute&page=%2Fapi%2Femail%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Femail%2Froute.js&appDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/output/log.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/build/output/log.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    prefixes: function() {\n        return prefixes;\n    },\n    wait: function() {\n        return wait;\n    },\n    error: function() {\n        return error;\n    },\n    warn: function() {\n        return warn;\n    },\n    ready: function() {\n        return ready;\n    },\n    info: function() {\n        return info;\n    },\n    event: function() {\n        return event;\n    },\n    trace: function() {\n        return trace;\n    },\n    warnOnce: function() {\n        return warnOnce;\n    }\n});\nconst _chalk = /*#__PURE__*/ _interop_require_default(__webpack_require__(/*! ../../lib/chalk */ \"(rsc)/./node_modules/next/dist/lib/chalk.js\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst prefixes = {\n    wait: \"- \" + _chalk.default.cyan(\"wait\"),\n    error: \"- \" + _chalk.default.red(\"error\"),\n    warn: \"- \" + _chalk.default.yellow(\"warn\"),\n    ready: \"- \" + _chalk.default.green(\"ready\"),\n    info: \"- \" + _chalk.default.cyan(\"info\"),\n    event: \"- \" + _chalk.default.magenta(\"event\"),\n    trace: \"- \" + _chalk.default.magenta(\"trace\")\n};\nfunction wait(...message) {\n    console.log(prefixes.wait, ...message);\n}\nfunction error(...message) {\n    console.error(prefixes.error, ...message);\n}\nfunction warn(...message) {\n    console.warn(prefixes.warn, ...message);\n}\nfunction ready(...message) {\n    console.log(prefixes.ready, ...message);\n}\nfunction info(...message) {\n    console.log(prefixes.info, ...message);\n}\nfunction event(...message) {\n    console.log(prefixes.event, ...message);\n}\nfunction trace(...message) {\n    console.log(prefixes.trace, ...message);\n}\nconst warnOnceMessages = new Set();\nfunction warnOnce(...message) {\n    if (!warnOnceMessages.has(message[0])) {\n        warnOnceMessages.add(message.join(\" \"));\n        warn(...message);\n    }\n} //# sourceMappingURL=log.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL291dHB1dC9sb2cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FVTjtBQUNBLFNBQVNVLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUloQixPQUFPQyxjQUFjLENBQUNjLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVosU0FBUztJQUNiRyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxPQUFPO1FBQ0gsT0FBT0E7SUFDWDtJQUNBQyxVQUFVO1FBQ04sT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sU0FBUyxXQUFXLEdBQUdDLHlCQUF5QkMsbUJBQU9BLENBQUMsb0VBQWlCO0FBQy9FLFNBQVNELHlCQUF5QkUsR0FBRztJQUNqQyxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFDakNFLFNBQVNGO0lBQ2I7QUFDSjtBQUNBLE1BQU1sQixXQUFXO0lBQ2JDLE1BQU0sT0FBT2MsT0FBT0ssT0FBTyxDQUFDQyxJQUFJLENBQUM7SUFDakNuQixPQUFPLE9BQU9hLE9BQU9LLE9BQU8sQ0FBQ0UsR0FBRyxDQUFDO0lBQ2pDbkIsTUFBTSxPQUFPWSxPQUFPSyxPQUFPLENBQUNHLE1BQU0sQ0FBQztJQUNuQ25CLE9BQU8sT0FBT1csT0FBT0ssT0FBTyxDQUFDSSxLQUFLLENBQUM7SUFDbkNuQixNQUFNLE9BQU9VLE9BQU9LLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDO0lBQ2pDZixPQUFPLE9BQU9TLE9BQU9LLE9BQU8sQ0FBQ0ssT0FBTyxDQUFDO0lBQ3JDbEIsT0FBTyxPQUFPUSxPQUFPSyxPQUFPLENBQUNLLE9BQU8sQ0FBQztBQUN6QztBQUNBLFNBQVN4QixLQUFLLEdBQUd5QixPQUFPO0lBQ3BCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTQyxJQUFJLEtBQUt5QjtBQUNsQztBQUNBLFNBQVN4QixNQUFNLEdBQUd3QixPQUFPO0lBQ3JCQyxRQUFRekIsS0FBSyxDQUFDRixTQUFTRSxLQUFLLEtBQUt3QjtBQUNyQztBQUNBLFNBQVN2QixLQUFLLEdBQUd1QixPQUFPO0lBQ3BCQyxRQUFReEIsSUFBSSxDQUFDSCxTQUFTRyxJQUFJLEtBQUt1QjtBQUNuQztBQUNBLFNBQVN0QixNQUFNLEdBQUdzQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTSSxLQUFLLEtBQUtzQjtBQUNuQztBQUNBLFNBQVNyQixLQUFLLEdBQUdxQixPQUFPO0lBQ3BCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTSyxJQUFJLEtBQUtxQjtBQUNsQztBQUNBLFNBQVNwQixNQUFNLEdBQUdvQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTTSxLQUFLLEtBQUtvQjtBQUNuQztBQUNBLFNBQVNuQixNQUFNLEdBQUdtQixPQUFPO0lBQ3JCQyxRQUFRQyxHQUFHLENBQUM1QixTQUFTTyxLQUFLLEtBQUttQjtBQUNuQztBQUNBLE1BQU1HLG1CQUFtQixJQUFJQztBQUM3QixTQUFTdEIsU0FBUyxHQUFHa0IsT0FBTztJQUN4QixJQUFJLENBQUNHLGlCQUFpQkUsR0FBRyxDQUFDTCxPQUFPLENBQUMsRUFBRSxHQUFHO1FBQ25DRyxpQkFBaUJHLEdBQUcsQ0FBQ04sUUFBUU8sSUFBSSxDQUFDO1FBQ2xDOUIsUUFBUXVCO0lBQ1o7QUFDSixFQUVBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvb3V0cHV0L2xvZy5qcz9lOTRlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcHJlZml4ZXM6IG51bGwsXG4gICAgd2FpdDogbnVsbCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICB3YXJuOiBudWxsLFxuICAgIHJlYWR5OiBudWxsLFxuICAgIGluZm86IG51bGwsXG4gICAgZXZlbnQ6IG51bGwsXG4gICAgdHJhY2U6IG51bGwsXG4gICAgd2Fybk9uY2U6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgcHJlZml4ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJlZml4ZXM7XG4gICAgfSxcbiAgICB3YWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhaXQ7XG4gICAgfSxcbiAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9LFxuICAgIHdhcm46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gd2FybjtcbiAgICB9LFxuICAgIHJlYWR5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlYWR5O1xuICAgIH0sXG4gICAgaW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgIH0sXG4gICAgZXZlbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgICB0cmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0cmFjZTtcbiAgICB9LFxuICAgIHdhcm5PbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHdhcm5PbmNlO1xuICAgIH1cbn0pO1xuY29uc3QgX2NoYWxrID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQocmVxdWlyZShcIi4uLy4uL2xpYi9jaGFsa1wiKSk7XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbn1cbmNvbnN0IHByZWZpeGVzID0ge1xuICAgIHdhaXQ6IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0LmN5YW4oXCJ3YWl0XCIpLFxuICAgIGVycm9yOiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5yZWQoXCJlcnJvclwiKSxcbiAgICB3YXJuOiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC55ZWxsb3coXCJ3YXJuXCIpLFxuICAgIHJlYWR5OiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5ncmVlbihcInJlYWR5XCIpLFxuICAgIGluZm86IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0LmN5YW4oXCJpbmZvXCIpLFxuICAgIGV2ZW50OiBcIi0gXCIgKyBfY2hhbGsuZGVmYXVsdC5tYWdlbnRhKFwiZXZlbnRcIiksXG4gICAgdHJhY2U6IFwiLSBcIiArIF9jaGFsay5kZWZhdWx0Lm1hZ2VudGEoXCJ0cmFjZVwiKVxufTtcbmZ1bmN0aW9uIHdhaXQoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLndhaXQsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXJyb3IoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUuZXJyb3IocHJlZml4ZXMuZXJyb3IsIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gd2FybiguLi5tZXNzYWdlKSB7XG4gICAgY29uc29sZS53YXJuKHByZWZpeGVzLndhcm4sIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gcmVhZHkoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLnJlYWR5LCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIGluZm8oLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLmluZm8sIC4uLm1lc3NhZ2UpO1xufVxuZnVuY3Rpb24gZXZlbnQoLi4ubWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKHByZWZpeGVzLmV2ZW50LCAuLi5tZXNzYWdlKTtcbn1cbmZ1bmN0aW9uIHRyYWNlKC4uLm1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmxvZyhwcmVmaXhlcy50cmFjZSwgLi4ubWVzc2FnZSk7XG59XG5jb25zdCB3YXJuT25jZU1lc3NhZ2VzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gd2Fybk9uY2UoLi4ubWVzc2FnZSkge1xuICAgIGlmICghd2Fybk9uY2VNZXNzYWdlcy5oYXMobWVzc2FnZVswXSkpIHtcbiAgICAgICAgd2Fybk9uY2VNZXNzYWdlcy5hZGQobWVzc2FnZS5qb2luKFwiIFwiKSk7XG4gICAgICAgIHdhcm4oLi4ubWVzc2FnZSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwicHJlZml4ZXMiLCJ3YWl0IiwiZXJyb3IiLCJ3YXJuIiwicmVhZHkiLCJpbmZvIiwiZXZlbnQiLCJ0cmFjZSIsIndhcm5PbmNlIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2NoYWxrIiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY3lhbiIsInJlZCIsInllbGxvdyIsImdyZWVuIiwibWFnZW50YSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwid2Fybk9uY2VNZXNzYWdlcyIsIlNldCIsImhhcyIsImFkZCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/output/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/app-router-headers.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/app-router-headers.js ***!
  \************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RSC: function() {\n        return RSC;\n    },\n    ACTION: function() {\n        return ACTION;\n    },\n    NEXT_ROUTER_STATE_TREE: function() {\n        return NEXT_ROUTER_STATE_TREE;\n    },\n    NEXT_ROUTER_PREFETCH: function() {\n        return NEXT_ROUTER_PREFETCH;\n    },\n    NEXT_URL: function() {\n        return NEXT_URL;\n    },\n    FETCH_CACHE_HEADER: function() {\n        return FETCH_CACHE_HEADER;\n    },\n    RSC_CONTENT_TYPE_HEADER: function() {\n        return RSC_CONTENT_TYPE_HEADER;\n    },\n    RSC_VARY_HEADER: function() {\n        return RSC_VARY_HEADER;\n    },\n    FLIGHT_PARAMETERS: function() {\n        return FLIGHT_PARAMETERS;\n    },\n    NEXT_RSC_UNION_QUERY: function() {\n        return NEXT_RSC_UNION_QUERY;\n    }\n});\nconst RSC = \"RSC\";\nconst ACTION = \"Next-Action\";\nconst NEXT_ROUTER_STATE_TREE = \"Next-Router-State-Tree\";\nconst NEXT_ROUTER_PREFETCH = \"Next-Router-Prefetch\";\nconst NEXT_URL = \"Next-Url\";\nconst FETCH_CACHE_HEADER = \"x-vercel-sc-headers\";\nconst RSC_CONTENT_TYPE_HEADER = \"text/x-component\";\nconst RSC_VARY_HEADER = RSC + \", \" + NEXT_ROUTER_STATE_TREE + \", \" + NEXT_ROUTER_PREFETCH + \", \" + NEXT_URL;\nconst FLIGHT_PARAMETERS = [\n    [\n        RSC\n    ],\n    [\n        NEXT_ROUTER_STATE_TREE\n    ],\n    [\n        NEXT_ROUTER_PREFETCH\n    ]\n];\nconst NEXT_RSC_UNION_QUERY = \"_rsc\";\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=app-router-headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FwcC1yb3V0ZXItaGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQVdOO0FBQ0EsU0FBU1csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSWpCLE9BQU9DLGNBQWMsQ0FBQ2UsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRYixTQUFTO0lBQ2JHLEtBQUs7UUFDRCxPQUFPQTtJQUNYO0lBQ0FDLFFBQVE7UUFDSixPQUFPQTtJQUNYO0lBQ0FDLHdCQUF3QjtRQUNwQixPQUFPQTtJQUNYO0lBQ0FDLHNCQUFzQjtRQUNsQixPQUFPQTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPQTtJQUNYO0lBQ0FDLG9CQUFvQjtRQUNoQixPQUFPQTtJQUNYO0lBQ0FDLHlCQUF5QjtRQUNyQixPQUFPQTtJQUNYO0lBQ0FDLGlCQUFpQjtRQUNiLE9BQU9BO0lBQ1g7SUFDQUMsbUJBQW1CO1FBQ2YsT0FBT0E7SUFDWDtJQUNBQyxzQkFBc0I7UUFDbEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTVQsTUFBTTtBQUNaLE1BQU1DLFNBQVM7QUFDZixNQUFNQyx5QkFBeUI7QUFDL0IsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLFdBQVc7QUFDakIsTUFBTUMscUJBQXFCO0FBQzNCLE1BQU1DLDBCQUEwQjtBQUNoQyxNQUFNQyxrQkFBa0JQLE1BQU0sT0FBT0UseUJBQXlCLE9BQU9DLHVCQUF1QixPQUFPQztBQUNuRyxNQUFNSSxvQkFBb0I7SUFDdEI7UUFDSVI7S0FDSDtJQUNEO1FBQ0lFO0tBQ0g7SUFDRDtRQUNJQztLQUNIO0NBQ0o7QUFDRCxNQUFNTSx1QkFBdUI7QUFFN0IsSUFBSSxDQUFDLE9BQU9aLFFBQVFtQixPQUFPLEtBQUssY0FBZSxPQUFPbkIsUUFBUW1CLE9BQU8sS0FBSyxZQUFZbkIsUUFBUW1CLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT25CLFFBQVFtQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLdEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRbUIsT0FBTyxFQUFFLGNBQWM7UUFBRWxCLE9BQU87SUFBSztJQUNuRUgsT0FBT3VCLE1BQU0sQ0FBQ3JCLFFBQVFtQixPQUFPLEVBQUVuQjtJQUMvQkUsT0FBT0YsT0FBTyxHQUFHQSxRQUFRbUIsT0FBTztBQUNsQyxFQUVBLDhDQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvYXBwLXJvdXRlci1oZWFkZXJzLmpzPzM1NmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBSU0M6IG51bGwsXG4gICAgQUNUSU9OOiBudWxsLFxuICAgIE5FWFRfUk9VVEVSX1NUQVRFX1RSRUU6IG51bGwsXG4gICAgTkVYVF9ST1VURVJfUFJFRkVUQ0g6IG51bGwsXG4gICAgTkVYVF9VUkw6IG51bGwsXG4gICAgRkVUQ0hfQ0FDSEVfSEVBREVSOiBudWxsLFxuICAgIFJTQ19DT05URU5UX1RZUEVfSEVBREVSOiBudWxsLFxuICAgIFJTQ19WQVJZX0hFQURFUjogbnVsbCxcbiAgICBGTElHSFRfUEFSQU1FVEVSUzogbnVsbCxcbiAgICBORVhUX1JTQ19VTklPTl9RVUVSWTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBSU0M6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUlNDO1xuICAgIH0sXG4gICAgQUNUSU9OOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTjtcbiAgICB9LFxuICAgIE5FWFRfUk9VVEVSX1NUQVRFX1RSRUU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTkVYVF9ST1VURVJfU1RBVEVfVFJFRTtcbiAgICB9LFxuICAgIE5FWFRfUk9VVEVSX1BSRUZFVENIOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE5FWFRfUk9VVEVSX1BSRUZFVENIO1xuICAgIH0sXG4gICAgTkVYVF9VUkw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gTkVYVF9VUkw7XG4gICAgfSxcbiAgICBGRVRDSF9DQUNIRV9IRUFERVI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRkVUQ0hfQ0FDSEVfSEVBREVSO1xuICAgIH0sXG4gICAgUlNDX0NPTlRFTlRfVFlQRV9IRUFERVI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUlNDX0NPTlRFTlRfVFlQRV9IRUFERVI7XG4gICAgfSxcbiAgICBSU0NfVkFSWV9IRUFERVI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUlNDX1ZBUllfSEVBREVSO1xuICAgIH0sXG4gICAgRkxJR0hUX1BBUkFNRVRFUlM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRkxJR0hUX1BBUkFNRVRFUlM7XG4gICAgfSxcbiAgICBORVhUX1JTQ19VTklPTl9RVUVSWTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBORVhUX1JTQ19VTklPTl9RVUVSWTtcbiAgICB9XG59KTtcbmNvbnN0IFJTQyA9IFwiUlNDXCI7XG5jb25zdCBBQ1RJT04gPSBcIk5leHQtQWN0aW9uXCI7XG5jb25zdCBORVhUX1JPVVRFUl9TVEFURV9UUkVFID0gXCJOZXh0LVJvdXRlci1TdGF0ZS1UcmVlXCI7XG5jb25zdCBORVhUX1JPVVRFUl9QUkVGRVRDSCA9IFwiTmV4dC1Sb3V0ZXItUHJlZmV0Y2hcIjtcbmNvbnN0IE5FWFRfVVJMID0gXCJOZXh0LVVybFwiO1xuY29uc3QgRkVUQ0hfQ0FDSEVfSEVBREVSID0gXCJ4LXZlcmNlbC1zYy1oZWFkZXJzXCI7XG5jb25zdCBSU0NfQ09OVEVOVF9UWVBFX0hFQURFUiA9IFwidGV4dC94LWNvbXBvbmVudFwiO1xuY29uc3QgUlNDX1ZBUllfSEVBREVSID0gUlNDICsgXCIsIFwiICsgTkVYVF9ST1VURVJfU1RBVEVfVFJFRSArIFwiLCBcIiArIE5FWFRfUk9VVEVSX1BSRUZFVENIICsgXCIsIFwiICsgTkVYVF9VUkw7XG5jb25zdCBGTElHSFRfUEFSQU1FVEVSUyA9IFtcbiAgICBbXG4gICAgICAgIFJTQ1xuICAgIF0sXG4gICAgW1xuICAgICAgICBORVhUX1JPVVRFUl9TVEFURV9UUkVFXG4gICAgXSxcbiAgICBbXG4gICAgICAgIE5FWFRfUk9VVEVSX1BSRUZFVENIXG4gICAgXVxuXTtcbmNvbnN0IE5FWFRfUlNDX1VOSU9OX1FVRVJZID0gXCJfcnNjXCI7XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZXItaGVhZGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJSU0MiLCJBQ1RJT04iLCJORVhUX1JPVVRFUl9TVEFURV9UUkVFIiwiTkVYVF9ST1VURVJfUFJFRkVUQ0giLCJORVhUX1VSTCIsIkZFVENIX0NBQ0hFX0hFQURFUiIsIlJTQ19DT05URU5UX1RZUEVfSEVBREVSIiwiUlNDX1ZBUllfSEVBREVSIiwiRkxJR0hUX1BBUkFNRVRFUlMiLCJORVhUX1JTQ19VTklPTl9RVUVSWSIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/app-router-headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/draft-mode.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/components/draft-mode.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraftMode\", ({\n    enumerable: true,\n    get: function() {\n        return DraftMode;\n    }\n}));\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nclass DraftMode {\n    get isEnabled() {\n        return this._provider.isEnabled;\n    }\n    enable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().enable()\")) {\n            return;\n        }\n        return this._provider.enable();\n    }\n    disable() {\n        if ((0, _staticgenerationbailout.staticGenerationBailout)(\"draftMode().disable()\")) {\n            return;\n        }\n        return this._provider.disable();\n    }\n    constructor(provider){\n        this._provider = provider;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=draft-mode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2RyYWZ0LW1vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDJCQUEyQkMsbUJBQU9BLENBQUMsa0hBQTZCO0FBQ3RFLE1BQU1GO0lBQ0YsSUFBSUcsWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDQyxTQUFTLENBQUNELFNBQVM7SUFDbkM7SUFDQUUsU0FBUztRQUNMLElBQUksQ0FBQyxHQUFHSix5QkFBeUJLLHVCQUF1QixFQUFFLHlCQUF5QjtZQUMvRTtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUNGLFNBQVMsQ0FBQ0MsTUFBTTtJQUNoQztJQUNBRSxVQUFVO1FBQ04sSUFBSSxDQUFDLEdBQUdOLHlCQUF5QkssdUJBQXVCLEVBQUUsMEJBQTBCO1lBQ2hGO1FBQ0o7UUFDQSxPQUFPLElBQUksQ0FBQ0YsU0FBUyxDQUFDRyxPQUFPO0lBQ2pDO0lBQ0FDLFlBQVlDLFFBQVEsQ0FBQztRQUNqQixJQUFJLENBQUNMLFNBQVMsR0FBR0s7SUFDckI7QUFDSjtBQUVBLElBQUksQ0FBQyxPQUFPYixRQUFRYyxPQUFPLEtBQUssY0FBZSxPQUFPZCxRQUFRYyxPQUFPLEtBQUssWUFBWWQsUUFBUWMsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPZCxRQUFRYyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLakIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRYyxPQUFPLEVBQUUsY0FBYztRQUFFYixPQUFPO0lBQUs7SUFDbkVILE9BQU9rQixNQUFNLENBQUNoQixRQUFRYyxPQUFPLEVBQUVkO0lBQy9CaUIsT0FBT2pCLE9BQU8sR0FBR0EsUUFBUWMsT0FBTztBQUNsQyxFQUVBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvZHJhZnQtbW9kZS5qcz8zMWFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRHJhZnRNb2RlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEcmFmdE1vZGU7XG4gICAgfVxufSk7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0XCIpO1xuY2xhc3MgRHJhZnRNb2RlIHtcbiAgICBnZXQgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuaXNFbmFibGVkO1xuICAgIH1cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImRyYWZ0TW9kZSgpLmVuYWJsZSgpXCIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3ZpZGVyLmVuYWJsZSgpO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBpZiAoKDAsIF9zdGF0aWNnZW5lcmF0aW9uYmFpbG91dC5zdGF0aWNHZW5lcmF0aW9uQmFpbG91dCkoXCJkcmFmdE1vZGUoKS5kaXNhYmxlKClcIikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIuZGlzYWJsZSgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcil7XG4gICAgICAgIHRoaXMuX3Byb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgfVxufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcmFmdC1tb2RlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJEcmFmdE1vZGUiLCJfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQiLCJyZXF1aXJlIiwiaXNFbmFibGVkIiwiX3Byb3ZpZGVyIiwiZW5hYmxlIiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJkaXNhYmxlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlciIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/draft-mode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/headers.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/client/components/headers.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    headers: function() {\n        return headers;\n    },\n    cookies: function() {\n        return cookies;\n    },\n    draftMode: function() {\n        return draftMode;\n    }\n});\nconst _requestcookies = __webpack_require__(/*! ../../server/web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _headers = __webpack_require__(/*! ../../server/web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _cookies = __webpack_require__(/*! ../../server/web/spec-extension/cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _requestasyncstorage = __webpack_require__(/*! ./request-async-storage */ \"(shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst _actionasyncstorage = __webpack_require__(/*! ./action-async-storage */ \"(shared)/./node_modules/next/dist/client/components/action-async-storage.js\");\nconst _staticgenerationbailout = __webpack_require__(/*! ./static-generation-bailout */ \"(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst _draftmode = __webpack_require__(/*! ./draft-mode */ \"(rsc)/./node_modules/next/dist/client/components/draft-mode.js\");\nfunction headers() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"headers\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _headers.HeadersAdapter.seal(new Headers({}));\n    }\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: headers() expects to have requestAsyncStorage, none available.\");\n    }\n    return requestStore.headers;\n}\nfunction cookies() {\n    if ((0, _staticgenerationbailout.staticGenerationBailout)(\"cookies\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _requestcookies.RequestCookiesAdapter.seal(new _cookies.RequestCookies(new Headers({})));\n    }\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: cookies() expects to have requestAsyncStorage, none available.\");\n    }\n    const asyncActionStore = _actionasyncstorage.actionAsyncStorage.getStore();\n    if (asyncActionStore && (asyncActionStore.isAction || asyncActionStore.isAppRoute)) {\n        // We can't conditionally return different types here based on the context.\n        // To avoid confusion, we always return the readonly type here.\n        return requestStore.mutableCookies;\n    }\n    return requestStore.cookies;\n}\nfunction draftMode() {\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: draftMode() expects to have requestAsyncStorage, none available.\");\n    }\n    return new _draftmode.DraftMode(requestStore.draftMode);\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hlYWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FJTjtBQUNBLFNBQVNJLFFBQVFDLE1BQU0sRUFBRUMsR0FBRztJQUN4QixJQUFJLElBQUlDLFFBQVFELElBQUlWLE9BQU9DLGNBQWMsQ0FBQ1EsUUFBUUUsTUFBTTtRQUNwREMsWUFBWTtRQUNaQyxLQUFLSCxHQUFHLENBQUNDLEtBQUs7SUFDbEI7QUFDSjtBQUNBSCxRQUFRTixTQUFTO0lBQ2JHLFNBQVM7UUFDTCxPQUFPQTtJQUNYO0lBQ0FDLFNBQVM7UUFDTCxPQUFPQTtJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPQTtJQUNYO0FBQ0o7QUFDQSxNQUFNTyxrQkFBa0JDLG1CQUFPQSxDQUFDLHNKQUEwRDtBQUMxRixNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyxzSUFBa0Q7QUFDM0UsTUFBTUUsV0FBV0YsbUJBQU9BLENBQUMsb0hBQXlDO0FBQ2xFLE1BQU1HLHVCQUF1QkgsbUJBQU9BLENBQUMsNkdBQXlCO0FBQzlELE1BQU1JLHNCQUFzQkosbUJBQU9BLENBQUMsMkdBQXdCO0FBQzVELE1BQU1LLDJCQUEyQkwsbUJBQU9BLENBQUMsa0hBQTZCO0FBQ3RFLE1BQU1NLGFBQWFOLG1CQUFPQSxDQUFDLG9GQUFjO0FBQ3pDLFNBQVNWO0lBQ0wsSUFBSSxDQUFDLEdBQUdlLHlCQUF5QkUsdUJBQXVCLEVBQUUsV0FBVztRQUNqRUMsTUFBTTtJQUNWLElBQUk7UUFDQSxPQUFPUCxTQUFTUSxjQUFjLENBQUNDLElBQUksQ0FBQyxJQUFJQyxRQUFRLENBQUM7SUFDckQ7SUFDQSxNQUFNQyxlQUFlVCxxQkFBcUJVLG1CQUFtQixDQUFDQyxRQUFRO0lBQ3RFLElBQUksQ0FBQ0YsY0FBYztRQUNmLE1BQU0sSUFBSUcsTUFBTTtJQUNwQjtJQUNBLE9BQU9ILGFBQWF0QixPQUFPO0FBQy9CO0FBQ0EsU0FBU0M7SUFDTCxJQUFJLENBQUMsR0FBR2MseUJBQXlCRSx1QkFBdUIsRUFBRSxXQUFXO1FBQ2pFQyxNQUFNO0lBQ1YsSUFBSTtRQUNBLE9BQU9ULGdCQUFnQmlCLHFCQUFxQixDQUFDTixJQUFJLENBQUMsSUFBSVIsU0FBU2UsY0FBYyxDQUFDLElBQUlOLFFBQVEsQ0FBQztJQUMvRjtJQUNBLE1BQU1DLGVBQWVULHFCQUFxQlUsbUJBQW1CLENBQUNDLFFBQVE7SUFDdEUsSUFBSSxDQUFDRixjQUFjO1FBQ2YsTUFBTSxJQUFJRyxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUcsbUJBQW1CZCxvQkFBb0JlLGtCQUFrQixDQUFDTCxRQUFRO0lBQ3hFLElBQUlJLG9CQUFxQkEsQ0FBQUEsaUJBQWlCRSxRQUFRLElBQUlGLGlCQUFpQkcsVUFBVSxHQUFHO1FBQ2hGLDJFQUEyRTtRQUMzRSwrREFBK0Q7UUFDL0QsT0FBT1QsYUFBYVUsY0FBYztJQUN0QztJQUNBLE9BQU9WLGFBQWFyQixPQUFPO0FBQy9CO0FBQ0EsU0FBU0M7SUFDTCxNQUFNb0IsZUFBZVQscUJBQXFCVSxtQkFBbUIsQ0FBQ0MsUUFBUTtJQUN0RSxJQUFJLENBQUNGLGNBQWM7UUFDZixNQUFNLElBQUlHLE1BQU07SUFDcEI7SUFDQSxPQUFPLElBQUlULFdBQVdpQixTQUFTLENBQUNYLGFBQWFwQixTQUFTO0FBQzFEO0FBRUEsSUFBSSxDQUFDLE9BQU9MLFFBQVFxQyxPQUFPLEtBQUssY0FBZSxPQUFPckMsUUFBUXFDLE9BQU8sS0FBSyxZQUFZckMsUUFBUXFDLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT3JDLFFBQVFxQyxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLeEMsT0FBT0MsY0FBYyxDQUFDQyxRQUFRcUMsT0FBTyxFQUFFLGNBQWM7UUFBRXBDLE9BQU87SUFBSztJQUNuRUgsT0FBT3lDLE1BQU0sQ0FBQ3ZDLFFBQVFxQyxPQUFPLEVBQUVyQztJQUMvQkUsT0FBT0YsT0FBTyxHQUFHQSxRQUFRcUMsT0FBTztBQUNsQyxFQUVBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaGVhZGVycy5qcz8wYmFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaGVhZGVyczogbnVsbCxcbiAgICBjb29raWVzOiBudWxsLFxuICAgIGRyYWZ0TW9kZTogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBoZWFkZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRlcnM7XG4gICAgfSxcbiAgICBjb29raWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNvb2tpZXM7XG4gICAgfSxcbiAgICBkcmFmdE1vZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZHJhZnRNb2RlO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rjb29raWVzID0gcmVxdWlyZShcIi4uLy4uL3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVxdWVzdC1jb29raWVzXCIpO1xuY29uc3QgX2hlYWRlcnMgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9oZWFkZXJzXCIpO1xuY29uc3QgX2Nvb2tpZXMgPSByZXF1aXJlKFwiLi4vLi4vc2VydmVyL3dlYi9zcGVjLWV4dGVuc2lvbi9jb29raWVzXCIpO1xuY29uc3QgX3JlcXVlc3Rhc3luY3N0b3JhZ2UgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBfYWN0aW9uYXN5bmNzdG9yYWdlID0gcmVxdWlyZShcIi4vYWN0aW9uLWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQgPSByZXF1aXJlKFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1iYWlsb3V0XCIpO1xuY29uc3QgX2RyYWZ0bW9kZSA9IHJlcXVpcmUoXCIuL2RyYWZ0LW1vZGVcIik7XG5mdW5jdGlvbiBoZWFkZXJzKCkge1xuICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImhlYWRlcnNcIiwge1xuICAgICAgICBsaW5rOiBcImh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9idWlsZGluZy15b3VyLWFwcGxpY2F0aW9uL3JlbmRlcmluZy9zdGF0aWMtYW5kLWR5bmFtaWMjZHluYW1pYy1yZW5kZXJpbmdcIlxuICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBfaGVhZGVycy5IZWFkZXJzQWRhcHRlci5zZWFsKG5ldyBIZWFkZXJzKHt9KSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IF9yZXF1ZXN0YXN5bmNzdG9yYWdlLnJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIXJlcXVlc3RTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IGhlYWRlcnMoKSBleHBlY3RzIHRvIGhhdmUgcmVxdWVzdEFzeW5jU3RvcmFnZSwgbm9uZSBhdmFpbGFibGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdFN0b3JlLmhlYWRlcnM7XG59XG5mdW5jdGlvbiBjb29raWVzKCkge1xuICAgIGlmICgoMCwgX3N0YXRpY2dlbmVyYXRpb25iYWlsb3V0LnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KShcImNvb2tpZXNcIiwge1xuICAgICAgICBsaW5rOiBcImh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9idWlsZGluZy15b3VyLWFwcGxpY2F0aW9uL3JlbmRlcmluZy9zdGF0aWMtYW5kLWR5bmFtaWMjZHluYW1pYy1yZW5kZXJpbmdcIlxuICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBfcmVxdWVzdGNvb2tpZXMuUmVxdWVzdENvb2tpZXNBZGFwdGVyLnNlYWwobmV3IF9jb29raWVzLlJlcXVlc3RDb29raWVzKG5ldyBIZWFkZXJzKHt9KSkpO1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZS5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFyZXF1ZXN0U3RvcmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YXJpYW50OiBjb29raWVzKCkgZXhwZWN0cyB0byBoYXZlIHJlcXVlc3RBc3luY1N0b3JhZ2UsIG5vbmUgYXZhaWxhYmxlLlwiKTtcbiAgICB9XG4gICAgY29uc3QgYXN5bmNBY3Rpb25TdG9yZSA9IF9hY3Rpb25hc3luY3N0b3JhZ2UuYWN0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKGFzeW5jQWN0aW9uU3RvcmUgJiYgKGFzeW5jQWN0aW9uU3RvcmUuaXNBY3Rpb24gfHwgYXN5bmNBY3Rpb25TdG9yZS5pc0FwcFJvdXRlKSkge1xuICAgICAgICAvLyBXZSBjYW4ndCBjb25kaXRpb25hbGx5IHJldHVybiBkaWZmZXJlbnQgdHlwZXMgaGVyZSBiYXNlZCBvbiB0aGUgY29udGV4dC5cbiAgICAgICAgLy8gVG8gYXZvaWQgY29uZnVzaW9uLCB3ZSBhbHdheXMgcmV0dXJuIHRoZSByZWFkb25seSB0eXBlIGhlcmUuXG4gICAgICAgIHJldHVybiByZXF1ZXN0U3RvcmUubXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0U3RvcmUuY29va2llcztcbn1cbmZ1bmN0aW9uIGRyYWZ0TW9kZSgpIHtcbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZS5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFyZXF1ZXN0U3RvcmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YXJpYW50OiBkcmFmdE1vZGUoKSBleHBlY3RzIHRvIGhhdmUgcmVxdWVzdEFzeW5jU3RvcmFnZSwgbm9uZSBhdmFpbGFibGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9kcmFmdG1vZGUuRHJhZnRNb2RlKHJlcXVlc3RTdG9yZS5kcmFmdE1vZGUpO1xufVxuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWFkZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsImhlYWRlcnMiLCJjb29raWVzIiwiZHJhZnRNb2RlIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3JlcXVlc3Rjb29raWVzIiwicmVxdWlyZSIsIl9oZWFkZXJzIiwiX2Nvb2tpZXMiLCJfcmVxdWVzdGFzeW5jc3RvcmFnZSIsIl9hY3Rpb25hc3luY3N0b3JhZ2UiLCJfc3RhdGljZ2VuZXJhdGlvbmJhaWxvdXQiLCJfZHJhZnRtb2RlIiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJsaW5rIiwiSGVhZGVyc0FkYXB0ZXIiLCJzZWFsIiwiSGVhZGVycyIsInJlcXVlc3RTdG9yZSIsInJlcXVlc3RBc3luY1N0b3JhZ2UiLCJnZXRTdG9yZSIsIkVycm9yIiwiUmVxdWVzdENvb2tpZXNBZGFwdGVyIiwiUmVxdWVzdENvb2tpZXMiLCJhc3luY0FjdGlvblN0b3JlIiwiYWN0aW9uQXN5bmNTdG9yYWdlIiwiaXNBY3Rpb24iLCJpc0FwcFJvdXRlIiwibXV0YWJsZUNvb2tpZXMiLCJEcmFmdE1vZGUiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/hooks-server-context.js ***!
  \**************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    DYNAMIC_ERROR_CODE: function() {\n        return DYNAMIC_ERROR_CODE;\n    },\n    DynamicServerError: function() {\n        return DynamicServerError;\n    }\n});\nconst DYNAMIC_ERROR_CODE = \"DYNAMIC_SERVER_USAGE\";\nclass DynamicServerError extends Error {\n    constructor(type){\n        super(\"Dynamic server usage: \" + type);\n        this.digest = DYNAMIC_ERROR_CODE;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=hooks-server-context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2hvb2tzLXNlcnZlci1jb250ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBR047QUFDQSxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxvQkFBb0I7UUFDaEIsT0FBT0E7SUFDWDtJQUNBQyxvQkFBb0I7UUFDaEIsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTUQscUJBQXFCO0FBQzNCLE1BQU1DLDJCQUEyQk87SUFDN0JDLFlBQVlDLElBQUksQ0FBQztRQUNiLEtBQUssQ0FBQywyQkFBMkJBO1FBQ2pDLElBQUksQ0FBQ0MsTUFBTSxHQUFHWDtJQUNsQjtBQUNKO0FBRUEsSUFBSSxDQUFDLE9BQU9ILFFBQVFlLE9BQU8sS0FBSyxjQUFlLE9BQU9mLFFBQVFlLE9BQU8sS0FBSyxZQUFZZixRQUFRZSxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9mLFFBQVFlLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktsQixPQUFPQyxjQUFjLENBQUNDLFFBQVFlLE9BQU8sRUFBRSxjQUFjO1FBQUVkLE9BQU87SUFBSztJQUNuRUgsT0FBT21CLE1BQU0sQ0FBQ2pCLFFBQVFlLE9BQU8sRUFBRWY7SUFDL0JFLE9BQU9GLE9BQU8sR0FBR0EsUUFBUWUsT0FBTztBQUNsQyxFQUVBLGdEQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvaG9va3Mtc2VydmVyLWNvbnRleHQuanM/MDA5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIERZTkFNSUNfRVJST1JfQ09ERTogbnVsbCxcbiAgICBEeW5hbWljU2VydmVyRXJyb3I6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgRFlOQU1JQ19FUlJPUl9DT0RFOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIERZTkFNSUNfRVJST1JfQ09ERTtcbiAgICB9LFxuICAgIER5bmFtaWNTZXJ2ZXJFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEeW5hbWljU2VydmVyRXJyb3I7XG4gICAgfVxufSk7XG5jb25zdCBEWU5BTUlDX0VSUk9SX0NPREUgPSBcIkRZTkFNSUNfU0VSVkVSX1VTQUdFXCI7XG5jbGFzcyBEeW5hbWljU2VydmVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IodHlwZSl7XG4gICAgICAgIHN1cGVyKFwiRHluYW1pYyBzZXJ2ZXIgdXNhZ2U6IFwiICsgdHlwZSk7XG4gICAgICAgIHRoaXMuZGlnZXN0ID0gRFlOQU1JQ19FUlJPUl9DT0RFO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9va3Mtc2VydmVyLWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiRFlOQU1JQ19FUlJPUl9DT0RFIiwiRHluYW1pY1NlcnZlckVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJkaWdlc3QiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/not-found.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/client/components/not-found.js ***!
  \***************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    notFound: function() {\n        return notFound;\n    },\n    isNotFoundError: function() {\n        return isNotFoundError;\n    }\n});\nconst NOT_FOUND_ERROR_CODE = \"NEXT_NOT_FOUND\";\nfunction notFound() {\n    // eslint-disable-next-line no-throw-literal\n    const error = new Error(NOT_FOUND_ERROR_CODE);\n    error.digest = NOT_FOUND_ERROR_CODE;\n    throw error;\n}\nfunction isNotFoundError(error) {\n    return (error == null ? void 0 : error.digest) === NOT_FOUND_ERROR_CODE;\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=not-found.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsVUFBVTtRQUNOLE9BQU9BO0lBQ1g7SUFDQUMsaUJBQWlCO1FBQ2IsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sdUJBQXVCO0FBQzdCLFNBQVNSO0lBQ0wsNENBQTRDO0lBQzVDLE1BQU1TLFFBQVEsSUFBSUMsTUFBTUY7SUFDeEJDLE1BQU1FLE1BQU0sR0FBR0g7SUFDZixNQUFNQztBQUNWO0FBQ0EsU0FBU1IsZ0JBQWdCUSxLQUFLO0lBQzFCLE9BQU8sQ0FBQ0EsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUUsTUFBTSxNQUFNSDtBQUN2RDtBQUVBLElBQUksQ0FBQyxPQUFPWCxRQUFRZSxPQUFPLEtBQUssY0FBZSxPQUFPZixRQUFRZSxPQUFPLEtBQUssWUFBWWYsUUFBUWUsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPZixRQUFRZSxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLbEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRZSxPQUFPLEVBQUUsY0FBYztRQUFFZCxPQUFPO0lBQUs7SUFDbkVILE9BQU9tQixNQUFNLENBQUNqQixRQUFRZSxPQUFPLEVBQUVmO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVFlLE9BQU87QUFDbEMsRUFFQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZC5qcz80MjAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbm90Rm91bmQ6IG51bGwsXG4gICAgaXNOb3RGb3VuZEVycm9yOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIG5vdEZvdW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vdEZvdW5kO1xuICAgIH0sXG4gICAgaXNOb3RGb3VuZEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGlzTm90Rm91bmRFcnJvcjtcbiAgICB9XG59KTtcbmNvbnN0IE5PVF9GT1VORF9FUlJPUl9DT0RFID0gXCJORVhUX05PVF9GT1VORFwiO1xuZnVuY3Rpb24gbm90Rm91bmQoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihOT1RfRk9VTkRfRVJST1JfQ09ERSk7XG4gICAgZXJyb3IuZGlnZXN0ID0gTk9UX0ZPVU5EX0VSUk9SX0NPREU7XG4gICAgdGhyb3cgZXJyb3I7XG59XG5mdW5jdGlvbiBpc05vdEZvdW5kRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5kaWdlc3QpID09PSBOT1RfRk9VTkRfRVJST1JfQ09ERTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LWZvdW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIm5vdEZvdW5kIiwiaXNOb3RGb3VuZEVycm9yIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiTk9UX0ZPVU5EX0VSUk9SX0NPREUiLCJlcnJvciIsIkVycm9yIiwiZGlnZXN0IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/not-found.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/redirect.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/client/components/redirect.js ***!
  \**************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RedirectType: function() {\n        return RedirectType;\n    },\n    getRedirectError: function() {\n        return getRedirectError;\n    },\n    redirect: function() {\n        return redirect;\n    },\n    isRedirectError: function() {\n        return isRedirectError;\n    },\n    getURLFromRedirectError: function() {\n        return getURLFromRedirectError;\n    },\n    getRedirectTypeFromError: function() {\n        return getRedirectTypeFromError;\n    }\n});\nconst _requestasyncstorage = __webpack_require__(/*! ./request-async-storage */ \"(shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nvar RedirectType;\n(function(RedirectType) {\n    RedirectType[\"push\"] = \"push\";\n    RedirectType[\"replace\"] = \"replace\";\n})(RedirectType || (RedirectType = {}));\nfunction getRedirectError(url, type) {\n    const error = new Error(REDIRECT_ERROR_CODE);\n    error.digest = REDIRECT_ERROR_CODE + \";\" + type + \";\" + url;\n    const requestStore = _requestasyncstorage.requestAsyncStorage.getStore();\n    if (requestStore) {\n        error.mutableCookies = requestStore.mutableCookies;\n    }\n    return error;\n}\nfunction redirect(url, type) {\n    if (type === void 0) type = \"replace\";\n    throw getRedirectError(url, type);\n}\nfunction isRedirectError(error) {\n    if (typeof (error == null ? void 0 : error.digest) !== \"string\") return false;\n    const [errorCode, type, destination] = error.digest.split(\";\", 3);\n    return errorCode === REDIRECT_ERROR_CODE && (type === \"replace\" || type === \"push\") && typeof destination === \"string\";\n}\nfunction getURLFromRedirectError(error) {\n    if (!isRedirectError(error)) return null;\n    // Slices off the beginning of the digest that contains the code and the\n    // separating ';'.\n    return error.digest.split(\";\", 3)[2];\n}\nfunction getRedirectTypeFromError(error) {\n    if (!isRedirectError(error)) {\n        throw new Error(\"Not a redirect error\");\n    }\n    return error.digest.split(\";\", 3)[1];\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=redirect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlZGlyZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBT047QUFDQSxTQUFTTyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJYixPQUFPQyxjQUFjLENBQUNXLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVQsU0FBUztJQUNiRyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtJQUNBQyxrQkFBa0I7UUFDZCxPQUFPQTtJQUNYO0lBQ0FDLFVBQVU7UUFDTixPQUFPQTtJQUNYO0lBQ0FDLGlCQUFpQjtRQUNiLE9BQU9BO0lBQ1g7SUFDQUMseUJBQXlCO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQUMsMEJBQTBCO1FBQ3RCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1PLHVCQUF1QkMsbUJBQU9BLENBQUMsNkdBQXlCO0FBQzlELE1BQU1DLHNCQUFzQjtBQUM1QixJQUFJZDtBQUNILFVBQVNBLFlBQVk7SUFDbEJBLFlBQVksQ0FBQyxPQUFPLEdBQUc7SUFDdkJBLFlBQVksQ0FBQyxVQUFVLEdBQUc7QUFDOUIsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUM7QUFDcEMsU0FBU0MsaUJBQWlCYyxHQUFHLEVBQUVDLElBQUk7SUFDL0IsTUFBTUMsUUFBUSxJQUFJQyxNQUFNSjtJQUN4QkcsTUFBTUUsTUFBTSxHQUFHTCxzQkFBc0IsTUFBTUUsT0FBTyxNQUFNRDtJQUN4RCxNQUFNSyxlQUFlUixxQkFBcUJTLG1CQUFtQixDQUFDQyxRQUFRO0lBQ3RFLElBQUlGLGNBQWM7UUFDZEgsTUFBTU0sY0FBYyxHQUFHSCxhQUFhRyxjQUFjO0lBQ3REO0lBQ0EsT0FBT047QUFDWDtBQUNBLFNBQVNmLFNBQVNhLEdBQUcsRUFBRUMsSUFBSTtJQUN2QixJQUFJQSxTQUFTLEtBQUssR0FBR0EsT0FBTztJQUM1QixNQUFNZixpQkFBaUJjLEtBQUtDO0FBQ2hDO0FBQ0EsU0FBU2IsZ0JBQWdCYyxLQUFLO0lBQzFCLElBQUksT0FBUUEsQ0FBQUEsU0FBUyxPQUFPLEtBQUssSUFBSUEsTUFBTUUsTUFBTSxNQUFNLFVBQVUsT0FBTztJQUN4RSxNQUFNLENBQUNLLFdBQVdSLE1BQU1TLFlBQVksR0FBR1IsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSztJQUMvRCxPQUFPRixjQUFjVix1QkFBd0JFLENBQUFBLFNBQVMsYUFBYUEsU0FBUyxNQUFLLEtBQU0sT0FBT1MsZ0JBQWdCO0FBQ2xIO0FBQ0EsU0FBU3JCLHdCQUF3QmEsS0FBSztJQUNsQyxJQUFJLENBQUNkLGdCQUFnQmMsUUFBUSxPQUFPO0lBQ3BDLHdFQUF3RTtJQUN4RSxrQkFBa0I7SUFDbEIsT0FBT0EsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtBQUN4QztBQUNBLFNBQVNyQix5QkFBeUJZLEtBQUs7SUFDbkMsSUFBSSxDQUFDZCxnQkFBZ0JjLFFBQVE7UUFDekIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBQ0EsT0FBT0QsTUFBTUUsTUFBTSxDQUFDTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtBQUN4QztBQUVBLElBQUksQ0FBQyxPQUFPN0IsUUFBUThCLE9BQU8sS0FBSyxjQUFlLE9BQU85QixRQUFROEIsT0FBTyxLQUFLLFlBQVk5QixRQUFROEIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPOUIsUUFBUThCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktqQyxPQUFPQyxjQUFjLENBQUNDLFFBQVE4QixPQUFPLEVBQUUsY0FBYztRQUFFN0IsT0FBTztJQUFLO0lBQ25FSCxPQUFPa0MsTUFBTSxDQUFDaEMsUUFBUThCLE9BQU8sRUFBRTlCO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVE4QixPQUFPO0FBQ2xDLEVBRUEsb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdC5qcz9iMjViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUmVkaXJlY3RUeXBlOiBudWxsLFxuICAgIGdldFJlZGlyZWN0RXJyb3I6IG51bGwsXG4gICAgcmVkaXJlY3Q6IG51bGwsXG4gICAgaXNSZWRpcmVjdEVycm9yOiBudWxsLFxuICAgIGdldFVSTEZyb21SZWRpcmVjdEVycm9yOiBudWxsLFxuICAgIGdldFJlZGlyZWN0VHlwZUZyb21FcnJvcjogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBSZWRpcmVjdFR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUmVkaXJlY3RUeXBlO1xuICAgIH0sXG4gICAgZ2V0UmVkaXJlY3RFcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRSZWRpcmVjdEVycm9yO1xuICAgIH0sXG4gICAgcmVkaXJlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVkaXJlY3Q7XG4gICAgfSxcbiAgICBpc1JlZGlyZWN0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNSZWRpcmVjdEVycm9yO1xuICAgIH0sXG4gICAgZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3I7XG4gICAgfSxcbiAgICBnZXRSZWRpcmVjdFR5cGVGcm9tRXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0UmVkaXJlY3RUeXBlRnJvbUVycm9yO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rhc3luY3N0b3JhZ2UgPSByZXF1aXJlKFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2VcIik7XG5jb25zdCBSRURJUkVDVF9FUlJPUl9DT0RFID0gXCJORVhUX1JFRElSRUNUXCI7XG52YXIgUmVkaXJlY3RUeXBlO1xuKGZ1bmN0aW9uKFJlZGlyZWN0VHlwZSkge1xuICAgIFJlZGlyZWN0VHlwZVtcInB1c2hcIl0gPSBcInB1c2hcIjtcbiAgICBSZWRpcmVjdFR5cGVbXCJyZXBsYWNlXCJdID0gXCJyZXBsYWNlXCI7XG59KShSZWRpcmVjdFR5cGUgfHwgKFJlZGlyZWN0VHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBnZXRSZWRpcmVjdEVycm9yKHVybCwgdHlwZSkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKFJFRElSRUNUX0VSUk9SX0NPREUpO1xuICAgIGVycm9yLmRpZ2VzdCA9IFJFRElSRUNUX0VSUk9SX0NPREUgKyBcIjtcIiArIHR5cGUgKyBcIjtcIiArIHVybDtcbiAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSBfcmVxdWVzdGFzeW5jc3RvcmFnZS5yZXF1ZXN0QXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKHJlcXVlc3RTdG9yZSkge1xuICAgICAgICBlcnJvci5tdXRhYmxlQ29va2llcyA9IHJlcXVlc3RTdG9yZS5tdXRhYmxlQ29va2llcztcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuZnVuY3Rpb24gcmVkaXJlY3QodXJsLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgdHlwZSA9IFwicmVwbGFjZVwiO1xuICAgIHRocm93IGdldFJlZGlyZWN0RXJyb3IodXJsLCB0eXBlKTtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RFcnJvcihlcnJvcikge1xuICAgIGlmICh0eXBlb2YgKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5kaWdlc3QpICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgW2Vycm9yQ29kZSwgdHlwZSwgZGVzdGluYXRpb25dID0gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiLCAzKTtcbiAgICByZXR1cm4gZXJyb3JDb2RlID09PSBSRURJUkVDVF9FUlJPUl9DT0RFICYmICh0eXBlID09PSBcInJlcGxhY2VcIiB8fCB0eXBlID09PSBcInB1c2hcIikgJiYgdHlwZW9mIGRlc3RpbmF0aW9uID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoIWlzUmVkaXJlY3RFcnJvcihlcnJvcikpIHJldHVybiBudWxsO1xuICAgIC8vIFNsaWNlcyBvZmYgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGlnZXN0IHRoYXQgY29udGFpbnMgdGhlIGNvZGUgYW5kIHRoZVxuICAgIC8vIHNlcGFyYXRpbmcgJzsnLlxuICAgIHJldHVybiBlcnJvci5kaWdlc3Quc3BsaXQoXCI7XCIsIDMpWzJdO1xufVxuZnVuY3Rpb24gZ2V0UmVkaXJlY3RUeXBlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgaWYgKCFpc1JlZGlyZWN0RXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhIHJlZGlyZWN0IGVycm9yXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiLCAzKVsxXTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkaXJlY3QuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiUmVkaXJlY3RUeXBlIiwiZ2V0UmVkaXJlY3RFcnJvciIsInJlZGlyZWN0IiwiaXNSZWRpcmVjdEVycm9yIiwiZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IiLCJnZXRSZWRpcmVjdFR5cGVGcm9tRXJyb3IiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGFzeW5jc3RvcmFnZSIsInJlcXVpcmUiLCJSRURJUkVDVF9FUlJPUl9DT0RFIiwidXJsIiwidHlwZSIsImVycm9yIiwiRXJyb3IiLCJkaWdlc3QiLCJyZXF1ZXN0U3RvcmUiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIiwiZ2V0U3RvcmUiLCJtdXRhYmxlQ29va2llcyIsImVycm9yQ29kZSIsImRlc3RpbmF0aW9uIiwic3BsaXQiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/redirect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/static-generation-bailout.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"staticGenerationBailout\", ({\n    enumerable: true,\n    get: function() {\n        return staticGenerationBailout;\n    }\n}));\nconst _hooksservercontext = __webpack_require__(/*! ./hooks-server-context */ \"(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\");\nconst _staticgenerationasyncstorage = __webpack_require__(/*! ./static-generation-async-storage */ \"(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\");\nclass StaticGenBailoutError extends Error {\n    constructor(...args){\n        super(...args);\n        this.code = \"NEXT_STATIC_GEN_BAILOUT\";\n    }\n}\nfunction formatErrorMessage(reason, opts) {\n    const { dynamic, link } = opts || {};\n    const suffix = link ? \" See more info here: \" + link : \"\";\n    return \"Page\" + (dynamic ? ' with `dynamic = \"' + dynamic + '\"`' : \"\") + \" couldn't be rendered statically because it used `\" + reason + \"`.\" + suffix;\n}\nconst staticGenerationBailout = (reason, opts)=>{\n    const staticGenerationStore = _staticgenerationasyncstorage.staticGenerationAsyncStorage.getStore();\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.forceStatic) {\n        return true;\n    }\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.dynamicShouldError) {\n        var _opts_dynamic;\n        throw new StaticGenBailoutError(formatErrorMessage(reason, {\n            ...opts,\n            dynamic: (_opts_dynamic = opts == null ? void 0 : opts.dynamic) != null ? _opts_dynamic : \"error\"\n        }));\n    }\n    if (staticGenerationStore) {\n        staticGenerationStore.revalidate = 0;\n    }\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.isStaticGeneration) {\n        const err = new _hooksservercontext.DynamicServerError(formatErrorMessage(reason, {\n            ...opts,\n            // this error should be caught by Next to bail out of static generation\n            // in case it's uncaught, this link provides some additional context as to why\n            link: \"https://nextjs.org/docs/messages/dynamic-server-error\"\n        }));\n        staticGenerationStore.dynamicUsageDescription = reason;\n        staticGenerationStore.dynamicUsageStack = err.stack;\n        throw err;\n    }\n    return false;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-bailout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDJEQUEwRDtJQUN0REksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHNCQUFzQkMsbUJBQU9BLENBQUMsd0dBQXdCO0FBQzVELE1BQU1DLGdDQUFnQ0QsbUJBQU9BLENBQUMsaUlBQW1DO0FBQ2pGLE1BQU1FLDhCQUE4QkM7SUFDaENDLFlBQVksR0FBR0MsSUFBSSxDQUFDO1FBQ2hCLEtBQUssSUFBSUE7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBRztJQUNoQjtBQUNKO0FBQ0EsU0FBU0MsbUJBQW1CQyxNQUFNLEVBQUVDLElBQUk7SUFDcEMsTUFBTSxFQUFFQyxPQUFPLEVBQUdDLElBQUksRUFBRyxHQUFHRixRQUFRLENBQUM7SUFDckMsTUFBTUcsU0FBU0QsT0FBTywwQkFBMEJBLE9BQU87SUFDdkQsT0FBTyxTQUFVRCxDQUFBQSxVQUFVLHVCQUF1QkEsVUFBVSxPQUFPLEVBQUMsSUFBSyx1REFBdURGLFNBQVMsT0FBT0k7QUFDcEo7QUFDQSxNQUFNZCwwQkFBMEIsQ0FBQ1UsUUFBUUM7SUFDckMsTUFBTUksd0JBQXdCWiw4QkFBOEJhLDRCQUE0QixDQUFDQyxRQUFRO0lBQ2pHLElBQUlGLHlCQUF5QixPQUFPLEtBQUssSUFBSUEsc0JBQXNCRyxXQUFXLEVBQUU7UUFDNUUsT0FBTztJQUNYO0lBQ0EsSUFBSUgseUJBQXlCLE9BQU8sS0FBSyxJQUFJQSxzQkFBc0JJLGtCQUFrQixFQUFFO1FBQ25GLElBQUlDO1FBQ0osTUFBTSxJQUFJaEIsc0JBQXNCSyxtQkFBbUJDLFFBQVE7WUFDdkQsR0FBR0MsSUFBSTtZQUNQQyxTQUFTLENBQUNRLGdCQUFnQlQsUUFBUSxPQUFPLEtBQUssSUFBSUEsS0FBS0MsT0FBTyxLQUFLLE9BQU9RLGdCQUFnQjtRQUM5RjtJQUNKO0lBQ0EsSUFBSUwsdUJBQXVCO1FBQ3ZCQSxzQkFBc0JNLFVBQVUsR0FBRztJQUN2QztJQUNBLElBQUlOLHlCQUF5QixPQUFPLEtBQUssSUFBSUEsc0JBQXNCTyxrQkFBa0IsRUFBRTtRQUNuRixNQUFNQyxNQUFNLElBQUl0QixvQkFBb0J1QixrQkFBa0IsQ0FBQ2YsbUJBQW1CQyxRQUFRO1lBQzlFLEdBQUdDLElBQUk7WUFDUCx1RUFBdUU7WUFDdkUsOEVBQThFO1lBQzlFRSxNQUFNO1FBQ1Y7UUFDQUUsc0JBQXNCVSx1QkFBdUIsR0FBR2Y7UUFDaERLLHNCQUFzQlcsaUJBQWlCLEdBQUdILElBQUlJLEtBQUs7UUFDbkQsTUFBTUo7SUFDVjtJQUNBLE9BQU87QUFDWDtBQUVBLElBQUksQ0FBQyxPQUFPM0IsUUFBUWdDLE9BQU8sS0FBSyxjQUFlLE9BQU9oQyxRQUFRZ0MsT0FBTyxLQUFLLFlBQVloQyxRQUFRZ0MsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPaEMsUUFBUWdDLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktuQyxPQUFPQyxjQUFjLENBQUNDLFFBQVFnQyxPQUFPLEVBQUUsY0FBYztRQUFFL0IsT0FBTztJQUFLO0lBQ25FSCxPQUFPb0MsTUFBTSxDQUFDbEMsUUFBUWdDLE9BQU8sRUFBRWhDO0lBQy9CbUMsT0FBT25DLE9BQU8sR0FBR0EsUUFBUWdDLE9BQU87QUFDbEMsRUFFQSxxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWJhaWxvdXQuanM/MDQ2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dDtcbiAgICB9XG59KTtcbmNvbnN0IF9ob29rc3NlcnZlcmNvbnRleHQgPSByZXF1aXJlKFwiLi9ob29rcy1zZXJ2ZXItY29udGV4dFwiKTtcbmNvbnN0IF9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdlID0gcmVxdWlyZShcIi4vc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZVwiKTtcbmNsYXNzIFN0YXRpY0dlbkJhaWxvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuY29kZSA9IFwiTkVYVF9TVEFUSUNfR0VOX0JBSUxPVVRcIjtcbiAgICB9XG59XG5mdW5jdGlvbiBmb3JtYXRFcnJvck1lc3NhZ2UocmVhc29uLCBvcHRzKSB7XG4gICAgY29uc3QgeyBkeW5hbWljICwgbGluayAgfSA9IG9wdHMgfHwge307XG4gICAgY29uc3Qgc3VmZml4ID0gbGluayA/IFwiIFNlZSBtb3JlIGluZm8gaGVyZTogXCIgKyBsaW5rIDogXCJcIjtcbiAgICByZXR1cm4gXCJQYWdlXCIgKyAoZHluYW1pYyA/ICcgd2l0aCBgZHluYW1pYyA9IFwiJyArIGR5bmFtaWMgKyAnXCJgJyA6IFwiXCIpICsgXCIgY291bGRuJ3QgYmUgcmVuZGVyZWQgc3RhdGljYWxseSBiZWNhdXNlIGl0IHVzZWQgYFwiICsgcmVhc29uICsgXCJgLlwiICsgc3VmZml4O1xufVxuY29uc3Qgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgPSAocmVhc29uLCBvcHRzKT0+e1xuICAgIGNvbnN0IHN0YXRpY0dlbmVyYXRpb25TdG9yZSA9IF9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdlLnN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZm9yY2VTdGF0aWMpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uU3RvcmUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRpY0dlbmVyYXRpb25TdG9yZS5keW5hbWljU2hvdWxkRXJyb3IpIHtcbiAgICAgICAgdmFyIF9vcHRzX2R5bmFtaWM7XG4gICAgICAgIHRocm93IG5ldyBTdGF0aWNHZW5CYWlsb3V0RXJyb3IoZm9ybWF0RXJyb3JNZXNzYWdlKHJlYXNvbiwge1xuICAgICAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgICAgIGR5bmFtaWM6IChfb3B0c19keW5hbWljID0gb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5keW5hbWljKSAhPSBudWxsID8gX29wdHNfZHluYW1pYyA6IFwiZXJyb3JcIlxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uU3RvcmUpIHtcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnJldmFsaWRhdGUgPSAwO1xuICAgIH1cbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuaXNTdGF0aWNHZW5lcmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBfaG9va3NzZXJ2ZXJjb250ZXh0LkR5bmFtaWNTZXJ2ZXJFcnJvcihmb3JtYXRFcnJvck1lc3NhZ2UocmVhc29uLCB7XG4gICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgLy8gdGhpcyBlcnJvciBzaG91bGQgYmUgY2F1Z2h0IGJ5IE5leHQgdG8gYmFpbCBvdXQgb2Ygc3RhdGljIGdlbmVyYXRpb25cbiAgICAgICAgICAgIC8vIGluIGNhc2UgaXQncyB1bmNhdWdodCwgdGhpcyBsaW5rIHByb3ZpZGVzIHNvbWUgYWRkaXRpb25hbCBjb250ZXh0IGFzIHRvIHdoeVxuICAgICAgICAgICAgbGluazogXCJodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9keW5hbWljLXNlcnZlci1lcnJvclwiXG4gICAgICAgIH0pKTtcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZURlc2NyaXB0aW9uID0gcmVhc29uO1xuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1VzYWdlU3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJfaG9va3NzZXJ2ZXJjb250ZXh0IiwicmVxdWlyZSIsIl9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdlIiwiU3RhdGljR2VuQmFpbG91dEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJjb2RlIiwiZm9ybWF0RXJyb3JNZXNzYWdlIiwicmVhc29uIiwib3B0cyIsImR5bmFtaWMiLCJsaW5rIiwic3VmZml4Iiwic3RhdGljR2VuZXJhdGlvblN0b3JlIiwic3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSIsImdldFN0b3JlIiwiZm9yY2VTdGF0aWMiLCJkeW5hbWljU2hvdWxkRXJyb3IiLCJfb3B0c19keW5hbWljIiwicmV2YWxpZGF0ZSIsImlzU3RhdGljR2VuZXJhdGlvbiIsImVyciIsIkR5bmFtaWNTZXJ2ZXJFcnJvciIsImR5bmFtaWNVc2FnZURlc2NyaXB0aW9uIiwiZHluYW1pY1VzYWdlU3RhY2siLCJzdGFjayIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    RequestCookies: ()=>RequestCookies,\n    ResponseCookies: ()=>ResponseCookies,\n    parseCookie: ()=>parseCookie,\n    parseSetCookie: ()=>parseSetCookie,\n    splitCookiesString: ()=>splitCookiesString,\n    stringifyCookie: ()=>stringifyCookie\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/serialize.ts\nfunction stringifyCookie(c) {\n    var _a;\n    const attrs = [\n        \"path\" in c && c.path && `Path=${c.path}`,\n        \"expires\" in c && (c.expires || c.expires === 0) && `Expires=${(typeof c.expires === \"number\" ? new Date(c.expires) : c.expires).toUTCString()}`,\n        \"maxAge\" in c && typeof c.maxAge === \"number\" && `Max-Age=${c.maxAge}`,\n        \"domain\" in c && c.domain && `Domain=${c.domain}`,\n        \"secure\" in c && c.secure && \"Secure\",\n        \"httpOnly\" in c && c.httpOnly && \"HttpOnly\",\n        \"sameSite\" in c && c.sameSite && `SameSite=${c.sameSite}`\n    ].filter(Boolean);\n    return `${c.name}=${encodeURIComponent((_a = c.value) != null ? _a : \"\")}; ${attrs.join(\"; \")}`;\n}\nfunction parseCookie(cookie) {\n    const map = /* @__PURE__ */ new Map();\n    for (const pair of cookie.split(/; */)){\n        if (!pair) continue;\n        const splitAt = pair.indexOf(\"=\");\n        if (splitAt === -1) {\n            map.set(pair, \"true\");\n            continue;\n        }\n        const [key, value] = [\n            pair.slice(0, splitAt),\n            pair.slice(splitAt + 1)\n        ];\n        try {\n            map.set(key, decodeURIComponent(value != null ? value : \"true\"));\n        } catch  {}\n    }\n    return map;\n}\nfunction parseSetCookie(setCookie) {\n    if (!setCookie) {\n        return void 0;\n    }\n    const [[name, value], ...attributes] = parseCookie(setCookie);\n    const { domain, expires, httponly, maxage, path, samesite, secure } = Object.fromEntries(attributes.map(([key, value2])=>[\n            key.toLowerCase(),\n            value2\n        ]));\n    const cookie = {\n        name,\n        value: decodeURIComponent(value),\n        domain,\n        ...expires && {\n            expires: new Date(expires)\n        },\n        ...httponly && {\n            httpOnly: true\n        },\n        ...typeof maxage === \"string\" && {\n            maxAge: Number(maxage)\n        },\n        path,\n        ...samesite && {\n            sameSite: parseSameSite(samesite)\n        },\n        ...secure && {\n            secure: true\n        }\n    };\n    return compact(cookie);\n}\nfunction compact(t) {\n    const newT = {};\n    for(const key in t){\n        if (t[key]) {\n            newT[key] = t[key];\n        }\n    }\n    return newT;\n}\nvar SAME_SITE = [\n    \"strict\",\n    \"lax\",\n    \"none\"\n];\nfunction parseSameSite(string) {\n    string = string.toLowerCase();\n    return SAME_SITE.includes(string) ? string : void 0;\n}\nfunction splitCookiesString(cookiesString) {\n    if (!cookiesString) return [];\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    cookiesSeparatorFound = true;\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\n// src/request-cookies.ts\nvar RequestCookies = class {\n    constructor(requestHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        this._headers = requestHeaders;\n        const header = requestHeaders.get(\"cookie\");\n        if (header) {\n            const parsed = parseCookie(header);\n            for (const [name, value] of parsed){\n                this._parsed.set(name, {\n                    name,\n                    value\n                });\n            }\n        }\n    }\n    [Symbol.iterator]() {\n        return this._parsed[Symbol.iterator]();\n    }\n    /**\n   * The amount of cookies received from the client\n   */ get size() {\n        return this._parsed.size;\n    }\n    get(...args) {\n        const name = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(name);\n    }\n    getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed);\n        if (!args.length) {\n            return all.map(([_, value])=>value);\n        }\n        const name = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter(([n])=>n === name).map(([_, value])=>value);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    set(...args) {\n        const [name, value] = args.length === 1 ? [\n            args[0].name,\n            args[0].value\n        ] : args;\n        const map = this._parsed;\n        map.set(name, {\n            name,\n            value\n        });\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value2])=>stringifyCookie(value2)).join(\"; \"));\n        return this;\n    }\n    /**\n   * Delete the cookies matching the passed name or names in the request.\n   */ delete(names) {\n        const map = this._parsed;\n        const result = !Array.isArray(names) ? map.delete(names) : names.map((name)=>map.delete(name));\n        this._headers.set(\"cookie\", Array.from(map).map(([_, value])=>stringifyCookie(value)).join(\"; \"));\n        return result;\n    }\n    /**\n   * Delete all the cookies in the cookies in the request.\n   */ clear() {\n        this.delete(Array.from(this._parsed.keys()));\n        return this;\n    }\n    /**\n   * Format the cookies in the request as a string for logging\n   */ [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `RequestCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map((v)=>`${v.name}=${encodeURIComponent(v.value)}`).join(\"; \");\n    }\n};\n// src/response-cookies.ts\nvar ResponseCookies = class {\n    constructor(responseHeaders){\n        /** @internal */ this._parsed = /* @__PURE__ */ new Map();\n        var _a, _b, _c;\n        this._headers = responseHeaders;\n        const setCookie = // @ts-expect-error See https://github.com/whatwg/fetch/issues/973\n        (_c = (_b = (_a = responseHeaders.getAll) == null ? void 0 : _a.call(responseHeaders, \"set-cookie\")) != null ? _b : responseHeaders.get(\"set-cookie\")) != null ? _c : [];\n        const cookieStrings = Array.isArray(setCookie) ? setCookie : splitCookiesString(setCookie);\n        for (const cookieString of cookieStrings){\n            const parsed = parseSetCookie(cookieString);\n            if (parsed) this._parsed.set(parsed.name, parsed);\n        }\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n   */ get(...args) {\n        const key = typeof args[0] === \"string\" ? args[0] : args[0].name;\n        return this._parsed.get(key);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n   */ getAll(...args) {\n        var _a;\n        const all = Array.from(this._parsed.values());\n        if (!args.length) {\n            return all;\n        }\n        const key = typeof args[0] === \"string\" ? args[0] : (_a = args[0]) == null ? void 0 : _a.name;\n        return all.filter((c)=>c.name === key);\n    }\n    has(name) {\n        return this._parsed.has(name);\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n   */ set(...args) {\n        const [name, value, cookie] = args.length === 1 ? [\n            args[0].name,\n            args[0].value,\n            args[0]\n        ] : args;\n        const map = this._parsed;\n        map.set(name, normalizeCookie({\n            name,\n            value,\n            ...cookie\n        }));\n        replace(map, this._headers);\n        return this;\n    }\n    /**\n   * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n   */ delete(...args) {\n        const [name, path, domain] = typeof args[0] === \"string\" ? [\n            args[0]\n        ] : [\n            args[0].name,\n            args[0].path,\n            args[0].domain\n        ];\n        return this.set({\n            name,\n            path,\n            domain,\n            value: \"\",\n            expires: /* @__PURE__ */ new Date(0)\n        });\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return `ResponseCookies ${JSON.stringify(Object.fromEntries(this._parsed))}`;\n    }\n    toString() {\n        return [\n            ...this._parsed.values()\n        ].map(stringifyCookie).join(\"; \");\n    }\n};\nfunction replace(bag, headers) {\n    headers.delete(\"set-cookie\");\n    for (const [, value] of bag){\n        const serialized = stringifyCookie(value);\n        headers.append(\"set-cookie\", serialized);\n    }\n}\nfunction normalizeCookie(cookie = {\n    name: \"\",\n    value: \"\"\n}) {\n    if (typeof cookie.expires === \"number\") {\n        cookie.expires = new Date(cookie.expires);\n    }\n    if (cookie.maxAge) {\n        cookie.expires = new Date(Date.now() + cookie.maxAge * 1e3);\n    }\n    if (cookie.path === null || cookie.path === void 0) {\n        cookie.path = \"/\";\n    }\n    return cookie;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BlZGdlLXJ1bnRpbWUvY29va2llcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsbUJBQW1CRixPQUFPRyx3QkFBd0I7QUFDdEQsSUFBSUMsb0JBQW9CSixPQUFPSyxtQkFBbUI7QUFDbEQsSUFBSUMsZUFBZU4sT0FBT08sU0FBUyxDQUFDQyxjQUFjO0FBQ2xELElBQUlDLFdBQVcsQ0FBQ0MsUUFBUUM7SUFDdEIsSUFBSyxJQUFJQyxRQUFRRCxJQUNmWixVQUFVVyxRQUFRRSxNQUFNO1FBQUVDLEtBQUtGLEdBQUcsQ0FBQ0MsS0FBSztRQUFFRSxZQUFZO0lBQUs7QUFDL0Q7QUFDQSxJQUFJQyxjQUFjLENBQUNDLElBQUlDLE1BQU1DLFFBQVFDO0lBQ25DLElBQUlGLFFBQVEsT0FBT0EsU0FBUyxZQUFZLE9BQU9BLFNBQVMsWUFBWTtRQUNsRSxLQUFLLElBQUlHLE9BQU9oQixrQkFBa0JhLE1BQ2hDLElBQUksQ0FBQ1gsYUFBYWUsSUFBSSxDQUFDTCxJQUFJSSxRQUFRQSxRQUFRRixRQUN6Q25CLFVBQVVpQixJQUFJSSxLQUFLO1lBQUVQLEtBQUssSUFBTUksSUFBSSxDQUFDRyxJQUFJO1lBQUVOLFlBQVksQ0FBRUssQ0FBQUEsT0FBT2pCLGlCQUFpQmUsTUFBTUcsSUFBRyxLQUFNRCxLQUFLTCxVQUFVO1FBQUM7SUFDdEg7SUFDQSxPQUFPRTtBQUNUO0FBQ0EsSUFBSU0sZUFBZSxDQUFDQyxNQUFRUixZQUFZaEIsVUFBVSxDQUFDLEdBQUcsY0FBYztRQUFFeUIsT0FBTztJQUFLLElBQUlEO0FBRXRGLGVBQWU7QUFDZixJQUFJRSxjQUFjLENBQUM7QUFDbkJoQixTQUFTZ0IsYUFBYTtJQUNwQkMsZ0JBQWdCLElBQU1BO0lBQ3RCQyxpQkFBaUIsSUFBTUE7SUFDdkJDLGFBQWEsSUFBTUE7SUFDbkJDLGdCQUFnQixJQUFNQTtJQUN0QkMsb0JBQW9CLElBQU1BO0lBQzFCQyxpQkFBaUIsSUFBTUE7QUFDekI7QUFDQUMsT0FBT0MsT0FBTyxHQUFHWCxhQUFhRztBQUU5QixtQkFBbUI7QUFDbkIsU0FBU00sZ0JBQWdCRyxDQUFDO0lBQ3hCLElBQUlDO0lBQ0osTUFBTUMsUUFBUTtRQUNaLFVBQVVGLEtBQUtBLEVBQUVHLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRUgsRUFBRUcsSUFBSSxDQUFDLENBQUM7UUFDekMsYUFBYUgsS0FBTUEsQ0FBQUEsRUFBRUksT0FBTyxJQUFJSixFQUFFSSxPQUFPLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU9KLEVBQUVJLE9BQU8sS0FBSyxXQUFXLElBQUlDLEtBQUtMLEVBQUVJLE9BQU8sSUFBSUosRUFBRUksT0FBTyxFQUFFRSxXQUFXLEdBQUcsQ0FBQztRQUNoSixZQUFZTixLQUFLLE9BQU9BLEVBQUVPLE1BQU0sS0FBSyxZQUFZLENBQUMsUUFBUSxFQUFFUCxFQUFFTyxNQUFNLENBQUMsQ0FBQztRQUN0RSxZQUFZUCxLQUFLQSxFQUFFUSxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUVSLEVBQUVRLE1BQU0sQ0FBQyxDQUFDO1FBQ2pELFlBQVlSLEtBQUtBLEVBQUVTLE1BQU0sSUFBSTtRQUM3QixjQUFjVCxLQUFLQSxFQUFFVSxRQUFRLElBQUk7UUFDakMsY0FBY1YsS0FBS0EsRUFBRVcsUUFBUSxJQUFJLENBQUMsU0FBUyxFQUFFWCxFQUFFVyxRQUFRLENBQUMsQ0FBQztLQUMxRCxDQUFDQyxNQUFNLENBQUNDO0lBQ1QsT0FBTyxDQUFDLEVBQUViLEVBQUV0QixJQUFJLENBQUMsQ0FBQyxFQUFFb0MsbUJBQW1CLENBQUNiLEtBQUtELEVBQUVWLEtBQUssS0FBSyxPQUFPVyxLQUFLLElBQUksRUFBRSxFQUFFQyxNQUFNYSxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ2pHO0FBQ0EsU0FBU3JCLFlBQVlzQixNQUFNO0lBQ3pCLE1BQU1DLE1BQU0sYUFBYSxHQUFHLElBQUlDO0lBQ2hDLEtBQUssTUFBTUMsUUFBUUgsT0FBT0ksS0FBSyxDQUFDLE9BQVE7UUFDdEMsSUFBSSxDQUFDRCxNQUNIO1FBQ0YsTUFBTUUsVUFBVUYsS0FBS0csT0FBTyxDQUFDO1FBQzdCLElBQUlELFlBQVksQ0FBQyxHQUFHO1lBQ2xCSixJQUFJTSxHQUFHLENBQUNKLE1BQU07WUFDZDtRQUNGO1FBQ0EsTUFBTSxDQUFDakMsS0FBS0ksTUFBTSxHQUFHO1lBQUM2QixLQUFLSyxLQUFLLENBQUMsR0FBR0g7WUFBVUYsS0FBS0ssS0FBSyxDQUFDSCxVQUFVO1NBQUc7UUFDdEUsSUFBSTtZQUNGSixJQUFJTSxHQUFHLENBQUNyQyxLQUFLdUMsbUJBQW1CbkMsU0FBUyxPQUFPQSxRQUFRO1FBQzFELEVBQUUsT0FBTSxDQUNSO0lBQ0Y7SUFDQSxPQUFPMkI7QUFDVDtBQUNBLFNBQVN0QixlQUFlK0IsU0FBUztJQUMvQixJQUFJLENBQUNBLFdBQVc7UUFDZCxPQUFPLEtBQUs7SUFDZDtJQUNBLE1BQU0sQ0FBQyxDQUFDaEQsTUFBTVksTUFBTSxFQUFFLEdBQUdxQyxXQUFXLEdBQUdqQyxZQUFZZ0M7SUFDbkQsTUFBTSxFQUFFbEIsTUFBTSxFQUFFSixPQUFPLEVBQUV3QixRQUFRLEVBQUVDLE1BQU0sRUFBRTFCLElBQUksRUFBRTJCLFFBQVEsRUFBRXJCLE1BQU0sRUFBRSxHQUFHM0MsT0FBT2lFLFdBQVcsQ0FDdEZKLFdBQVdWLEdBQUcsQ0FBQyxDQUFDLENBQUMvQixLQUFLOEMsT0FBTyxHQUFLO1lBQUM5QyxJQUFJK0MsV0FBVztZQUFJRDtTQUFPO0lBRS9ELE1BQU1oQixTQUFTO1FBQ2J0QztRQUNBWSxPQUFPbUMsbUJBQW1CbkM7UUFDMUJrQjtRQUNBLEdBQUdKLFdBQVc7WUFBRUEsU0FBUyxJQUFJQyxLQUFLRDtRQUFTLENBQUM7UUFDNUMsR0FBR3dCLFlBQVk7WUFBRWxCLFVBQVU7UUFBSyxDQUFDO1FBQ2pDLEdBQUcsT0FBT21CLFdBQVcsWUFBWTtZQUFFdEIsUUFBUTJCLE9BQU9MO1FBQVEsQ0FBQztRQUMzRDFCO1FBQ0EsR0FBRzJCLFlBQVk7WUFBRW5CLFVBQVV3QixjQUFjTDtRQUFVLENBQUM7UUFDcEQsR0FBR3JCLFVBQVU7WUFBRUEsUUFBUTtRQUFLLENBQUM7SUFDL0I7SUFDQSxPQUFPMkIsUUFBUXBCO0FBQ2pCO0FBQ0EsU0FBU29CLFFBQVFDLENBQUM7SUFDaEIsTUFBTUMsT0FBTyxDQUFDO0lBQ2QsSUFBSyxNQUFNcEQsT0FBT21ELEVBQUc7UUFDbkIsSUFBSUEsQ0FBQyxDQUFDbkQsSUFBSSxFQUFFO1lBQ1ZvRCxJQUFJLENBQUNwRCxJQUFJLEdBQUdtRCxDQUFDLENBQUNuRCxJQUFJO1FBQ3BCO0lBQ0Y7SUFDQSxPQUFPb0Q7QUFDVDtBQUNBLElBQUlDLFlBQVk7SUFBQztJQUFVO0lBQU87Q0FBTztBQUN6QyxTQUFTSixjQUFjSyxNQUFNO0lBQzNCQSxTQUFTQSxPQUFPUCxXQUFXO0lBQzNCLE9BQU9NLFVBQVVFLFFBQVEsQ0FBQ0QsVUFBVUEsU0FBUyxLQUFLO0FBQ3BEO0FBQ0EsU0FBUzVDLG1CQUFtQjhDLGFBQWE7SUFDdkMsSUFBSSxDQUFDQSxlQUNILE9BQU8sRUFBRTtJQUNYLElBQUlDLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUlDLE1BQU07SUFDVixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osU0FBU0M7UUFDUCxNQUFPTixNQUFNRixjQUFjUyxNQUFNLElBQUksS0FBS0MsSUFBSSxDQUFDVixjQUFjVyxNQUFNLENBQUNULE1BQU87WUFDekVBLE9BQU87UUFDVDtRQUNBLE9BQU9BLE1BQU1GLGNBQWNTLE1BQU07SUFDbkM7SUFDQSxTQUFTRztRQUNQUixLQUFLSixjQUFjVyxNQUFNLENBQUNUO1FBQzFCLE9BQU9FLE9BQU8sT0FBT0EsT0FBTyxPQUFPQSxPQUFPO0lBQzVDO0lBQ0EsTUFBT0YsTUFBTUYsY0FBY1MsTUFBTSxDQUFFO1FBQ2pDTixRQUFRRDtRQUNSSyx3QkFBd0I7UUFDeEIsTUFBT0MsaUJBQWtCO1lBQ3ZCSixLQUFLSixjQUFjVyxNQUFNLENBQUNUO1lBQzFCLElBQUlFLE9BQU8sS0FBSztnQkFDZEMsWUFBWUg7Z0JBQ1pBLE9BQU87Z0JBQ1BNO2dCQUNBRixZQUFZSjtnQkFDWixNQUFPQSxNQUFNRixjQUFjUyxNQUFNLElBQUlHLGlCQUFrQjtvQkFDckRWLE9BQU87Z0JBQ1Q7Z0JBQ0EsSUFBSUEsTUFBTUYsY0FBY1MsTUFBTSxJQUFJVCxjQUFjVyxNQUFNLENBQUNULFNBQVMsS0FBSztvQkFDbkVLLHdCQUF3QjtvQkFDeEJMLE1BQU1JO29CQUNOTCxlQUFlWSxJQUFJLENBQUNiLGNBQWNjLFNBQVMsQ0FBQ1gsT0FBT0U7b0JBQ25ERixRQUFRRDtnQkFDVixPQUFPO29CQUNMQSxNQUFNRyxZQUFZO2dCQUNwQjtZQUNGLE9BQU87Z0JBQ0xILE9BQU87WUFDVDtRQUNGO1FBQ0EsSUFBSSxDQUFDSyx5QkFBeUJMLE9BQU9GLGNBQWNTLE1BQU0sRUFBRTtZQUN6RFIsZUFBZVksSUFBSSxDQUFDYixjQUFjYyxTQUFTLENBQUNYLE9BQU9ILGNBQWNTLE1BQU07UUFDekU7SUFDRjtJQUNBLE9BQU9SO0FBQ1Q7QUFFQSx5QkFBeUI7QUFDekIsSUFBSW5ELGlCQUFpQjtJQUNuQmlFLFlBQVlDLGNBQWMsQ0FBRTtRQUMxQixjQUFjLEdBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUcsYUFBYSxHQUFHLElBQUl6QztRQUNuQyxJQUFJLENBQUMwQyxRQUFRLEdBQUdGO1FBQ2hCLE1BQU1HLFNBQVNILGVBQWUvRSxHQUFHLENBQUM7UUFDbEMsSUFBSWtGLFFBQVE7WUFDVixNQUFNQyxTQUFTcEUsWUFBWW1FO1lBQzNCLEtBQUssTUFBTSxDQUFDbkYsTUFBTVksTUFBTSxJQUFJd0UsT0FBUTtnQkFDbEMsSUFBSSxDQUFDSCxPQUFPLENBQUNwQyxHQUFHLENBQUM3QyxNQUFNO29CQUFFQTtvQkFBTVk7Z0JBQU07WUFDdkM7UUFDRjtJQUNGO0lBQ0EsQ0FBQ3lFLE9BQU9DLFFBQVEsQ0FBQyxHQUFHO1FBQ2xCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNJLE9BQU9DLFFBQVEsQ0FBQztJQUN0QztJQUNBOztHQUVDLEdBQ0QsSUFBSUMsT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDTixPQUFPLENBQUNNLElBQUk7SUFDMUI7SUFDQXRGLElBQUksR0FBR3VGLElBQUksRUFBRTtRQUNYLE1BQU14RixPQUFPLE9BQU93RixJQUFJLENBQUMsRUFBRSxLQUFLLFdBQVdBLElBQUksQ0FBQyxFQUFFLEdBQUdBLElBQUksQ0FBQyxFQUFFLENBQUN4RixJQUFJO1FBQ2pFLE9BQU8sSUFBSSxDQUFDaUYsT0FBTyxDQUFDaEYsR0FBRyxDQUFDRDtJQUMxQjtJQUNBeUYsT0FBTyxHQUFHRCxJQUFJLEVBQUU7UUFDZCxJQUFJakU7UUFDSixNQUFNeEIsTUFBTTJGLE1BQU1yRixJQUFJLENBQUMsSUFBSSxDQUFDNEUsT0FBTztRQUNuQyxJQUFJLENBQUNPLEtBQUtmLE1BQU0sRUFBRTtZQUNoQixPQUFPMUUsSUFBSXdDLEdBQUcsQ0FBQyxDQUFDLENBQUNvRCxHQUFHL0UsTUFBTSxHQUFLQTtRQUNqQztRQUNBLE1BQU1aLE9BQU8sT0FBT3dGLElBQUksQ0FBQyxFQUFFLEtBQUssV0FBV0EsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDakUsS0FBS2lFLElBQUksQ0FBQyxFQUFFLEtBQUssT0FBTyxLQUFLLElBQUlqRSxHQUFHdkIsSUFBSTtRQUM5RixPQUFPRCxJQUFJbUMsTUFBTSxDQUFDLENBQUMsQ0FBQzBELEVBQUUsR0FBS0EsTUFBTTVGLE1BQU11QyxHQUFHLENBQUMsQ0FBQyxDQUFDb0QsR0FBRy9FLE1BQU0sR0FBS0E7SUFDN0Q7SUFDQWlGLElBQUk3RixJQUFJLEVBQUU7UUFDUixPQUFPLElBQUksQ0FBQ2lGLE9BQU8sQ0FBQ1ksR0FBRyxDQUFDN0Y7SUFDMUI7SUFDQTZDLElBQUksR0FBRzJDLElBQUksRUFBRTtRQUNYLE1BQU0sQ0FBQ3hGLE1BQU1ZLE1BQU0sR0FBRzRFLEtBQUtmLE1BQU0sS0FBSyxJQUFJO1lBQUNlLElBQUksQ0FBQyxFQUFFLENBQUN4RixJQUFJO1lBQUV3RixJQUFJLENBQUMsRUFBRSxDQUFDNUUsS0FBSztTQUFDLEdBQUc0RTtRQUMxRSxNQUFNakQsTUFBTSxJQUFJLENBQUMwQyxPQUFPO1FBQ3hCMUMsSUFBSU0sR0FBRyxDQUFDN0MsTUFBTTtZQUFFQTtZQUFNWTtRQUFNO1FBQzVCLElBQUksQ0FBQ3NFLFFBQVEsQ0FBQ3JDLEdBQUcsQ0FDZixVQUNBNkMsTUFBTXJGLElBQUksQ0FBQ2tDLEtBQUtBLEdBQUcsQ0FBQyxDQUFDLENBQUNvRCxHQUFHckMsT0FBTyxHQUFLbkMsZ0JBQWdCbUMsU0FBU2pCLElBQUksQ0FBQztRQUVyRSxPQUFPLElBQUk7SUFDYjtJQUNBOztHQUVDLEdBQ0R5RCxPQUFPQyxLQUFLLEVBQUU7UUFDWixNQUFNeEQsTUFBTSxJQUFJLENBQUMwQyxPQUFPO1FBQ3hCLE1BQU1lLFNBQVMsQ0FBQ04sTUFBTU8sT0FBTyxDQUFDRixTQUFTeEQsSUFBSXVELE1BQU0sQ0FBQ0MsU0FBU0EsTUFBTXhELEdBQUcsQ0FBQyxDQUFDdkMsT0FBU3VDLElBQUl1RCxNQUFNLENBQUM5RjtRQUMxRixJQUFJLENBQUNrRixRQUFRLENBQUNyQyxHQUFHLENBQ2YsVUFDQTZDLE1BQU1yRixJQUFJLENBQUNrQyxLQUFLQSxHQUFHLENBQUMsQ0FBQyxDQUFDb0QsR0FBRy9FLE1BQU0sR0FBS08sZ0JBQWdCUCxRQUFReUIsSUFBSSxDQUFDO1FBRW5FLE9BQU8yRDtJQUNUO0lBQ0E7O0dBRUMsR0FDREUsUUFBUTtRQUNOLElBQUksQ0FBQ0osTUFBTSxDQUFDSixNQUFNckYsSUFBSSxDQUFDLElBQUksQ0FBQzRFLE9BQU8sQ0FBQ2tCLElBQUk7UUFDeEMsT0FBTyxJQUFJO0lBQ2I7SUFDQTs7R0FFQyxHQUNELENBQUNkLE9BQU9lLEdBQUcsQ0FBQywrQkFBK0IsR0FBRztRQUM1QyxPQUFPLENBQUMsZUFBZSxFQUFFQyxLQUFLQyxTQUFTLENBQUNsSCxPQUFPaUUsV0FBVyxDQUFDLElBQUksQ0FBQzRCLE9BQU8sR0FBRyxDQUFDO0lBQzdFO0lBQ0FzQixXQUFXO1FBQ1QsT0FBTztlQUFJLElBQUksQ0FBQ3RCLE9BQU8sQ0FBQ3VCLE1BQU07U0FBRyxDQUFDakUsR0FBRyxDQUFDLENBQUNrRSxJQUFNLENBQUMsRUFBRUEsRUFBRXpHLElBQUksQ0FBQyxDQUFDLEVBQUVvQyxtQkFBbUJxRSxFQUFFN0YsS0FBSyxFQUFFLENBQUMsRUFBRXlCLElBQUksQ0FBQztJQUNoRztBQUNGO0FBRUEsMEJBQTBCO0FBQzFCLElBQUl0QixrQkFBa0I7SUFDcEJnRSxZQUFZMkIsZUFBZSxDQUFFO1FBQzNCLGNBQWMsR0FDZCxJQUFJLENBQUN6QixPQUFPLEdBQUcsYUFBYSxHQUFHLElBQUl6QztRQUNuQyxJQUFJakIsSUFBSW9GLElBQUlDO1FBQ1osSUFBSSxDQUFDMUIsUUFBUSxHQUFHd0I7UUFDaEIsTUFBTTFELFlBRUosa0VBRGtFO1FBQ2pFNEQsQ0FBQUEsS0FBSyxDQUFDRCxLQUFLLENBQUNwRixLQUFLbUYsZ0JBQWdCakIsTUFBTSxLQUFLLE9BQU8sS0FBSyxJQUFJbEUsR0FBR2QsSUFBSSxDQUFDaUcsaUJBQWlCLGFBQVksS0FBTSxPQUFPQyxLQUFLRCxnQkFBZ0J6RyxHQUFHLENBQUMsYUFBWSxLQUFNLE9BQU8yRyxLQUFLLEVBQUU7UUFFMUssTUFBTUMsZ0JBQWdCbkIsTUFBTU8sT0FBTyxDQUFDakQsYUFBYUEsWUFBWTlCLG1CQUFtQjhCO1FBQ2hGLEtBQUssTUFBTThELGdCQUFnQkQsY0FBZTtZQUN4QyxNQUFNekIsU0FBU25FLGVBQWU2RjtZQUM5QixJQUFJMUIsUUFDRixJQUFJLENBQUNILE9BQU8sQ0FBQ3BDLEdBQUcsQ0FBQ3VDLE9BQU9wRixJQUFJLEVBQUVvRjtRQUNsQztJQUNGO0lBQ0E7O0dBRUMsR0FDRG5GLElBQUksR0FBR3VGLElBQUksRUFBRTtRQUNYLE1BQU1oRixNQUFNLE9BQU9nRixJQUFJLENBQUMsRUFBRSxLQUFLLFdBQVdBLElBQUksQ0FBQyxFQUFFLEdBQUdBLElBQUksQ0FBQyxFQUFFLENBQUN4RixJQUFJO1FBQ2hFLE9BQU8sSUFBSSxDQUFDaUYsT0FBTyxDQUFDaEYsR0FBRyxDQUFDTztJQUMxQjtJQUNBOztHQUVDLEdBQ0RpRixPQUFPLEdBQUdELElBQUksRUFBRTtRQUNkLElBQUlqRTtRQUNKLE1BQU14QixNQUFNMkYsTUFBTXJGLElBQUksQ0FBQyxJQUFJLENBQUM0RSxPQUFPLENBQUN1QixNQUFNO1FBQzFDLElBQUksQ0FBQ2hCLEtBQUtmLE1BQU0sRUFBRTtZQUNoQixPQUFPMUU7UUFDVDtRQUNBLE1BQU1TLE1BQU0sT0FBT2dGLElBQUksQ0FBQyxFQUFFLEtBQUssV0FBV0EsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDakUsS0FBS2lFLElBQUksQ0FBQyxFQUFFLEtBQUssT0FBTyxLQUFLLElBQUlqRSxHQUFHdkIsSUFBSTtRQUM3RixPQUFPRCxJQUFJbUMsTUFBTSxDQUFDLENBQUNaLElBQU1BLEVBQUV0QixJQUFJLEtBQUtRO0lBQ3RDO0lBQ0FxRixJQUFJN0YsSUFBSSxFQUFFO1FBQ1IsT0FBTyxJQUFJLENBQUNpRixPQUFPLENBQUNZLEdBQUcsQ0FBQzdGO0lBQzFCO0lBQ0E7O0dBRUMsR0FDRDZDLElBQUksR0FBRzJDLElBQUksRUFBRTtRQUNYLE1BQU0sQ0FBQ3hGLE1BQU1ZLE9BQU8wQixPQUFPLEdBQUdrRCxLQUFLZixNQUFNLEtBQUssSUFBSTtZQUFDZSxJQUFJLENBQUMsRUFBRSxDQUFDeEYsSUFBSTtZQUFFd0YsSUFBSSxDQUFDLEVBQUUsQ0FBQzVFLEtBQUs7WUFBRTRFLElBQUksQ0FBQyxFQUFFO1NBQUMsR0FBR0E7UUFDM0YsTUFBTWpELE1BQU0sSUFBSSxDQUFDMEMsT0FBTztRQUN4QjFDLElBQUlNLEdBQUcsQ0FBQzdDLE1BQU0rRyxnQkFBZ0I7WUFBRS9HO1lBQU1ZO1lBQU8sR0FBRzBCLE1BQU07UUFBQztRQUN2RDBFLFFBQVF6RSxLQUFLLElBQUksQ0FBQzJDLFFBQVE7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFDQTs7R0FFQyxHQUNEWSxPQUFPLEdBQUdOLElBQUksRUFBRTtRQUNkLE1BQU0sQ0FBQ3hGLE1BQU15QixNQUFNSyxPQUFPLEdBQUcsT0FBTzBELElBQUksQ0FBQyxFQUFFLEtBQUssV0FBVztZQUFDQSxJQUFJLENBQUMsRUFBRTtTQUFDLEdBQUc7WUFBQ0EsSUFBSSxDQUFDLEVBQUUsQ0FBQ3hGLElBQUk7WUFBRXdGLElBQUksQ0FBQyxFQUFFLENBQUMvRCxJQUFJO1lBQUUrRCxJQUFJLENBQUMsRUFBRSxDQUFDMUQsTUFBTTtTQUFDO1FBQ25ILE9BQU8sSUFBSSxDQUFDZSxHQUFHLENBQUM7WUFBRTdDO1lBQU15QjtZQUFNSztZQUFRbEIsT0FBTztZQUFJYyxTQUFTLGFBQWEsR0FBRyxJQUFJQyxLQUFLO1FBQUc7SUFDeEY7SUFDQSxDQUFDMEQsT0FBT2UsR0FBRyxDQUFDLCtCQUErQixHQUFHO1FBQzVDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRUMsS0FBS0MsU0FBUyxDQUFDbEgsT0FBT2lFLFdBQVcsQ0FBQyxJQUFJLENBQUM0QixPQUFPLEdBQUcsQ0FBQztJQUM5RTtJQUNBc0IsV0FBVztRQUNULE9BQU87ZUFBSSxJQUFJLENBQUN0QixPQUFPLENBQUN1QixNQUFNO1NBQUcsQ0FBQ2pFLEdBQUcsQ0FBQ3BCLGlCQUFpQmtCLElBQUksQ0FBQztJQUM5RDtBQUNGO0FBQ0EsU0FBUzJFLFFBQVFDLEdBQUcsRUFBRUMsT0FBTztJQUMzQkEsUUFBUXBCLE1BQU0sQ0FBQztJQUNmLEtBQUssTUFBTSxHQUFHbEYsTUFBTSxJQUFJcUcsSUFBSztRQUMzQixNQUFNRSxhQUFhaEcsZ0JBQWdCUDtRQUNuQ3NHLFFBQVFFLE1BQU0sQ0FBQyxjQUFjRDtJQUMvQjtBQUNGO0FBQ0EsU0FBU0osZ0JBQWdCekUsU0FBUztJQUFFdEMsTUFBTTtJQUFJWSxPQUFPO0FBQUcsQ0FBQztJQUN2RCxJQUFJLE9BQU8wQixPQUFPWixPQUFPLEtBQUssVUFBVTtRQUN0Q1ksT0FBT1osT0FBTyxHQUFHLElBQUlDLEtBQUtXLE9BQU9aLE9BQU87SUFDMUM7SUFDQSxJQUFJWSxPQUFPVCxNQUFNLEVBQUU7UUFDakJTLE9BQU9aLE9BQU8sR0FBRyxJQUFJQyxLQUFLQSxLQUFLMEYsR0FBRyxLQUFLL0UsT0FBT1QsTUFBTSxHQUFHO0lBQ3pEO0lBQ0EsSUFBSVMsT0FBT2IsSUFBSSxLQUFLLFFBQVFhLE9BQU9iLElBQUksS0FBSyxLQUFLLEdBQUc7UUFDbERhLE9BQU9iLElBQUksR0FBRztJQUNoQjtJQUNBLE9BQU9hO0FBQ1Q7QUFDQSw2REFBNkQ7QUFDN0QsS0FBTWxCLENBQUFBLENBT04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BlZGdlLXJ1bnRpbWUvY29va2llcy9pbmRleC5qcz9jMDk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIFJlcXVlc3RDb29raWVzOiAoKSA9PiBSZXF1ZXN0Q29va2llcyxcbiAgUmVzcG9uc2VDb29raWVzOiAoKSA9PiBSZXNwb25zZUNvb2tpZXMsXG4gIHBhcnNlQ29va2llOiAoKSA9PiBwYXJzZUNvb2tpZSxcbiAgcGFyc2VTZXRDb29raWU6ICgpID0+IHBhcnNlU2V0Q29va2llLFxuICBzcGxpdENvb2tpZXNTdHJpbmc6ICgpID0+IHNwbGl0Q29va2llc1N0cmluZyxcbiAgc3RyaW5naWZ5Q29va2llOiAoKSA9PiBzdHJpbmdpZnlDb29raWVcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBfX3RvQ29tbW9uSlMoc3JjX2V4cG9ydHMpO1xuXG4vLyBzcmMvc2VyaWFsaXplLnRzXG5mdW5jdGlvbiBzdHJpbmdpZnlDb29raWUoYykge1xuICB2YXIgX2E7XG4gIGNvbnN0IGF0dHJzID0gW1xuICAgIFwicGF0aFwiIGluIGMgJiYgYy5wYXRoICYmIGBQYXRoPSR7Yy5wYXRofWAsXG4gICAgXCJleHBpcmVzXCIgaW4gYyAmJiAoYy5leHBpcmVzIHx8IGMuZXhwaXJlcyA9PT0gMCkgJiYgYEV4cGlyZXM9JHsodHlwZW9mIGMuZXhwaXJlcyA9PT0gXCJudW1iZXJcIiA/IG5ldyBEYXRlKGMuZXhwaXJlcykgOiBjLmV4cGlyZXMpLnRvVVRDU3RyaW5nKCl9YCxcbiAgICBcIm1heEFnZVwiIGluIGMgJiYgdHlwZW9mIGMubWF4QWdlID09PSBcIm51bWJlclwiICYmIGBNYXgtQWdlPSR7Yy5tYXhBZ2V9YCxcbiAgICBcImRvbWFpblwiIGluIGMgJiYgYy5kb21haW4gJiYgYERvbWFpbj0ke2MuZG9tYWlufWAsXG4gICAgXCJzZWN1cmVcIiBpbiBjICYmIGMuc2VjdXJlICYmIFwiU2VjdXJlXCIsXG4gICAgXCJodHRwT25seVwiIGluIGMgJiYgYy5odHRwT25seSAmJiBcIkh0dHBPbmx5XCIsXG4gICAgXCJzYW1lU2l0ZVwiIGluIGMgJiYgYy5zYW1lU2l0ZSAmJiBgU2FtZVNpdGU9JHtjLnNhbWVTaXRlfWBcbiAgXS5maWx0ZXIoQm9vbGVhbik7XG4gIHJldHVybiBgJHtjLm5hbWV9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KChfYSA9IGMudmFsdWUpICE9IG51bGwgPyBfYSA6IFwiXCIpfTsgJHthdHRycy5qb2luKFwiOyBcIil9YDtcbn1cbmZ1bmN0aW9uIHBhcnNlQ29va2llKGNvb2tpZSkge1xuICBjb25zdCBtYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IHBhaXIgb2YgY29va2llLnNwbGl0KC87ICovKSkge1xuICAgIGlmICghcGFpcilcbiAgICAgIGNvbnRpbnVlO1xuICAgIGNvbnN0IHNwbGl0QXQgPSBwYWlyLmluZGV4T2YoXCI9XCIpO1xuICAgIGlmIChzcGxpdEF0ID09PSAtMSkge1xuICAgICAgbWFwLnNldChwYWlyLCBcInRydWVcIik7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgW2tleSwgdmFsdWVdID0gW3BhaXIuc2xpY2UoMCwgc3BsaXRBdCksIHBhaXIuc2xpY2Uoc3BsaXRBdCArIDEpXTtcbiAgICB0cnkge1xuICAgICAgbWFwLnNldChrZXksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBcInRydWVcIikpO1xuICAgIH0gY2F0Y2gge1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWFwO1xufVxuZnVuY3Rpb24gcGFyc2VTZXRDb29raWUoc2V0Q29va2llKSB7XG4gIGlmICghc2V0Q29va2llKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBjb25zdCBbW25hbWUsIHZhbHVlXSwgLi4uYXR0cmlidXRlc10gPSBwYXJzZUNvb2tpZShzZXRDb29raWUpO1xuICBjb25zdCB7IGRvbWFpbiwgZXhwaXJlcywgaHR0cG9ubHksIG1heGFnZSwgcGF0aCwgc2FtZXNpdGUsIHNlY3VyZSB9ID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIGF0dHJpYnV0ZXMubWFwKChba2V5LCB2YWx1ZTJdKSA9PiBba2V5LnRvTG93ZXJDYXNlKCksIHZhbHVlMl0pXG4gICk7XG4gIGNvbnN0IGNvb2tpZSA9IHtcbiAgICBuYW1lLFxuICAgIHZhbHVlOiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpLFxuICAgIGRvbWFpbixcbiAgICAuLi5leHBpcmVzICYmIHsgZXhwaXJlczogbmV3IERhdGUoZXhwaXJlcykgfSxcbiAgICAuLi5odHRwb25seSAmJiB7IGh0dHBPbmx5OiB0cnVlIH0sXG4gICAgLi4udHlwZW9mIG1heGFnZSA9PT0gXCJzdHJpbmdcIiAmJiB7IG1heEFnZTogTnVtYmVyKG1heGFnZSkgfSxcbiAgICBwYXRoLFxuICAgIC4uLnNhbWVzaXRlICYmIHsgc2FtZVNpdGU6IHBhcnNlU2FtZVNpdGUoc2FtZXNpdGUpIH0sXG4gICAgLi4uc2VjdXJlICYmIHsgc2VjdXJlOiB0cnVlIH1cbiAgfTtcbiAgcmV0dXJuIGNvbXBhY3QoY29va2llKTtcbn1cbmZ1bmN0aW9uIGNvbXBhY3QodCkge1xuICBjb25zdCBuZXdUID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIHQpIHtcbiAgICBpZiAodFtrZXldKSB7XG4gICAgICBuZXdUW2tleV0gPSB0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdUO1xufVxudmFyIFNBTUVfU0lURSA9IFtcInN0cmljdFwiLCBcImxheFwiLCBcIm5vbmVcIl07XG5mdW5jdGlvbiBwYXJzZVNhbWVTaXRlKHN0cmluZykge1xuICBzdHJpbmcgPSBzdHJpbmcudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIFNBTUVfU0lURS5pbmNsdWRlcyhzdHJpbmcpID8gc3RyaW5nIDogdm9pZCAwO1xufVxuZnVuY3Rpb24gc3BsaXRDb29raWVzU3RyaW5nKGNvb2tpZXNTdHJpbmcpIHtcbiAgaWYgKCFjb29raWVzU3RyaW5nKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIGNvb2tpZXNTdHJpbmdzID0gW107XG4gIHZhciBwb3MgPSAwO1xuICB2YXIgc3RhcnQ7XG4gIHZhciBjaDtcbiAgdmFyIGxhc3RDb21tYTtcbiAgdmFyIG5leHRTdGFydDtcbiAgdmFyIGNvb2tpZXNTZXBhcmF0b3JGb3VuZDtcbiAgZnVuY3Rpb24gc2tpcFdoaXRlc3BhY2UoKSB7XG4gICAgd2hpbGUgKHBvcyA8IGNvb2tpZXNTdHJpbmcubGVuZ3RoICYmIC9cXHMvLnRlc3QoY29va2llc1N0cmluZy5jaGFyQXQocG9zKSkpIHtcbiAgICAgIHBvcyArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gcG9zIDwgY29va2llc1N0cmluZy5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gbm90U3BlY2lhbENoYXIoKSB7XG4gICAgY2ggPSBjb29raWVzU3RyaW5nLmNoYXJBdChwb3MpO1xuICAgIHJldHVybiBjaCAhPT0gXCI9XCIgJiYgY2ggIT09IFwiO1wiICYmIGNoICE9PSBcIixcIjtcbiAgfVxuICB3aGlsZSAocG9zIDwgY29va2llc1N0cmluZy5sZW5ndGgpIHtcbiAgICBzdGFydCA9IHBvcztcbiAgICBjb29raWVzU2VwYXJhdG9yRm91bmQgPSBmYWxzZTtcbiAgICB3aGlsZSAoc2tpcFdoaXRlc3BhY2UoKSkge1xuICAgICAgY2ggPSBjb29raWVzU3RyaW5nLmNoYXJBdChwb3MpO1xuICAgICAgaWYgKGNoID09PSBcIixcIikge1xuICAgICAgICBsYXN0Q29tbWEgPSBwb3M7XG4gICAgICAgIHBvcyArPSAxO1xuICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICBuZXh0U3RhcnQgPSBwb3M7XG4gICAgICAgIHdoaWxlIChwb3MgPCBjb29raWVzU3RyaW5nLmxlbmd0aCAmJiBub3RTcGVjaWFsQ2hhcigpKSB7XG4gICAgICAgICAgcG9zICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcyA8IGNvb2tpZXNTdHJpbmcubGVuZ3RoICYmIGNvb2tpZXNTdHJpbmcuY2hhckF0KHBvcykgPT09IFwiPVwiKSB7XG4gICAgICAgICAgY29va2llc1NlcGFyYXRvckZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBwb3MgPSBuZXh0U3RhcnQ7XG4gICAgICAgICAgY29va2llc1N0cmluZ3MucHVzaChjb29raWVzU3RyaW5nLnN1YnN0cmluZyhzdGFydCwgbGFzdENvbW1hKSk7XG4gICAgICAgICAgc3RhcnQgPSBwb3M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcG9zID0gbGFzdENvbW1hICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zICs9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghY29va2llc1NlcGFyYXRvckZvdW5kIHx8IHBvcyA+PSBjb29raWVzU3RyaW5nLmxlbmd0aCkge1xuICAgICAgY29va2llc1N0cmluZ3MucHVzaChjb29raWVzU3RyaW5nLnN1YnN0cmluZyhzdGFydCwgY29va2llc1N0cmluZy5sZW5ndGgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvb2tpZXNTdHJpbmdzO1xufVxuXG4vLyBzcmMvcmVxdWVzdC1jb29raWVzLnRzXG52YXIgUmVxdWVzdENvb2tpZXMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHJlcXVlc3RIZWFkZXJzKSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHRoaXMuX3BhcnNlZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5faGVhZGVycyA9IHJlcXVlc3RIZWFkZXJzO1xuICAgIGNvbnN0IGhlYWRlciA9IHJlcXVlc3RIZWFkZXJzLmdldChcImNvb2tpZVwiKTtcbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUNvb2tpZShoZWFkZXIpO1xuICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIHBhcnNlZCkge1xuICAgICAgICB0aGlzLl9wYXJzZWQuc2V0KG5hbWUsIHsgbmFtZSwgdmFsdWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXJzZWRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIGNvb2tpZXMgcmVjZWl2ZWQgZnJvbSB0aGUgY2xpZW50XG4gICAqL1xuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VkLnNpemU7XG4gIH1cbiAgZ2V0KC4uLmFyZ3MpIHtcbiAgICBjb25zdCBuYW1lID0gdHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIgPyBhcmdzWzBdIDogYXJnc1swXS5uYW1lO1xuICAgIHJldHVybiB0aGlzLl9wYXJzZWQuZ2V0KG5hbWUpO1xuICB9XG4gIGdldEFsbCguLi5hcmdzKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFsbCA9IEFycmF5LmZyb20odGhpcy5fcGFyc2VkKTtcbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYWxsLm1hcCgoW18sIHZhbHVlXSkgPT4gdmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gdHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIgPyBhcmdzWzBdIDogKF9hID0gYXJnc1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm5hbWU7XG4gICAgcmV0dXJuIGFsbC5maWx0ZXIoKFtuXSkgPT4gbiA9PT0gbmFtZSkubWFwKChbXywgdmFsdWVdKSA9PiB2YWx1ZSk7XG4gIH1cbiAgaGFzKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VkLmhhcyhuYW1lKTtcbiAgfVxuICBzZXQoLi4uYXJncykge1xuICAgIGNvbnN0IFtuYW1lLCB2YWx1ZV0gPSBhcmdzLmxlbmd0aCA9PT0gMSA/IFthcmdzWzBdLm5hbWUsIGFyZ3NbMF0udmFsdWVdIDogYXJncztcbiAgICBjb25zdCBtYXAgPSB0aGlzLl9wYXJzZWQ7XG4gICAgbWFwLnNldChuYW1lLCB7IG5hbWUsIHZhbHVlIH0pO1xuICAgIHRoaXMuX2hlYWRlcnMuc2V0KFxuICAgICAgXCJjb29raWVcIixcbiAgICAgIEFycmF5LmZyb20obWFwKS5tYXAoKFtfLCB2YWx1ZTJdKSA9PiBzdHJpbmdpZnlDb29raWUodmFsdWUyKSkuam9pbihcIjsgXCIpXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIHRoZSBjb29raWVzIG1hdGNoaW5nIHRoZSBwYXNzZWQgbmFtZSBvciBuYW1lcyBpbiB0aGUgcmVxdWVzdC5cbiAgICovXG4gIGRlbGV0ZShuYW1lcykge1xuICAgIGNvbnN0IG1hcCA9IHRoaXMuX3BhcnNlZDtcbiAgICBjb25zdCByZXN1bHQgPSAhQXJyYXkuaXNBcnJheShuYW1lcykgPyBtYXAuZGVsZXRlKG5hbWVzKSA6IG5hbWVzLm1hcCgobmFtZSkgPT4gbWFwLmRlbGV0ZShuYW1lKSk7XG4gICAgdGhpcy5faGVhZGVycy5zZXQoXG4gICAgICBcImNvb2tpZVwiLFxuICAgICAgQXJyYXkuZnJvbShtYXApLm1hcCgoW18sIHZhbHVlXSkgPT4gc3RyaW5naWZ5Q29va2llKHZhbHVlKSkuam9pbihcIjsgXCIpXG4gICAgKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYWxsIHRoZSBjb29raWVzIGluIHRoZSBjb29raWVzIGluIHRoZSByZXF1ZXN0LlxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5kZWxldGUoQXJyYXkuZnJvbSh0aGlzLl9wYXJzZWQua2V5cygpKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEZvcm1hdCB0aGUgY29va2llcyBpbiB0aGUgcmVxdWVzdCBhcyBhIHN0cmluZyBmb3IgbG9nZ2luZ1xuICAgKi9cbiAgW1N5bWJvbC5mb3IoXCJlZGdlLXJ1bnRpbWUuaW5zcGVjdC5jdXN0b21cIildKCkge1xuICAgIHJldHVybiBgUmVxdWVzdENvb2tpZXMgJHtKU09OLnN0cmluZ2lmeShPYmplY3QuZnJvbUVudHJpZXModGhpcy5fcGFyc2VkKSl9YDtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuX3BhcnNlZC52YWx1ZXMoKV0ubWFwKCh2KSA9PiBgJHt2Lm5hbWV9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHYudmFsdWUpfWApLmpvaW4oXCI7IFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL3Jlc3BvbnNlLWNvb2tpZXMudHNcbnZhciBSZXNwb25zZUNvb2tpZXMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHJlc3BvbnNlSGVhZGVycykge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICB0aGlzLl9wYXJzZWQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHRoaXMuX2hlYWRlcnMgPSByZXNwb25zZUhlYWRlcnM7XG4gICAgY29uc3Qgc2V0Q29va2llID0gKFxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9mZXRjaC9pc3N1ZXMvOTczXG4gICAgICAoX2MgPSAoX2IgPSAoX2EgPSByZXNwb25zZUhlYWRlcnMuZ2V0QWxsKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChyZXNwb25zZUhlYWRlcnMsIFwic2V0LWNvb2tpZVwiKSkgIT0gbnVsbCA/IF9iIDogcmVzcG9uc2VIZWFkZXJzLmdldChcInNldC1jb29raWVcIikpICE9IG51bGwgPyBfYyA6IFtdXG4gICAgKTtcbiAgICBjb25zdCBjb29raWVTdHJpbmdzID0gQXJyYXkuaXNBcnJheShzZXRDb29raWUpID8gc2V0Q29va2llIDogc3BsaXRDb29raWVzU3RyaW5nKHNldENvb2tpZSk7XG4gICAgZm9yIChjb25zdCBjb29raWVTdHJpbmcgb2YgY29va2llU3RyaW5ncykge1xuICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VTZXRDb29raWUoY29va2llU3RyaW5nKTtcbiAgICAgIGlmIChwYXJzZWQpXG4gICAgICAgIHRoaXMuX3BhcnNlZC5zZXQocGFyc2VkLm5hbWUsIHBhcnNlZCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb29raWUtc3RvcmUvI0Nvb2tpZVN0b3JlLWdldCBDb29raWVTdG9yZSNnZXR9IHdpdGhvdXQgdGhlIFByb21pc2UuXG4gICAqL1xuICBnZXQoLi4uYXJncykge1xuICAgIGNvbnN0IGtleSA9IHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiID8gYXJnc1swXSA6IGFyZ3NbMF0ubmFtZTtcbiAgICByZXR1cm4gdGhpcy5fcGFyc2VkLmdldChrZXkpO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb29raWUtc3RvcmUvI0Nvb2tpZVN0b3JlLWdldEFsbCBDb29raWVTdG9yZSNnZXRBbGx9IHdpdGhvdXQgdGhlIFByb21pc2UuXG4gICAqL1xuICBnZXRBbGwoLi4uYXJncykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBhbGwgPSBBcnJheS5mcm9tKHRoaXMuX3BhcnNlZC52YWx1ZXMoKSk7XG4gICAgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGFsbDtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gdHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIgPyBhcmdzWzBdIDogKF9hID0gYXJnc1swXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm5hbWU7XG4gICAgcmV0dXJuIGFsbC5maWx0ZXIoKGMpID0+IGMubmFtZSA9PT0ga2V5KTtcbiAgfVxuICBoYXMobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9wYXJzZWQuaGFzKG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiB7QGxpbmsgaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb29raWUtc3RvcmUvI0Nvb2tpZVN0b3JlLXNldCBDb29raWVTdG9yZSNzZXR9IHdpdGhvdXQgdGhlIFByb21pc2UuXG4gICAqL1xuICBzZXQoLi4uYXJncykge1xuICAgIGNvbnN0IFtuYW1lLCB2YWx1ZSwgY29va2llXSA9IGFyZ3MubGVuZ3RoID09PSAxID8gW2FyZ3NbMF0ubmFtZSwgYXJnc1swXS52YWx1ZSwgYXJnc1swXV0gOiBhcmdzO1xuICAgIGNvbnN0IG1hcCA9IHRoaXMuX3BhcnNlZDtcbiAgICBtYXAuc2V0KG5hbWUsIG5vcm1hbGl6ZUNvb2tpZSh7IG5hbWUsIHZhbHVlLCAuLi5jb29raWUgfSkpO1xuICAgIHJlcGxhY2UobWFwLCB0aGlzLl9oZWFkZXJzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICoge0BsaW5rIGh0dHBzOi8vd2ljZy5naXRodWIuaW8vY29va2llLXN0b3JlLyNDb29raWVTdG9yZS1kZWxldGUgQ29va2llU3RvcmUjZGVsZXRlfSB3aXRob3V0IHRoZSBQcm9taXNlLlxuICAgKi9cbiAgZGVsZXRlKC4uLmFyZ3MpIHtcbiAgICBjb25zdCBbbmFtZSwgcGF0aCwgZG9tYWluXSA9IHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiID8gW2FyZ3NbMF1dIDogW2FyZ3NbMF0ubmFtZSwgYXJnc1swXS5wYXRoLCBhcmdzWzBdLmRvbWFpbl07XG4gICAgcmV0dXJuIHRoaXMuc2V0KHsgbmFtZSwgcGF0aCwgZG9tYWluLCB2YWx1ZTogXCJcIiwgZXhwaXJlczogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKDApIH0pO1xuICB9XG4gIFtTeW1ib2wuZm9yKFwiZWRnZS1ydW50aW1lLmluc3BlY3QuY3VzdG9tXCIpXSgpIHtcbiAgICByZXR1cm4gYFJlc3BvbnNlQ29va2llcyAke0pTT04uc3RyaW5naWZ5KE9iamVjdC5mcm9tRW50cmllcyh0aGlzLl9wYXJzZWQpKX1gO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBbLi4udGhpcy5fcGFyc2VkLnZhbHVlcygpXS5tYXAoc3RyaW5naWZ5Q29va2llKS5qb2luKFwiOyBcIik7XG4gIH1cbn07XG5mdW5jdGlvbiByZXBsYWNlKGJhZywgaGVhZGVycykge1xuICBoZWFkZXJzLmRlbGV0ZShcInNldC1jb29raWVcIik7XG4gIGZvciAoY29uc3QgWywgdmFsdWVdIG9mIGJhZykge1xuICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBzdHJpbmdpZnlDb29raWUodmFsdWUpO1xuICAgIGhlYWRlcnMuYXBwZW5kKFwic2V0LWNvb2tpZVwiLCBzZXJpYWxpemVkKTtcbiAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplQ29va2llKGNvb2tpZSA9IHsgbmFtZTogXCJcIiwgdmFsdWU6IFwiXCIgfSkge1xuICBpZiAodHlwZW9mIGNvb2tpZS5leHBpcmVzID09PSBcIm51bWJlclwiKSB7XG4gICAgY29va2llLmV4cGlyZXMgPSBuZXcgRGF0ZShjb29raWUuZXhwaXJlcyk7XG4gIH1cbiAgaWYgKGNvb2tpZS5tYXhBZ2UpIHtcbiAgICBjb29raWUuZXhwaXJlcyA9IG5ldyBEYXRlKERhdGUubm93KCkgKyBjb29raWUubWF4QWdlICogMWUzKTtcbiAgfVxuICBpZiAoY29va2llLnBhdGggPT09IG51bGwgfHwgY29va2llLnBhdGggPT09IHZvaWQgMCkge1xuICAgIGNvb2tpZS5wYXRoID0gXCIvXCI7XG4gIH1cbiAgcmV0dXJuIGNvb2tpZTtcbn1cbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBSZXF1ZXN0Q29va2llcyxcbiAgUmVzcG9uc2VDb29raWVzLFxuICBwYXJzZUNvb2tpZSxcbiAgcGFyc2VTZXRDb29raWUsXG4gIHNwbGl0Q29va2llc1N0cmluZyxcbiAgc3RyaW5naWZ5Q29va2llXG59KTtcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZ2V0T3duUHJvcERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2dldE93blByb3BOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX2hhc093blByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJfX2NvcHlQcm9wcyIsInRvIiwiZnJvbSIsImV4Y2VwdCIsImRlc2MiLCJrZXkiLCJjYWxsIiwiX190b0NvbW1vbkpTIiwibW9kIiwidmFsdWUiLCJzcmNfZXhwb3J0cyIsIlJlcXVlc3RDb29raWVzIiwiUmVzcG9uc2VDb29raWVzIiwicGFyc2VDb29raWUiLCJwYXJzZVNldENvb2tpZSIsInNwbGl0Q29va2llc1N0cmluZyIsInN0cmluZ2lmeUNvb2tpZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjIiwiX2EiLCJhdHRycyIsInBhdGgiLCJleHBpcmVzIiwiRGF0ZSIsInRvVVRDU3RyaW5nIiwibWF4QWdlIiwiZG9tYWluIiwic2VjdXJlIiwiaHR0cE9ubHkiLCJzYW1lU2l0ZSIsImZpbHRlciIsIkJvb2xlYW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwiY29va2llIiwibWFwIiwiTWFwIiwicGFpciIsInNwbGl0Iiwic3BsaXRBdCIsImluZGV4T2YiLCJzZXQiLCJzbGljZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNldENvb2tpZSIsImF0dHJpYnV0ZXMiLCJodHRwb25seSIsIm1heGFnZSIsInNhbWVzaXRlIiwiZnJvbUVudHJpZXMiLCJ2YWx1ZTIiLCJ0b0xvd2VyQ2FzZSIsIk51bWJlciIsInBhcnNlU2FtZVNpdGUiLCJjb21wYWN0IiwidCIsIm5ld1QiLCJTQU1FX1NJVEUiLCJzdHJpbmciLCJpbmNsdWRlcyIsImNvb2tpZXNTdHJpbmciLCJjb29raWVzU3RyaW5ncyIsInBvcyIsInN0YXJ0IiwiY2giLCJsYXN0Q29tbWEiLCJuZXh0U3RhcnQiLCJjb29raWVzU2VwYXJhdG9yRm91bmQiLCJza2lwV2hpdGVzcGFjZSIsImxlbmd0aCIsInRlc3QiLCJjaGFyQXQiLCJub3RTcGVjaWFsQ2hhciIsInB1c2giLCJzdWJzdHJpbmciLCJjb25zdHJ1Y3RvciIsInJlcXVlc3RIZWFkZXJzIiwiX3BhcnNlZCIsIl9oZWFkZXJzIiwiaGVhZGVyIiwicGFyc2VkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJzaXplIiwiYXJncyIsImdldEFsbCIsIkFycmF5IiwiXyIsIm4iLCJoYXMiLCJkZWxldGUiLCJuYW1lcyIsInJlc3VsdCIsImlzQXJyYXkiLCJjbGVhciIsImtleXMiLCJmb3IiLCJKU09OIiwic3RyaW5naWZ5IiwidG9TdHJpbmciLCJ2YWx1ZXMiLCJ2IiwicmVzcG9uc2VIZWFkZXJzIiwiX2IiLCJfYyIsImNvb2tpZVN0cmluZ3MiLCJjb29raWVTdHJpbmciLCJub3JtYWxpemVDb29raWUiLCJyZXBsYWNlIiwiYmFnIiwiaGVhZGVycyIsInNlcmlhbGl6ZWQiLCJhcHBlbmQiLCJub3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@opentelemetry/api/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n(()=>{\n    \"use strict\";\n    var e = {\n        339: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ContextAPI = void 0;\n            const n = r(44);\n            const a = r(38);\n            const o = r(741);\n            const i = \"context\";\n            const c = new n.NoopContextManager;\n            class ContextAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new ContextAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalContextManager(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                active() {\n                    return this._getContextManager().active();\n                }\n                with(e, t, r, ...n) {\n                    return this._getContextManager().with(e, t, r, ...n);\n                }\n                bind(e, t) {\n                    return this._getContextManager().bind(e, t);\n                }\n                _getContextManager() {\n                    return (0, a.getGlobal)(i) || c;\n                }\n                disable() {\n                    this._getContextManager().disable();\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.ContextAPI = ContextAPI;\n        },\n        741: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagAPI = void 0;\n            const n = r(144);\n            const a = r(871);\n            const o = r(133);\n            const i = r(38);\n            const c = \"diag\";\n            class DiagAPI {\n                constructor(){\n                    function _logProxy(e) {\n                        return function(...t) {\n                            const r = (0, i.getGlobal)(\"diag\");\n                            if (!r) return;\n                            return r[e](...t);\n                        };\n                    }\n                    const e = this;\n                    const setLogger = (t, r = {\n                        logLevel: o.DiagLogLevel.INFO\n                    })=>{\n                        var n, c, s;\n                        if (t === e) {\n                            const t = new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");\n                            e.error((n = t.stack) !== null && n !== void 0 ? n : t.message);\n                            return false;\n                        }\n                        if (typeof r === \"number\") {\n                            r = {\n                                logLevel: r\n                            };\n                        }\n                        const u = (0, i.getGlobal)(\"diag\");\n                        const l = (0, a.createLogLevelDiagLogger)((c = r.logLevel) !== null && c !== void 0 ? c : o.DiagLogLevel.INFO, t);\n                        if (u && !r.suppressOverrideMessage) {\n                            const e = (s = (new Error).stack) !== null && s !== void 0 ? s : \"<failed to generate stacktrace>\";\n                            u.warn(`Current logger will be overwritten from ${e}`);\n                            l.warn(`Current logger will overwrite one already registered from ${e}`);\n                        }\n                        return (0, i.registerGlobal)(\"diag\", l, e, true);\n                    };\n                    e.setLogger = setLogger;\n                    e.disable = ()=>{\n                        (0, i.unregisterGlobal)(c, e);\n                    };\n                    e.createComponentLogger = (e)=>new n.DiagComponentLogger(e);\n                    e.verbose = _logProxy(\"verbose\");\n                    e.debug = _logProxy(\"debug\");\n                    e.info = _logProxy(\"info\");\n                    e.warn = _logProxy(\"warn\");\n                    e.error = _logProxy(\"error\");\n                }\n                static instance() {\n                    if (!this._instance) {\n                        this._instance = new DiagAPI;\n                    }\n                    return this._instance;\n                }\n            }\n            t.DiagAPI = DiagAPI;\n        },\n        128: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.MetricsAPI = void 0;\n            const n = r(333);\n            const a = r(38);\n            const o = r(741);\n            const i = \"metrics\";\n            class MetricsAPI {\n                constructor(){}\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new MetricsAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalMeterProvider(e) {\n                    return (0, a.registerGlobal)(i, e, o.DiagAPI.instance());\n                }\n                getMeterProvider() {\n                    return (0, a.getGlobal)(i) || n.NOOP_METER_PROVIDER;\n                }\n                getMeter(e, t, r) {\n                    return this.getMeterProvider().getMeter(e, t, r);\n                }\n                disable() {\n                    (0, a.unregisterGlobal)(i, o.DiagAPI.instance());\n                }\n            }\n            t.MetricsAPI = MetricsAPI;\n        },\n        930: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.PropagationAPI = void 0;\n            const n = r(38);\n            const a = r(600);\n            const o = r(625);\n            const i = r(377);\n            const c = r(701);\n            const s = r(741);\n            const u = \"propagation\";\n            const l = new a.NoopTextMapPropagator;\n            class PropagationAPI {\n                constructor(){\n                    this.createBaggage = c.createBaggage;\n                    this.getBaggage = i.getBaggage;\n                    this.getActiveBaggage = i.getActiveBaggage;\n                    this.setBaggage = i.setBaggage;\n                    this.deleteBaggage = i.deleteBaggage;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new PropagationAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalPropagator(e) {\n                    return (0, n.registerGlobal)(u, e, s.DiagAPI.instance());\n                }\n                inject(e, t, r = o.defaultTextMapSetter) {\n                    return this._getGlobalPropagator().inject(e, t, r);\n                }\n                extract(e, t, r = o.defaultTextMapGetter) {\n                    return this._getGlobalPropagator().extract(e, t, r);\n                }\n                fields() {\n                    return this._getGlobalPropagator().fields();\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(u, s.DiagAPI.instance());\n                }\n                _getGlobalPropagator() {\n                    return (0, n.getGlobal)(u) || l;\n                }\n            }\n            t.PropagationAPI = PropagationAPI;\n        },\n        967: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceAPI = void 0;\n            const n = r(38);\n            const a = r(414);\n            const o = r(994);\n            const i = r(542);\n            const c = r(741);\n            const s = \"trace\";\n            class TraceAPI {\n                constructor(){\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                    this.wrapSpanContext = o.wrapSpanContext;\n                    this.isSpanContextValid = o.isSpanContextValid;\n                    this.deleteSpan = i.deleteSpan;\n                    this.getSpan = i.getSpan;\n                    this.getActiveSpan = i.getActiveSpan;\n                    this.getSpanContext = i.getSpanContext;\n                    this.setSpan = i.setSpan;\n                    this.setSpanContext = i.setSpanContext;\n                }\n                static getInstance() {\n                    if (!this._instance) {\n                        this._instance = new TraceAPI;\n                    }\n                    return this._instance;\n                }\n                setGlobalTracerProvider(e) {\n                    const t = (0, n.registerGlobal)(s, this._proxyTracerProvider, c.DiagAPI.instance());\n                    if (t) {\n                        this._proxyTracerProvider.setDelegate(e);\n                    }\n                    return t;\n                }\n                getTracerProvider() {\n                    return (0, n.getGlobal)(s) || this._proxyTracerProvider;\n                }\n                getTracer(e, t) {\n                    return this.getTracerProvider().getTracer(e, t);\n                }\n                disable() {\n                    (0, n.unregisterGlobal)(s, c.DiagAPI.instance());\n                    this._proxyTracerProvider = new a.ProxyTracerProvider;\n                }\n            }\n            t.TraceAPI = TraceAPI;\n        },\n        377: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.deleteBaggage = t.setBaggage = t.getActiveBaggage = t.getBaggage = void 0;\n            const n = r(339);\n            const a = r(421);\n            const o = (0, a.createContextKey)(\"OpenTelemetry Baggage Key\");\n            function getBaggage(e) {\n                return e.getValue(o) || undefined;\n            }\n            t.getBaggage = getBaggage;\n            function getActiveBaggage() {\n                return getBaggage(n.ContextAPI.getInstance().active());\n            }\n            t.getActiveBaggage = getActiveBaggage;\n            function setBaggage(e, t) {\n                return e.setValue(o, t);\n            }\n            t.setBaggage = setBaggage;\n            function deleteBaggage(e) {\n                return e.deleteValue(o);\n            }\n            t.deleteBaggage = deleteBaggage;\n        },\n        496: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.BaggageImpl = void 0;\n            class BaggageImpl {\n                constructor(e){\n                    this._entries = e ? new Map(e) : new Map;\n                }\n                getEntry(e) {\n                    const t = this._entries.get(e);\n                    if (!t) {\n                        return undefined;\n                    }\n                    return Object.assign({}, t);\n                }\n                getAllEntries() {\n                    return Array.from(this._entries.entries()).map(([e, t])=>[\n                            e,\n                            t\n                        ]);\n                }\n                setEntry(e, t) {\n                    const r = new BaggageImpl(this._entries);\n                    r._entries.set(e, t);\n                    return r;\n                }\n                removeEntry(e) {\n                    const t = new BaggageImpl(this._entries);\n                    t._entries.delete(e);\n                    return t;\n                }\n                removeEntries(...e) {\n                    const t = new BaggageImpl(this._entries);\n                    for (const r of e){\n                        t._entries.delete(r);\n                    }\n                    return t;\n                }\n                clear() {\n                    return new BaggageImpl;\n                }\n            }\n            t.BaggageImpl = BaggageImpl;\n        },\n        817: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataSymbol = void 0;\n            t.baggageEntryMetadataSymbol = Symbol(\"BaggageEntryMetadata\");\n        },\n        701: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.baggageEntryMetadataFromString = t.createBaggage = void 0;\n            const n = r(741);\n            const a = r(496);\n            const o = r(817);\n            const i = n.DiagAPI.instance();\n            function createBaggage(e = {}) {\n                return new a.BaggageImpl(new Map(Object.entries(e)));\n            }\n            t.createBaggage = createBaggage;\n            function baggageEntryMetadataFromString(e) {\n                if (typeof e !== \"string\") {\n                    i.error(`Cannot create baggage metadata from unknown type: ${typeof e}`);\n                    e = \"\";\n                }\n                return {\n                    __TYPE__: o.baggageEntryMetadataSymbol,\n                    toString () {\n                        return e;\n                    }\n                };\n            }\n            t.baggageEntryMetadataFromString = baggageEntryMetadataFromString;\n        },\n        388: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.context = void 0;\n            const n = r(339);\n            t.context = n.ContextAPI.getInstance();\n        },\n        44: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopContextManager = void 0;\n            const n = r(421);\n            class NoopContextManager {\n                active() {\n                    return n.ROOT_CONTEXT;\n                }\n                with(e, t, r, ...n) {\n                    return t.call(r, ...n);\n                }\n                bind(e, t) {\n                    return t;\n                }\n                enable() {\n                    return this;\n                }\n                disable() {\n                    return this;\n                }\n            }\n            t.NoopContextManager = NoopContextManager;\n        },\n        421: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ROOT_CONTEXT = t.createContextKey = void 0;\n            function createContextKey(e) {\n                return Symbol.for(e);\n            }\n            t.createContextKey = createContextKey;\n            class BaseContext {\n                constructor(e){\n                    const t = this;\n                    t._currentContext = e ? new Map(e) : new Map;\n                    t.getValue = (e)=>t._currentContext.get(e);\n                    t.setValue = (e, r)=>{\n                        const n = new BaseContext(t._currentContext);\n                        n._currentContext.set(e, r);\n                        return n;\n                    };\n                    t.deleteValue = (e)=>{\n                        const r = new BaseContext(t._currentContext);\n                        r._currentContext.delete(e);\n                        return r;\n                    };\n                }\n            }\n            t.ROOT_CONTEXT = new BaseContext;\n        },\n        920: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.diag = void 0;\n            const n = r(741);\n            t.diag = n.DiagAPI.instance();\n        },\n        144: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagComponentLogger = void 0;\n            const n = r(38);\n            class DiagComponentLogger {\n                constructor(e){\n                    this._namespace = e.namespace || \"DiagComponentLogger\";\n                }\n                debug(...e) {\n                    return logProxy(\"debug\", this._namespace, e);\n                }\n                error(...e) {\n                    return logProxy(\"error\", this._namespace, e);\n                }\n                info(...e) {\n                    return logProxy(\"info\", this._namespace, e);\n                }\n                warn(...e) {\n                    return logProxy(\"warn\", this._namespace, e);\n                }\n                verbose(...e) {\n                    return logProxy(\"verbose\", this._namespace, e);\n                }\n            }\n            t.DiagComponentLogger = DiagComponentLogger;\n            function logProxy(e, t, r) {\n                const a = (0, n.getGlobal)(\"diag\");\n                if (!a) {\n                    return;\n                }\n                r.unshift(t);\n                return a[e](...r);\n            }\n        },\n        689: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagConsoleLogger = void 0;\n            const r = [\n                {\n                    n: \"error\",\n                    c: \"error\"\n                },\n                {\n                    n: \"warn\",\n                    c: \"warn\"\n                },\n                {\n                    n: \"info\",\n                    c: \"info\"\n                },\n                {\n                    n: \"debug\",\n                    c: \"debug\"\n                },\n                {\n                    n: \"verbose\",\n                    c: \"trace\"\n                }\n            ];\n            class DiagConsoleLogger {\n                constructor(){\n                    function _consoleFunc(e) {\n                        return function(...t) {\n                            if (console) {\n                                let r = console[e];\n                                if (typeof r !== \"function\") {\n                                    r = console.log;\n                                }\n                                if (typeof r === \"function\") {\n                                    return r.apply(console, t);\n                                }\n                            }\n                        };\n                    }\n                    for(let e = 0; e < r.length; e++){\n                        this[r[e].n] = _consoleFunc(r[e].c);\n                    }\n                }\n            }\n            t.DiagConsoleLogger = DiagConsoleLogger;\n        },\n        871: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createLogLevelDiagLogger = void 0;\n            const n = r(133);\n            function createLogLevelDiagLogger(e, t) {\n                if (e < n.DiagLogLevel.NONE) {\n                    e = n.DiagLogLevel.NONE;\n                } else if (e > n.DiagLogLevel.ALL) {\n                    e = n.DiagLogLevel.ALL;\n                }\n                t = t || {};\n                function _filterFunc(r, n) {\n                    const a = t[r];\n                    if (typeof a === \"function\" && e >= n) {\n                        return a.bind(t);\n                    }\n                    return function() {};\n                }\n                return {\n                    error: _filterFunc(\"error\", n.DiagLogLevel.ERROR),\n                    warn: _filterFunc(\"warn\", n.DiagLogLevel.WARN),\n                    info: _filterFunc(\"info\", n.DiagLogLevel.INFO),\n                    debug: _filterFunc(\"debug\", n.DiagLogLevel.DEBUG),\n                    verbose: _filterFunc(\"verbose\", n.DiagLogLevel.VERBOSE)\n                };\n            }\n            t.createLogLevelDiagLogger = createLogLevelDiagLogger;\n        },\n        133: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.DiagLogLevel = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"ERROR\"] = 30] = \"ERROR\";\n                e[e[\"WARN\"] = 50] = \"WARN\";\n                e[e[\"INFO\"] = 60] = \"INFO\";\n                e[e[\"DEBUG\"] = 70] = \"DEBUG\";\n                e[e[\"VERBOSE\"] = 80] = \"VERBOSE\";\n                e[e[\"ALL\"] = 9999] = \"ALL\";\n            })(r = t.DiagLogLevel || (t.DiagLogLevel = {}));\n        },\n        38: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.unregisterGlobal = t.getGlobal = t.registerGlobal = void 0;\n            const n = r(966);\n            const a = r(520);\n            const o = r(565);\n            const i = a.VERSION.split(\".\")[0];\n            const c = Symbol.for(`opentelemetry.js.api.${i}`);\n            const s = n._globalThis;\n            function registerGlobal(e, t, r, n = false) {\n                var o;\n                const i = s[c] = (o = s[c]) !== null && o !== void 0 ? o : {\n                    version: a.VERSION\n                };\n                if (!n && i[e]) {\n                    const t = new Error(`@opentelemetry/api: Attempted duplicate registration of API: ${e}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                if (i.version !== a.VERSION) {\n                    const t = new Error(`@opentelemetry/api: Registration of version v${i.version} for ${e} does not match previously registered API v${a.VERSION}`);\n                    r.error(t.stack || t.message);\n                    return false;\n                }\n                i[e] = t;\n                r.debug(`@opentelemetry/api: Registered a global for ${e} v${a.VERSION}.`);\n                return true;\n            }\n            t.registerGlobal = registerGlobal;\n            function getGlobal(e) {\n                var t, r;\n                const n = (t = s[c]) === null || t === void 0 ? void 0 : t.version;\n                if (!n || !(0, o.isCompatible)(n)) {\n                    return;\n                }\n                return (r = s[c]) === null || r === void 0 ? void 0 : r[e];\n            }\n            t.getGlobal = getGlobal;\n            function unregisterGlobal(e, t) {\n                t.debug(`@opentelemetry/api: Unregistering a global for ${e} v${a.VERSION}.`);\n                const r = s[c];\n                if (r) {\n                    delete r[e];\n                }\n            }\n            t.unregisterGlobal = unregisterGlobal;\n        },\n        565: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.isCompatible = t._makeCompatibilityCheck = void 0;\n            const n = r(520);\n            const a = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n            function _makeCompatibilityCheck(e) {\n                const t = new Set([\n                    e\n                ]);\n                const r = new Set;\n                const n = e.match(a);\n                if (!n) {\n                    return ()=>false;\n                }\n                const o = {\n                    major: +n[1],\n                    minor: +n[2],\n                    patch: +n[3],\n                    prerelease: n[4]\n                };\n                if (o.prerelease != null) {\n                    return function isExactmatch(t) {\n                        return t === e;\n                    };\n                }\n                function _reject(e) {\n                    r.add(e);\n                    return false;\n                }\n                function _accept(e) {\n                    t.add(e);\n                    return true;\n                }\n                return function isCompatible(e) {\n                    if (t.has(e)) {\n                        return true;\n                    }\n                    if (r.has(e)) {\n                        return false;\n                    }\n                    const n = e.match(a);\n                    if (!n) {\n                        return _reject(e);\n                    }\n                    const i = {\n                        major: +n[1],\n                        minor: +n[2],\n                        patch: +n[3],\n                        prerelease: n[4]\n                    };\n                    if (i.prerelease != null) {\n                        return _reject(e);\n                    }\n                    if (o.major !== i.major) {\n                        return _reject(e);\n                    }\n                    if (o.major === 0) {\n                        if (o.minor === i.minor && o.patch <= i.patch) {\n                            return _accept(e);\n                        }\n                        return _reject(e);\n                    }\n                    if (o.minor <= i.minor) {\n                        return _accept(e);\n                    }\n                    return _reject(e);\n                };\n            }\n            t._makeCompatibilityCheck = _makeCompatibilityCheck;\n            t.isCompatible = _makeCompatibilityCheck(n.VERSION);\n        },\n        934: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.metrics = void 0;\n            const n = r(128);\n            t.metrics = n.MetricsAPI.getInstance();\n        },\n        28: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ValueType = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INT\"] = 0] = \"INT\";\n                e[e[\"DOUBLE\"] = 1] = \"DOUBLE\";\n            })(r = t.ValueType || (t.ValueType = {}));\n        },\n        962: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createNoopMeter = t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = t.NOOP_OBSERVABLE_GAUGE_METRIC = t.NOOP_OBSERVABLE_COUNTER_METRIC = t.NOOP_UP_DOWN_COUNTER_METRIC = t.NOOP_HISTOGRAM_METRIC = t.NOOP_COUNTER_METRIC = t.NOOP_METER = t.NoopObservableUpDownCounterMetric = t.NoopObservableGaugeMetric = t.NoopObservableCounterMetric = t.NoopObservableMetric = t.NoopHistogramMetric = t.NoopUpDownCounterMetric = t.NoopCounterMetric = t.NoopMetric = t.NoopMeter = void 0;\n            class NoopMeter {\n                constructor(){}\n                createHistogram(e, r) {\n                    return t.NOOP_HISTOGRAM_METRIC;\n                }\n                createCounter(e, r) {\n                    return t.NOOP_COUNTER_METRIC;\n                }\n                createUpDownCounter(e, r) {\n                    return t.NOOP_UP_DOWN_COUNTER_METRIC;\n                }\n                createObservableGauge(e, r) {\n                    return t.NOOP_OBSERVABLE_GAUGE_METRIC;\n                }\n                createObservableCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_COUNTER_METRIC;\n                }\n                createObservableUpDownCounter(e, r) {\n                    return t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n                }\n                addBatchObservableCallback(e, t) {}\n                removeBatchObservableCallback(e) {}\n            }\n            t.NoopMeter = NoopMeter;\n            class NoopMetric {\n            }\n            t.NoopMetric = NoopMetric;\n            class NoopCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopCounterMetric = NoopCounterMetric;\n            class NoopUpDownCounterMetric extends NoopMetric {\n                add(e, t) {}\n            }\n            t.NoopUpDownCounterMetric = NoopUpDownCounterMetric;\n            class NoopHistogramMetric extends NoopMetric {\n                record(e, t) {}\n            }\n            t.NoopHistogramMetric = NoopHistogramMetric;\n            class NoopObservableMetric {\n                addCallback(e) {}\n                removeCallback(e) {}\n            }\n            t.NoopObservableMetric = NoopObservableMetric;\n            class NoopObservableCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableCounterMetric = NoopObservableCounterMetric;\n            class NoopObservableGaugeMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableGaugeMetric = NoopObservableGaugeMetric;\n            class NoopObservableUpDownCounterMetric extends NoopObservableMetric {\n            }\n            t.NoopObservableUpDownCounterMetric = NoopObservableUpDownCounterMetric;\n            t.NOOP_METER = new NoopMeter;\n            t.NOOP_COUNTER_METRIC = new NoopCounterMetric;\n            t.NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric;\n            t.NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric;\n            t.NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric;\n            t.NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric;\n            t.NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric;\n            function createNoopMeter() {\n                return t.NOOP_METER;\n            }\n            t.createNoopMeter = createNoopMeter;\n        },\n        333: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NOOP_METER_PROVIDER = t.NoopMeterProvider = void 0;\n            const n = r(962);\n            class NoopMeterProvider {\n                getMeter(e, t, r) {\n                    return n.NOOP_METER;\n                }\n            }\n            t.NoopMeterProvider = NoopMeterProvider;\n            t.NOOP_METER_PROVIDER = new NoopMeterProvider;\n        },\n        966: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(652), t);\n        },\n        385: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t._globalThis = void 0;\n            t._globalThis = typeof globalThis === \"object\" ? globalThis : global;\n        },\n        652: function(e, t, r) {\n            var n = this && this.__createBinding || (Object.create ? function(e, t, r, n) {\n                if (n === undefined) n = r;\n                Object.defineProperty(e, n, {\n                    enumerable: true,\n                    get: function() {\n                        return t[r];\n                    }\n                });\n            } : function(e, t, r, n) {\n                if (n === undefined) n = r;\n                e[n] = t[r];\n            });\n            var a = this && this.__exportStar || function(e, t) {\n                for(var r in e)if (r !== \"default\" && !Object.prototype.hasOwnProperty.call(t, r)) n(t, e, r);\n            };\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            a(r(385), t);\n        },\n        251: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.propagation = void 0;\n            const n = r(930);\n            t.propagation = n.PropagationAPI.getInstance();\n        },\n        600: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTextMapPropagator = void 0;\n            class NoopTextMapPropagator {\n                inject(e, t) {}\n                extract(e, t) {\n                    return e;\n                }\n                fields() {\n                    return [];\n                }\n            }\n            t.NoopTextMapPropagator = NoopTextMapPropagator;\n        },\n        625: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.defaultTextMapSetter = t.defaultTextMapGetter = void 0;\n            t.defaultTextMapGetter = {\n                get (e, t) {\n                    if (e == null) {\n                        return undefined;\n                    }\n                    return e[t];\n                },\n                keys (e) {\n                    if (e == null) {\n                        return [];\n                    }\n                    return Object.keys(e);\n                }\n            };\n            t.defaultTextMapSetter = {\n                set (e, t, r) {\n                    if (e == null) {\n                        return;\n                    }\n                    e[t] = r;\n                }\n            };\n        },\n        978: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.trace = void 0;\n            const n = r(967);\n            t.trace = n.TraceAPI.getInstance();\n        },\n        76: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NonRecordingSpan = void 0;\n            const n = r(304);\n            class NonRecordingSpan {\n                constructor(e = n.INVALID_SPAN_CONTEXT){\n                    this._spanContext = e;\n                }\n                spanContext() {\n                    return this._spanContext;\n                }\n                setAttribute(e, t) {\n                    return this;\n                }\n                setAttributes(e) {\n                    return this;\n                }\n                addEvent(e, t) {\n                    return this;\n                }\n                setStatus(e) {\n                    return this;\n                }\n                updateName(e) {\n                    return this;\n                }\n                end(e) {}\n                isRecording() {\n                    return false;\n                }\n                recordException(e, t) {}\n            }\n            t.NonRecordingSpan = NonRecordingSpan;\n        },\n        527: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracer = void 0;\n            const n = r(339);\n            const a = r(542);\n            const o = r(76);\n            const i = r(994);\n            const c = n.ContextAPI.getInstance();\n            class NoopTracer {\n                startSpan(e, t, r = c.active()) {\n                    const n = Boolean(t === null || t === void 0 ? void 0 : t.root);\n                    if (n) {\n                        return new o.NonRecordingSpan;\n                    }\n                    const s = r && (0, a.getSpanContext)(r);\n                    if (isSpanContext(s) && (0, i.isSpanContextValid)(s)) {\n                        return new o.NonRecordingSpan(s);\n                    } else {\n                        return new o.NonRecordingSpan;\n                    }\n                }\n                startActiveSpan(e, t, r, n) {\n                    let o;\n                    let i;\n                    let s;\n                    if (arguments.length < 2) {\n                        return;\n                    } else if (arguments.length === 2) {\n                        s = t;\n                    } else if (arguments.length === 3) {\n                        o = t;\n                        s = r;\n                    } else {\n                        o = t;\n                        i = r;\n                        s = n;\n                    }\n                    const u = i !== null && i !== void 0 ? i : c.active();\n                    const l = this.startSpan(e, o, u);\n                    const g = (0, a.setSpan)(u, l);\n                    return c.with(g, s, undefined, l);\n                }\n            }\n            t.NoopTracer = NoopTracer;\n            function isSpanContext(e) {\n                return typeof e === \"object\" && typeof e[\"spanId\"] === \"string\" && typeof e[\"traceId\"] === \"string\" && typeof e[\"traceFlags\"] === \"number\";\n            }\n        },\n        228: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.NoopTracerProvider = void 0;\n            const n = r(527);\n            class NoopTracerProvider {\n                getTracer(e, t, r) {\n                    return new n.NoopTracer;\n                }\n            }\n            t.NoopTracerProvider = NoopTracerProvider;\n        },\n        387: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracer = void 0;\n            const n = r(527);\n            const a = new n.NoopTracer;\n            class ProxyTracer {\n                constructor(e, t, r, n){\n                    this._provider = e;\n                    this.name = t;\n                    this.version = r;\n                    this.options = n;\n                }\n                startSpan(e, t, r) {\n                    return this._getTracer().startSpan(e, t, r);\n                }\n                startActiveSpan(e, t, r, n) {\n                    const a = this._getTracer();\n                    return Reflect.apply(a.startActiveSpan, a, arguments);\n                }\n                _getTracer() {\n                    if (this._delegate) {\n                        return this._delegate;\n                    }\n                    const e = this._provider.getDelegateTracer(this.name, this.version, this.options);\n                    if (!e) {\n                        return a;\n                    }\n                    this._delegate = e;\n                    return this._delegate;\n                }\n            }\n            t.ProxyTracer = ProxyTracer;\n        },\n        414: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.ProxyTracerProvider = void 0;\n            const n = r(387);\n            const a = r(228);\n            const o = new a.NoopTracerProvider;\n            class ProxyTracerProvider {\n                getTracer(e, t, r) {\n                    var a;\n                    return (a = this.getDelegateTracer(e, t, r)) !== null && a !== void 0 ? a : new n.ProxyTracer(this, e, t, r);\n                }\n                getDelegate() {\n                    var e;\n                    return (e = this._delegate) !== null && e !== void 0 ? e : o;\n                }\n                setDelegate(e) {\n                    this._delegate = e;\n                }\n                getDelegateTracer(e, t, r) {\n                    var n;\n                    return (n = this._delegate) === null || n === void 0 ? void 0 : n.getTracer(e, t, r);\n                }\n            }\n            t.ProxyTracerProvider = ProxyTracerProvider;\n        },\n        505: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SamplingDecision = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n                e[e[\"RECORD\"] = 1] = \"RECORD\";\n                e[e[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n            })(r = t.SamplingDecision || (t.SamplingDecision = {}));\n        },\n        542: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.getSpanContext = t.setSpanContext = t.deleteSpan = t.setSpan = t.getActiveSpan = t.getSpan = void 0;\n            const n = r(421);\n            const a = r(76);\n            const o = r(339);\n            const i = (0, n.createContextKey)(\"OpenTelemetry Context Key SPAN\");\n            function getSpan(e) {\n                return e.getValue(i) || undefined;\n            }\n            t.getSpan = getSpan;\n            function getActiveSpan() {\n                return getSpan(o.ContextAPI.getInstance().active());\n            }\n            t.getActiveSpan = getActiveSpan;\n            function setSpan(e, t) {\n                return e.setValue(i, t);\n            }\n            t.setSpan = setSpan;\n            function deleteSpan(e) {\n                return e.deleteValue(i);\n            }\n            t.deleteSpan = deleteSpan;\n            function setSpanContext(e, t) {\n                return setSpan(e, new a.NonRecordingSpan(t));\n            }\n            t.setSpanContext = setSpanContext;\n            function getSpanContext(e) {\n                var t;\n                return (t = getSpan(e)) === null || t === void 0 ? void 0 : t.spanContext();\n            }\n            t.getSpanContext = getSpanContext;\n        },\n        430: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceStateImpl = void 0;\n            const n = r(450);\n            const a = 32;\n            const o = 512;\n            const i = \",\";\n            const c = \"=\";\n            class TraceStateImpl {\n                constructor(e){\n                    this._internalState = new Map;\n                    if (e) this._parse(e);\n                }\n                set(e, t) {\n                    const r = this._clone();\n                    if (r._internalState.has(e)) {\n                        r._internalState.delete(e);\n                    }\n                    r._internalState.set(e, t);\n                    return r;\n                }\n                unset(e) {\n                    const t = this._clone();\n                    t._internalState.delete(e);\n                    return t;\n                }\n                get(e) {\n                    return this._internalState.get(e);\n                }\n                serialize() {\n                    return this._keys().reduce((e, t)=>{\n                        e.push(t + c + this.get(t));\n                        return e;\n                    }, []).join(i);\n                }\n                _parse(e) {\n                    if (e.length > o) return;\n                    this._internalState = e.split(i).reverse().reduce((e, t)=>{\n                        const r = t.trim();\n                        const a = r.indexOf(c);\n                        if (a !== -1) {\n                            const o = r.slice(0, a);\n                            const i = r.slice(a + 1, t.length);\n                            if ((0, n.validateKey)(o) && (0, n.validateValue)(i)) {\n                                e.set(o, i);\n                            } else {}\n                        }\n                        return e;\n                    }, new Map);\n                    if (this._internalState.size > a) {\n                        this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, a));\n                    }\n                }\n                _keys() {\n                    return Array.from(this._internalState.keys()).reverse();\n                }\n                _clone() {\n                    const e = new TraceStateImpl;\n                    e._internalState = new Map(this._internalState);\n                    return e;\n                }\n            }\n            t.TraceStateImpl = TraceStateImpl;\n        },\n        450: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.validateValue = t.validateKey = void 0;\n            const r = \"[_0-9a-z-*/]\";\n            const n = `[a-z]${r}{0,255}`;\n            const a = `[a-z0-9]${r}{0,240}@[a-z]${r}{0,13}`;\n            const o = new RegExp(`^(?:${n}|${a})$`);\n            const i = /^[ -~]{0,255}[!-~]$/;\n            const c = /,|=/;\n            function validateKey(e) {\n                return o.test(e);\n            }\n            t.validateKey = validateKey;\n            function validateValue(e) {\n                return i.test(e) && !c.test(e);\n            }\n            t.validateValue = validateValue;\n        },\n        757: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.createTraceState = void 0;\n            const n = r(430);\n            function createTraceState(e) {\n                return new n.TraceStateImpl(e);\n            }\n            t.createTraceState = createTraceState;\n        },\n        304: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.INVALID_SPAN_CONTEXT = t.INVALID_TRACEID = t.INVALID_SPANID = void 0;\n            const n = r(762);\n            t.INVALID_SPANID = \"0000000000000000\";\n            t.INVALID_TRACEID = \"00000000000000000000000000000000\";\n            t.INVALID_SPAN_CONTEXT = {\n                traceId: t.INVALID_TRACEID,\n                spanId: t.INVALID_SPANID,\n                traceFlags: n.TraceFlags.NONE\n            };\n        },\n        902: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanKind = void 0;\n            var r;\n            (function(e) {\n                e[e[\"INTERNAL\"] = 0] = \"INTERNAL\";\n                e[e[\"SERVER\"] = 1] = \"SERVER\";\n                e[e[\"CLIENT\"] = 2] = \"CLIENT\";\n                e[e[\"PRODUCER\"] = 3] = \"PRODUCER\";\n                e[e[\"CONSUMER\"] = 4] = \"CONSUMER\";\n            })(r = t.SpanKind || (t.SpanKind = {}));\n        },\n        994: (e, t, r)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.wrapSpanContext = t.isSpanContextValid = t.isValidSpanId = t.isValidTraceId = void 0;\n            const n = r(304);\n            const a = r(76);\n            const o = /^([0-9a-f]{32})$/i;\n            const i = /^[0-9a-f]{16}$/i;\n            function isValidTraceId(e) {\n                return o.test(e) && e !== n.INVALID_TRACEID;\n            }\n            t.isValidTraceId = isValidTraceId;\n            function isValidSpanId(e) {\n                return i.test(e) && e !== n.INVALID_SPANID;\n            }\n            t.isValidSpanId = isValidSpanId;\n            function isSpanContextValid(e) {\n                return isValidTraceId(e.traceId) && isValidSpanId(e.spanId);\n            }\n            t.isSpanContextValid = isSpanContextValid;\n            function wrapSpanContext(e) {\n                return new a.NonRecordingSpan(e);\n            }\n            t.wrapSpanContext = wrapSpanContext;\n        },\n        832: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.SpanStatusCode = void 0;\n            var r;\n            (function(e) {\n                e[e[\"UNSET\"] = 0] = \"UNSET\";\n                e[e[\"OK\"] = 1] = \"OK\";\n                e[e[\"ERROR\"] = 2] = \"ERROR\";\n            })(r = t.SpanStatusCode || (t.SpanStatusCode = {}));\n        },\n        762: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.TraceFlags = void 0;\n            var r;\n            (function(e) {\n                e[e[\"NONE\"] = 0] = \"NONE\";\n                e[e[\"SAMPLED\"] = 1] = \"SAMPLED\";\n            })(r = t.TraceFlags || (t.TraceFlags = {}));\n        },\n        520: (e, t)=>{\n            Object.defineProperty(t, \"__esModule\", {\n                value: true\n            });\n            t.VERSION = void 0;\n            t.VERSION = \"1.4.1\";\n        }\n    };\n    var t = {};\n    function __nccwpck_require__(r) {\n        var n = t[r];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var a = t[r] = {\n            exports: {}\n        };\n        var o = true;\n        try {\n            e[r].call(a.exports, a, a.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete t[r];\n        }\n        return a.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var r = {};\n    (()=>{\n        var e = r;\n        Object.defineProperty(e, \"__esModule\", {\n            value: true\n        });\n        e.trace = e.propagation = e.metrics = e.diag = e.context = e.INVALID_SPAN_CONTEXT = e.INVALID_TRACEID = e.INVALID_SPANID = e.isValidSpanId = e.isValidTraceId = e.isSpanContextValid = e.createTraceState = e.TraceFlags = e.SpanStatusCode = e.SpanKind = e.SamplingDecision = e.ProxyTracerProvider = e.ProxyTracer = e.defaultTextMapSetter = e.defaultTextMapGetter = e.ValueType = e.createNoopMeter = e.DiagLogLevel = e.DiagConsoleLogger = e.ROOT_CONTEXT = e.createContextKey = e.baggageEntryMetadataFromString = void 0;\n        var t = __nccwpck_require__(701);\n        Object.defineProperty(e, \"baggageEntryMetadataFromString\", {\n            enumerable: true,\n            get: function() {\n                return t.baggageEntryMetadataFromString;\n            }\n        });\n        var n = __nccwpck_require__(421);\n        Object.defineProperty(e, \"createContextKey\", {\n            enumerable: true,\n            get: function() {\n                return n.createContextKey;\n            }\n        });\n        Object.defineProperty(e, \"ROOT_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return n.ROOT_CONTEXT;\n            }\n        });\n        var a = __nccwpck_require__(689);\n        Object.defineProperty(e, \"DiagConsoleLogger\", {\n            enumerable: true,\n            get: function() {\n                return a.DiagConsoleLogger;\n            }\n        });\n        var o = __nccwpck_require__(133);\n        Object.defineProperty(e, \"DiagLogLevel\", {\n            enumerable: true,\n            get: function() {\n                return o.DiagLogLevel;\n            }\n        });\n        var i = __nccwpck_require__(962);\n        Object.defineProperty(e, \"createNoopMeter\", {\n            enumerable: true,\n            get: function() {\n                return i.createNoopMeter;\n            }\n        });\n        var c = __nccwpck_require__(28);\n        Object.defineProperty(e, \"ValueType\", {\n            enumerable: true,\n            get: function() {\n                return c.ValueType;\n            }\n        });\n        var s = __nccwpck_require__(625);\n        Object.defineProperty(e, \"defaultTextMapGetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapGetter;\n            }\n        });\n        Object.defineProperty(e, \"defaultTextMapSetter\", {\n            enumerable: true,\n            get: function() {\n                return s.defaultTextMapSetter;\n            }\n        });\n        var u = __nccwpck_require__(387);\n        Object.defineProperty(e, \"ProxyTracer\", {\n            enumerable: true,\n            get: function() {\n                return u.ProxyTracer;\n            }\n        });\n        var l = __nccwpck_require__(414);\n        Object.defineProperty(e, \"ProxyTracerProvider\", {\n            enumerable: true,\n            get: function() {\n                return l.ProxyTracerProvider;\n            }\n        });\n        var g = __nccwpck_require__(505);\n        Object.defineProperty(e, \"SamplingDecision\", {\n            enumerable: true,\n            get: function() {\n                return g.SamplingDecision;\n            }\n        });\n        var p = __nccwpck_require__(902);\n        Object.defineProperty(e, \"SpanKind\", {\n            enumerable: true,\n            get: function() {\n                return p.SpanKind;\n            }\n        });\n        var d = __nccwpck_require__(832);\n        Object.defineProperty(e, \"SpanStatusCode\", {\n            enumerable: true,\n            get: function() {\n                return d.SpanStatusCode;\n            }\n        });\n        var _ = __nccwpck_require__(762);\n        Object.defineProperty(e, \"TraceFlags\", {\n            enumerable: true,\n            get: function() {\n                return _.TraceFlags;\n            }\n        });\n        var f = __nccwpck_require__(757);\n        Object.defineProperty(e, \"createTraceState\", {\n            enumerable: true,\n            get: function() {\n                return f.createTraceState;\n            }\n        });\n        var b = __nccwpck_require__(994);\n        Object.defineProperty(e, \"isSpanContextValid\", {\n            enumerable: true,\n            get: function() {\n                return b.isSpanContextValid;\n            }\n        });\n        Object.defineProperty(e, \"isValidTraceId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidTraceId;\n            }\n        });\n        Object.defineProperty(e, \"isValidSpanId\", {\n            enumerable: true,\n            get: function() {\n                return b.isValidSpanId;\n            }\n        });\n        var v = __nccwpck_require__(304);\n        Object.defineProperty(e, \"INVALID_SPANID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPANID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_TRACEID\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_TRACEID;\n            }\n        });\n        Object.defineProperty(e, \"INVALID_SPAN_CONTEXT\", {\n            enumerable: true,\n            get: function() {\n                return v.INVALID_SPAN_CONTEXT;\n            }\n        });\n        const O = __nccwpck_require__(388);\n        Object.defineProperty(e, \"context\", {\n            enumerable: true,\n            get: function() {\n                return O.context;\n            }\n        });\n        const P = __nccwpck_require__(920);\n        Object.defineProperty(e, \"diag\", {\n            enumerable: true,\n            get: function() {\n                return P.diag;\n            }\n        });\n        const N = __nccwpck_require__(934);\n        Object.defineProperty(e, \"metrics\", {\n            enumerable: true,\n            get: function() {\n                return N.metrics;\n            }\n        });\n        const S = __nccwpck_require__(251);\n        Object.defineProperty(e, \"propagation\", {\n            enumerable: true,\n            get: function() {\n                return S.propagation;\n            }\n        });\n        const C = __nccwpck_require__(978);\n        Object.defineProperty(e, \"trace\", {\n            enumerable: true,\n            get: function() {\n                return C.trace;\n            }\n        });\n        e[\"default\"] = {\n            context: O.context,\n            diag: P.diag,\n            metrics: N.metrics,\n            propagation: S.propagation,\n            trace: C.trace\n        };\n    })();\n    module.exports = r;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/chalk/index.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/compiled/chalk/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n(()=>{\n    var r = {\n        535: (r, e, n)=>{\n            \"use strict\";\n            r = n.nmd(r);\n            const t = n(54);\n            const wrapAnsi16 = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${n + e}m`;\n                };\n            const wrapAnsi256 = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${38 + e};5;${n}m`;\n                };\n            const wrapAnsi16m = (r, e)=>function() {\n                    const n = r.apply(t, arguments);\n                    return `\u001b[${38 + e};2;${n[0]};${n[1]};${n[2]}m`;\n                };\n            function assembleStyles() {\n                const r = new Map;\n                const e = {\n                    modifier: {\n                        reset: [\n                            0,\n                            0\n                        ],\n                        bold: [\n                            1,\n                            22\n                        ],\n                        dim: [\n                            2,\n                            22\n                        ],\n                        italic: [\n                            3,\n                            23\n                        ],\n                        underline: [\n                            4,\n                            24\n                        ],\n                        inverse: [\n                            7,\n                            27\n                        ],\n                        hidden: [\n                            8,\n                            28\n                        ],\n                        strikethrough: [\n                            9,\n                            29\n                        ]\n                    },\n                    color: {\n                        black: [\n                            30,\n                            39\n                        ],\n                        red: [\n                            31,\n                            39\n                        ],\n                        green: [\n                            32,\n                            39\n                        ],\n                        yellow: [\n                            33,\n                            39\n                        ],\n                        blue: [\n                            34,\n                            39\n                        ],\n                        magenta: [\n                            35,\n                            39\n                        ],\n                        cyan: [\n                            36,\n                            39\n                        ],\n                        white: [\n                            37,\n                            39\n                        ],\n                        gray: [\n                            90,\n                            39\n                        ],\n                        redBright: [\n                            91,\n                            39\n                        ],\n                        greenBright: [\n                            92,\n                            39\n                        ],\n                        yellowBright: [\n                            93,\n                            39\n                        ],\n                        blueBright: [\n                            94,\n                            39\n                        ],\n                        magentaBright: [\n                            95,\n                            39\n                        ],\n                        cyanBright: [\n                            96,\n                            39\n                        ],\n                        whiteBright: [\n                            97,\n                            39\n                        ]\n                    },\n                    bgColor: {\n                        bgBlack: [\n                            40,\n                            49\n                        ],\n                        bgRed: [\n                            41,\n                            49\n                        ],\n                        bgGreen: [\n                            42,\n                            49\n                        ],\n                        bgYellow: [\n                            43,\n                            49\n                        ],\n                        bgBlue: [\n                            44,\n                            49\n                        ],\n                        bgMagenta: [\n                            45,\n                            49\n                        ],\n                        bgCyan: [\n                            46,\n                            49\n                        ],\n                        bgWhite: [\n                            47,\n                            49\n                        ],\n                        bgBlackBright: [\n                            100,\n                            49\n                        ],\n                        bgRedBright: [\n                            101,\n                            49\n                        ],\n                        bgGreenBright: [\n                            102,\n                            49\n                        ],\n                        bgYellowBright: [\n                            103,\n                            49\n                        ],\n                        bgBlueBright: [\n                            104,\n                            49\n                        ],\n                        bgMagentaBright: [\n                            105,\n                            49\n                        ],\n                        bgCyanBright: [\n                            106,\n                            49\n                        ],\n                        bgWhiteBright: [\n                            107,\n                            49\n                        ]\n                    }\n                };\n                e.color.grey = e.color.gray;\n                for (const n of Object.keys(e)){\n                    const t = e[n];\n                    for (const n of Object.keys(t)){\n                        const a = t[n];\n                        e[n] = {\n                            open: `\u001b[${a[0]}m`,\n                            close: `\u001b[${a[1]}m`\n                        };\n                        t[n] = e[n];\n                        r.set(a[0], a[1]);\n                    }\n                    Object.defineProperty(e, n, {\n                        value: t,\n                        enumerable: false\n                    });\n                    Object.defineProperty(e, \"codes\", {\n                        value: r,\n                        enumerable: false\n                    });\n                }\n                const ansi2ansi = (r)=>r;\n                const rgb2rgb = (r, e, n)=>[\n                        r,\n                        e,\n                        n\n                    ];\n                e.color.close = \"\\x1b[39m\";\n                e.bgColor.close = \"\\x1b[49m\";\n                e.color.ansi = {\n                    ansi: wrapAnsi16(ansi2ansi, 0)\n                };\n                e.color.ansi256 = {\n                    ansi256: wrapAnsi256(ansi2ansi, 0)\n                };\n                e.color.ansi16m = {\n                    rgb: wrapAnsi16m(rgb2rgb, 0)\n                };\n                e.bgColor.ansi = {\n                    ansi: wrapAnsi16(ansi2ansi, 10)\n                };\n                e.bgColor.ansi256 = {\n                    ansi256: wrapAnsi256(ansi2ansi, 10)\n                };\n                e.bgColor.ansi16m = {\n                    rgb: wrapAnsi16m(rgb2rgb, 10)\n                };\n                for (let r of Object.keys(t)){\n                    if (typeof t[r] !== \"object\") {\n                        continue;\n                    }\n                    const n = t[r];\n                    if (r === \"ansi16\") {\n                        r = \"ansi\";\n                    }\n                    if (\"ansi16\" in n) {\n                        e.color.ansi[r] = wrapAnsi16(n.ansi16, 0);\n                        e.bgColor.ansi[r] = wrapAnsi16(n.ansi16, 10);\n                    }\n                    if (\"ansi256\" in n) {\n                        e.color.ansi256[r] = wrapAnsi256(n.ansi256, 0);\n                        e.bgColor.ansi256[r] = wrapAnsi256(n.ansi256, 10);\n                    }\n                    if (\"rgb\" in n) {\n                        e.color.ansi16m[r] = wrapAnsi16m(n.rgb, 0);\n                        e.bgColor.ansi16m[r] = wrapAnsi16m(n.rgb, 10);\n                    }\n                }\n                return e;\n            }\n            Object.defineProperty(r, \"exports\", {\n                enumerable: true,\n                get: assembleStyles\n            });\n        },\n        148: (r, e, n)=>{\n            \"use strict\";\n            const t = n(379);\n            const a = n(535);\n            const o = n(220).stdout;\n            const s = n(299);\n            const l = process.platform === \"win32\" && !(process.env.TERM || \"\").toLowerCase().startsWith(\"xterm\");\n            const i = [\n                \"ansi\",\n                \"ansi\",\n                \"ansi256\",\n                \"ansi16m\"\n            ];\n            const c = new Set([\n                \"gray\"\n            ]);\n            const u = Object.create(null);\n            function applyOptions(r, e) {\n                e = e || {};\n                const n = o ? o.level : 0;\n                r.level = e.level === undefined ? n : e.level;\n                r.enabled = \"enabled\" in e ? e.enabled : r.level > 0;\n            }\n            function Chalk(r) {\n                if (!this || !(this instanceof Chalk) || this.template) {\n                    const e = {};\n                    applyOptions(e, r);\n                    e.template = function() {\n                        const r = [].slice.call(arguments);\n                        return chalkTag.apply(null, [\n                            e.template\n                        ].concat(r));\n                    };\n                    Object.setPrototypeOf(e, Chalk.prototype);\n                    Object.setPrototypeOf(e.template, e);\n                    e.template.constructor = Chalk;\n                    return e.template;\n                }\n                applyOptions(this, r);\n            }\n            if (l) {\n                a.blue.open = \"\\x1b[94m\";\n            }\n            for (const r of Object.keys(a)){\n                a[r].closeRe = new RegExp(t(a[r].close), \"g\");\n                u[r] = {\n                    get () {\n                        const e = a[r];\n                        return build.call(this, this._styles ? this._styles.concat(e) : [\n                            e\n                        ], this._empty, r);\n                    }\n                };\n            }\n            u.visible = {\n                get () {\n                    return build.call(this, this._styles || [], true, \"visible\");\n                }\n            };\n            a.color.closeRe = new RegExp(t(a.color.close), \"g\");\n            for (const r of Object.keys(a.color.ansi)){\n                if (c.has(r)) {\n                    continue;\n                }\n                u[r] = {\n                    get () {\n                        const e = this.level;\n                        return function() {\n                            const n = a.color[i[e]][r].apply(null, arguments);\n                            const t = {\n                                open: n,\n                                close: a.color.close,\n                                closeRe: a.color.closeRe\n                            };\n                            return build.call(this, this._styles ? this._styles.concat(t) : [\n                                t\n                            ], this._empty, r);\n                        };\n                    }\n                };\n            }\n            a.bgColor.closeRe = new RegExp(t(a.bgColor.close), \"g\");\n            for (const r of Object.keys(a.bgColor.ansi)){\n                if (c.has(r)) {\n                    continue;\n                }\n                const e = \"bg\" + r[0].toUpperCase() + r.slice(1);\n                u[e] = {\n                    get () {\n                        const e = this.level;\n                        return function() {\n                            const n = a.bgColor[i[e]][r].apply(null, arguments);\n                            const t = {\n                                open: n,\n                                close: a.bgColor.close,\n                                closeRe: a.bgColor.closeRe\n                            };\n                            return build.call(this, this._styles ? this._styles.concat(t) : [\n                                t\n                            ], this._empty, r);\n                        };\n                    }\n                };\n            }\n            const v = Object.defineProperties(()=>{}, u);\n            function build(r, e, n) {\n                const builder = function() {\n                    return applyStyle.apply(builder, arguments);\n                };\n                builder._styles = r;\n                builder._empty = e;\n                const t = this;\n                Object.defineProperty(builder, \"level\", {\n                    enumerable: true,\n                    get () {\n                        return t.level;\n                    },\n                    set (r) {\n                        t.level = r;\n                    }\n                });\n                Object.defineProperty(builder, \"enabled\", {\n                    enumerable: true,\n                    get () {\n                        return t.enabled;\n                    },\n                    set (r) {\n                        t.enabled = r;\n                    }\n                });\n                builder.hasGrey = this.hasGrey || n === \"gray\" || n === \"grey\";\n                builder.__proto__ = v;\n                return builder;\n            }\n            function applyStyle() {\n                const r = arguments;\n                const e = r.length;\n                let n = String(arguments[0]);\n                if (e === 0) {\n                    return \"\";\n                }\n                if (e > 1) {\n                    for(let t = 1; t < e; t++){\n                        n += \" \" + r[t];\n                    }\n                }\n                if (!this.enabled || this.level <= 0 || !n) {\n                    return this._empty ? \"\" : n;\n                }\n                const t = a.dim.open;\n                if (l && this.hasGrey) {\n                    a.dim.open = \"\";\n                }\n                for (const r of this._styles.slice().reverse()){\n                    n = r.open + n.replace(r.closeRe, r.open) + r.close;\n                    n = n.replace(/\\r?\\n/g, `${r.close}$&${r.open}`);\n                }\n                a.dim.open = t;\n                return n;\n            }\n            function chalkTag(r, e) {\n                if (!Array.isArray(e)) {\n                    return [].slice.call(arguments, 1).join(\" \");\n                }\n                const n = [].slice.call(arguments, 2);\n                const t = [\n                    e.raw[0]\n                ];\n                for(let r = 1; r < e.length; r++){\n                    t.push(String(n[r - 1]).replace(/[{}\\\\]/g, \"\\\\$&\"));\n                    t.push(String(e.raw[r]));\n                }\n                return s(r, t.join(\"\"));\n            }\n            Object.defineProperties(Chalk.prototype, u);\n            r.exports = Chalk();\n            r.exports.supportsColor = o;\n            r.exports[\"default\"] = r.exports;\n        },\n        299: (r)=>{\n            \"use strict\";\n            const e = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\n            const n = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\n            const t = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\n            const a = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n            const o = new Map([\n                [\n                    \"n\",\n                    \"\\n\"\n                ],\n                [\n                    \"r\",\n                    \"\\r\"\n                ],\n                [\n                    \"t\",\n                    \"\t\"\n                ],\n                [\n                    \"b\",\n                    \"\\b\"\n                ],\n                [\n                    \"f\",\n                    \"\\f\"\n                ],\n                [\n                    \"v\",\n                    \"\\v\"\n                ],\n                [\n                    \"0\",\n                    \"\\x00\"\n                ],\n                [\n                    \"\\\\\",\n                    \"\\\\\"\n                ],\n                [\n                    \"e\",\n                    \"\\x1b\"\n                ],\n                [\n                    \"a\",\n                    \"\\x07\"\n                ]\n            ]);\n            function unescape(r) {\n                if (r[0] === \"u\" && r.length === 5 || r[0] === \"x\" && r.length === 3) {\n                    return String.fromCharCode(parseInt(r.slice(1), 16));\n                }\n                return o.get(r) || r;\n            }\n            function parseArguments(r, e) {\n                const n = [];\n                const o = e.trim().split(/\\s*,\\s*/g);\n                let s;\n                for (const e of o){\n                    if (!isNaN(e)) {\n                        n.push(Number(e));\n                    } else if (s = e.match(t)) {\n                        n.push(s[2].replace(a, (r, e, n)=>e ? unescape(e) : n));\n                    } else {\n                        throw new Error(`Invalid Chalk template style argument: ${e} (in style '${r}')`);\n                    }\n                }\n                return n;\n            }\n            function parseStyle(r) {\n                n.lastIndex = 0;\n                const e = [];\n                let t;\n                while((t = n.exec(r)) !== null){\n                    const r = t[1];\n                    if (t[2]) {\n                        const n = parseArguments(r, t[2]);\n                        e.push([\n                            r\n                        ].concat(n));\n                    } else {\n                        e.push([\n                            r\n                        ]);\n                    }\n                }\n                return e;\n            }\n            function buildStyle(r, e) {\n                const n = {};\n                for (const r of e){\n                    for (const e of r.styles){\n                        n[e[0]] = r.inverse ? null : e.slice(1);\n                    }\n                }\n                let t = r;\n                for (const r of Object.keys(n)){\n                    if (Array.isArray(n[r])) {\n                        if (!(r in t)) {\n                            throw new Error(`Unknown Chalk style: ${r}`);\n                        }\n                        if (n[r].length > 0) {\n                            t = t[r].apply(t, n[r]);\n                        } else {\n                            t = t[r];\n                        }\n                    }\n                }\n                return t;\n            }\n            r.exports = (r, n)=>{\n                const t = [];\n                const a = [];\n                let o = [];\n                n.replace(e, (e, n, s, l, i, c)=>{\n                    if (n) {\n                        o.push(unescape(n));\n                    } else if (l) {\n                        const e = o.join(\"\");\n                        o = [];\n                        a.push(t.length === 0 ? e : buildStyle(r, t)(e));\n                        t.push({\n                            inverse: s,\n                            styles: parseStyle(l)\n                        });\n                    } else if (i) {\n                        if (t.length === 0) {\n                            throw new Error(\"Found extraneous } in Chalk template literal\");\n                        }\n                        a.push(buildStyle(r, t)(o.join(\"\")));\n                        o = [];\n                        t.pop();\n                    } else {\n                        o.push(c);\n                    }\n                });\n                a.push(o.join(\"\"));\n                if (t.length > 0) {\n                    const r = `Chalk template literal is missing ${t.length} closing bracket${t.length === 1 ? \"\" : \"s\"} (\\`}\\`)`;\n                    throw new Error(r);\n                }\n                return a.join(\"\");\n            };\n        },\n        117: (r, e, n)=>{\n            var t = n(251);\n            var a = {};\n            for(var o in t){\n                if (t.hasOwnProperty(o)) {\n                    a[t[o]] = o;\n                }\n            }\n            var s = r.exports = {\n                rgb: {\n                    channels: 3,\n                    labels: \"rgb\"\n                },\n                hsl: {\n                    channels: 3,\n                    labels: \"hsl\"\n                },\n                hsv: {\n                    channels: 3,\n                    labels: \"hsv\"\n                },\n                hwb: {\n                    channels: 3,\n                    labels: \"hwb\"\n                },\n                cmyk: {\n                    channels: 4,\n                    labels: \"cmyk\"\n                },\n                xyz: {\n                    channels: 3,\n                    labels: \"xyz\"\n                },\n                lab: {\n                    channels: 3,\n                    labels: \"lab\"\n                },\n                lch: {\n                    channels: 3,\n                    labels: \"lch\"\n                },\n                hex: {\n                    channels: 1,\n                    labels: [\n                        \"hex\"\n                    ]\n                },\n                keyword: {\n                    channels: 1,\n                    labels: [\n                        \"keyword\"\n                    ]\n                },\n                ansi16: {\n                    channels: 1,\n                    labels: [\n                        \"ansi16\"\n                    ]\n                },\n                ansi256: {\n                    channels: 1,\n                    labels: [\n                        \"ansi256\"\n                    ]\n                },\n                hcg: {\n                    channels: 3,\n                    labels: [\n                        \"h\",\n                        \"c\",\n                        \"g\"\n                    ]\n                },\n                apple: {\n                    channels: 3,\n                    labels: [\n                        \"r16\",\n                        \"g16\",\n                        \"b16\"\n                    ]\n                },\n                gray: {\n                    channels: 1,\n                    labels: [\n                        \"gray\"\n                    ]\n                }\n            };\n            for(var l in s){\n                if (s.hasOwnProperty(l)) {\n                    if (!(\"channels\" in s[l])) {\n                        throw new Error(\"missing channels property: \" + l);\n                    }\n                    if (!(\"labels\" in s[l])) {\n                        throw new Error(\"missing channel labels property: \" + l);\n                    }\n                    if (s[l].labels.length !== s[l].channels) {\n                        throw new Error(\"channel and label counts mismatch: \" + l);\n                    }\n                    var i = s[l].channels;\n                    var c = s[l].labels;\n                    delete s[l].channels;\n                    delete s[l].labels;\n                    Object.defineProperty(s[l], \"channels\", {\n                        value: i\n                    });\n                    Object.defineProperty(s[l], \"labels\", {\n                        value: c\n                    });\n                }\n            }\n            s.rgb.hsl = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a = Math.min(e, n, t);\n                var o = Math.max(e, n, t);\n                var s = o - a;\n                var l;\n                var i;\n                var c;\n                if (o === a) {\n                    l = 0;\n                } else if (e === o) {\n                    l = (n - t) / s;\n                } else if (n === o) {\n                    l = 2 + (t - e) / s;\n                } else if (t === o) {\n                    l = 4 + (e - n) / s;\n                }\n                l = Math.min(l * 60, 360);\n                if (l < 0) {\n                    l += 360;\n                }\n                c = (a + o) / 2;\n                if (o === a) {\n                    i = 0;\n                } else if (c <= .5) {\n                    i = s / (o + a);\n                } else {\n                    i = s / (2 - o - a);\n                }\n                return [\n                    l,\n                    i * 100,\n                    c * 100\n                ];\n            };\n            s.rgb.hsv = function(r) {\n                var e;\n                var n;\n                var t;\n                var a;\n                var o;\n                var s = r[0] / 255;\n                var l = r[1] / 255;\n                var i = r[2] / 255;\n                var c = Math.max(s, l, i);\n                var u = c - Math.min(s, l, i);\n                var diffc = function(r) {\n                    return (c - r) / 6 / u + 1 / 2;\n                };\n                if (u === 0) {\n                    a = o = 0;\n                } else {\n                    o = u / c;\n                    e = diffc(s);\n                    n = diffc(l);\n                    t = diffc(i);\n                    if (s === c) {\n                        a = t - n;\n                    } else if (l === c) {\n                        a = 1 / 3 + e - t;\n                    } else if (i === c) {\n                        a = 2 / 3 + n - e;\n                    }\n                    if (a < 0) {\n                        a += 1;\n                    } else if (a > 1) {\n                        a -= 1;\n                    }\n                }\n                return [\n                    a * 360,\n                    o * 100,\n                    c * 100\n                ];\n            };\n            s.rgb.hwb = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a = s.rgb.hsl(r)[0];\n                var o = 1 / 255 * Math.min(e, Math.min(n, t));\n                t = 1 - 1 / 255 * Math.max(e, Math.max(n, t));\n                return [\n                    a,\n                    o * 100,\n                    t * 100\n                ];\n            };\n            s.rgb.cmyk = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a;\n                var o;\n                var s;\n                var l;\n                l = Math.min(1 - e, 1 - n, 1 - t);\n                a = (1 - e - l) / (1 - l) || 0;\n                o = (1 - n - l) / (1 - l) || 0;\n                s = (1 - t - l) / (1 - l) || 0;\n                return [\n                    a * 100,\n                    o * 100,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            function comparativeDistance(r, e) {\n                return Math.pow(r[0] - e[0], 2) + Math.pow(r[1] - e[1], 2) + Math.pow(r[2] - e[2], 2);\n            }\n            s.rgb.keyword = function(r) {\n                var e = a[r];\n                if (e) {\n                    return e;\n                }\n                var n = Infinity;\n                var o;\n                for(var s in t){\n                    if (t.hasOwnProperty(s)) {\n                        var l = t[s];\n                        var i = comparativeDistance(r, l);\n                        if (i < n) {\n                            n = i;\n                            o = s;\n                        }\n                    }\n                }\n                return o;\n            };\n            s.keyword.rgb = function(r) {\n                return t[r];\n            };\n            s.rgb.xyz = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                e = e > .04045 ? Math.pow((e + .055) / 1.055, 2.4) : e / 12.92;\n                n = n > .04045 ? Math.pow((n + .055) / 1.055, 2.4) : n / 12.92;\n                t = t > .04045 ? Math.pow((t + .055) / 1.055, 2.4) : t / 12.92;\n                var a = e * .4124 + n * .3576 + t * .1805;\n                var o = e * .2126 + n * .7152 + t * .0722;\n                var s = e * .0193 + n * .1192 + t * .9505;\n                return [\n                    a * 100,\n                    o * 100,\n                    s * 100\n                ];\n            };\n            s.rgb.lab = function(r) {\n                var e = s.rgb.xyz(r);\n                var n = e[0];\n                var t = e[1];\n                var a = e[2];\n                var o;\n                var l;\n                var i;\n                n /= 95.047;\n                t /= 100;\n                a /= 108.883;\n                n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116;\n                t = t > .008856 ? Math.pow(t, 1 / 3) : 7.787 * t + 16 / 116;\n                a = a > .008856 ? Math.pow(a, 1 / 3) : 7.787 * a + 16 / 116;\n                o = 116 * t - 16;\n                l = 500 * (n - t);\n                i = 200 * (t - a);\n                return [\n                    o,\n                    l,\n                    i\n                ];\n            };\n            s.hsl.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a;\n                var o;\n                var s;\n                var l;\n                var i;\n                if (n === 0) {\n                    i = t * 255;\n                    return [\n                        i,\n                        i,\n                        i\n                    ];\n                }\n                if (t < .5) {\n                    o = t * (1 + n);\n                } else {\n                    o = t + n - t * n;\n                }\n                a = 2 * t - o;\n                l = [\n                    0,\n                    0,\n                    0\n                ];\n                for(var c = 0; c < 3; c++){\n                    s = e + 1 / 3 * -(c - 1);\n                    if (s < 0) {\n                        s++;\n                    }\n                    if (s > 1) {\n                        s--;\n                    }\n                    if (6 * s < 1) {\n                        i = a + (o - a) * 6 * s;\n                    } else if (2 * s < 1) {\n                        i = o;\n                    } else if (3 * s < 2) {\n                        i = a + (o - a) * (2 / 3 - s) * 6;\n                    } else {\n                        i = a;\n                    }\n                    l[c] = i * 255;\n                }\n                return l;\n            };\n            s.hsl.hsv = function(r) {\n                var e = r[0];\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = n;\n                var o = Math.max(t, .01);\n                var s;\n                var l;\n                t *= 2;\n                n *= t <= 1 ? t : 2 - t;\n                a *= o <= 1 ? o : 2 - o;\n                l = (t + n) / 2;\n                s = t === 0 ? 2 * a / (o + a) : 2 * n / (t + n);\n                return [\n                    e,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hsv.rgb = function(r) {\n                var e = r[0] / 60;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = Math.floor(e) % 6;\n                var o = e - Math.floor(e);\n                var s = 255 * t * (1 - n);\n                var l = 255 * t * (1 - n * o);\n                var i = 255 * t * (1 - n * (1 - o));\n                t *= 255;\n                switch(a){\n                    case 0:\n                        return [\n                            t,\n                            i,\n                            s\n                        ];\n                    case 1:\n                        return [\n                            l,\n                            t,\n                            s\n                        ];\n                    case 2:\n                        return [\n                            s,\n                            t,\n                            i\n                        ];\n                    case 3:\n                        return [\n                            s,\n                            l,\n                            t\n                        ];\n                    case 4:\n                        return [\n                            i,\n                            s,\n                            t\n                        ];\n                    case 5:\n                        return [\n                            t,\n                            s,\n                            l\n                        ];\n                }\n            };\n            s.hsv.hsl = function(r) {\n                var e = r[0];\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = Math.max(t, .01);\n                var o;\n                var s;\n                var l;\n                l = (2 - n) * t;\n                o = (2 - n) * a;\n                s = n * a;\n                s /= o <= 1 ? o : 2 - o;\n                s = s || 0;\n                l /= 2;\n                return [\n                    e,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hwb.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = n + t;\n                var o;\n                var s;\n                var l;\n                var i;\n                if (a > 1) {\n                    n /= a;\n                    t /= a;\n                }\n                o = Math.floor(6 * e);\n                s = 1 - t;\n                l = 6 * e - o;\n                if ((o & 1) !== 0) {\n                    l = 1 - l;\n                }\n                i = n + l * (s - n);\n                var c;\n                var u;\n                var v;\n                switch(o){\n                    default:\n                    case 6:\n                    case 0:\n                        c = s;\n                        u = i;\n                        v = n;\n                        break;\n                    case 1:\n                        c = i;\n                        u = s;\n                        v = n;\n                        break;\n                    case 2:\n                        c = n;\n                        u = s;\n                        v = i;\n                        break;\n                    case 3:\n                        c = n;\n                        u = i;\n                        v = s;\n                        break;\n                    case 4:\n                        c = i;\n                        u = n;\n                        v = s;\n                        break;\n                    case 5:\n                        c = s;\n                        u = n;\n                        v = i;\n                        break;\n                }\n                return [\n                    c * 255,\n                    u * 255,\n                    v * 255\n                ];\n            };\n            s.cmyk.rgb = function(r) {\n                var e = r[0] / 100;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a = r[3] / 100;\n                var o;\n                var s;\n                var l;\n                o = 1 - Math.min(1, e * (1 - a) + a);\n                s = 1 - Math.min(1, n * (1 - a) + a);\n                l = 1 - Math.min(1, t * (1 - a) + a);\n                return [\n                    o * 255,\n                    s * 255,\n                    l * 255\n                ];\n            };\n            s.xyz.rgb = function(r) {\n                var e = r[0] / 100;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                var a;\n                var o;\n                var s;\n                a = e * 3.2406 + n * -1.5372 + t * -.4986;\n                o = e * -.9689 + n * 1.8758 + t * .0415;\n                s = e * .0557 + n * -.204 + t * 1.057;\n                a = a > .0031308 ? 1.055 * Math.pow(a, 1 / 2.4) - .055 : a * 12.92;\n                o = o > .0031308 ? 1.055 * Math.pow(o, 1 / 2.4) - .055 : o * 12.92;\n                s = s > .0031308 ? 1.055 * Math.pow(s, 1 / 2.4) - .055 : s * 12.92;\n                a = Math.min(Math.max(0, a), 1);\n                o = Math.min(Math.max(0, o), 1);\n                s = Math.min(Math.max(0, s), 1);\n                return [\n                    a * 255,\n                    o * 255,\n                    s * 255\n                ];\n            };\n            s.xyz.lab = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                e /= 95.047;\n                n /= 100;\n                t /= 108.883;\n                e = e > .008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116;\n                n = n > .008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116;\n                t = t > .008856 ? Math.pow(t, 1 / 3) : 7.787 * t + 16 / 116;\n                a = 116 * n - 16;\n                o = 500 * (e - n);\n                s = 200 * (n - t);\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.lab.xyz = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                o = (e + 16) / 116;\n                a = n / 500 + o;\n                s = o - t / 200;\n                var l = Math.pow(o, 3);\n                var i = Math.pow(a, 3);\n                var c = Math.pow(s, 3);\n                o = l > .008856 ? l : (o - 16 / 116) / 7.787;\n                a = i > .008856 ? i : (a - 16 / 116) / 7.787;\n                s = c > .008856 ? c : (s - 16 / 116) / 7.787;\n                a *= 95.047;\n                o *= 100;\n                s *= 108.883;\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.lab.lch = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                a = Math.atan2(t, n);\n                o = a * 360 / 2 / Math.PI;\n                if (o < 0) {\n                    o += 360;\n                }\n                s = Math.sqrt(n * n + t * t);\n                return [\n                    e,\n                    s,\n                    o\n                ];\n            };\n            s.lch.lab = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a;\n                var o;\n                var s;\n                s = t / 360 * 2 * Math.PI;\n                a = n * Math.cos(s);\n                o = n * Math.sin(s);\n                return [\n                    e,\n                    a,\n                    o\n                ];\n            };\n            s.rgb.ansi16 = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                var a = 1 in arguments ? arguments[1] : s.rgb.hsv(r)[2];\n                a = Math.round(a / 50);\n                if (a === 0) {\n                    return 30;\n                }\n                var o = 30 + (Math.round(t / 255) << 2 | Math.round(n / 255) << 1 | Math.round(e / 255));\n                if (a === 2) {\n                    o += 60;\n                }\n                return o;\n            };\n            s.hsv.ansi16 = function(r) {\n                return s.rgb.ansi16(s.hsv.rgb(r), r[2]);\n            };\n            s.rgb.ansi256 = function(r) {\n                var e = r[0];\n                var n = r[1];\n                var t = r[2];\n                if (e === n && n === t) {\n                    if (e < 8) {\n                        return 16;\n                    }\n                    if (e > 248) {\n                        return 231;\n                    }\n                    return Math.round((e - 8) / 247 * 24) + 232;\n                }\n                var a = 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(n / 255 * 5) + Math.round(t / 255 * 5);\n                return a;\n            };\n            s.ansi16.rgb = function(r) {\n                var e = r % 10;\n                if (e === 0 || e === 7) {\n                    if (r > 50) {\n                        e += 3.5;\n                    }\n                    e = e / 10.5 * 255;\n                    return [\n                        e,\n                        e,\n                        e\n                    ];\n                }\n                var n = (~~(r > 50) + 1) * .5;\n                var t = (e & 1) * n * 255;\n                var a = (e >> 1 & 1) * n * 255;\n                var o = (e >> 2 & 1) * n * 255;\n                return [\n                    t,\n                    a,\n                    o\n                ];\n            };\n            s.ansi256.rgb = function(r) {\n                if (r >= 232) {\n                    var e = (r - 232) * 10 + 8;\n                    return [\n                        e,\n                        e,\n                        e\n                    ];\n                }\n                r -= 16;\n                var n;\n                var t = Math.floor(r / 36) / 5 * 255;\n                var a = Math.floor((n = r % 36) / 6) / 5 * 255;\n                var o = n % 6 / 5 * 255;\n                return [\n                    t,\n                    a,\n                    o\n                ];\n            };\n            s.rgb.hex = function(r) {\n                var e = ((Math.round(r[0]) & 255) << 16) + ((Math.round(r[1]) & 255) << 8) + (Math.round(r[2]) & 255);\n                var n = e.toString(16).toUpperCase();\n                return \"000000\".substring(n.length) + n;\n            };\n            s.hex.rgb = function(r) {\n                var e = r.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n                if (!e) {\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                var n = e[0];\n                if (e[0].length === 3) {\n                    n = n.split(\"\").map(function(r) {\n                        return r + r;\n                    }).join(\"\");\n                }\n                var t = parseInt(n, 16);\n                var a = t >> 16 & 255;\n                var o = t >> 8 & 255;\n                var s = t & 255;\n                return [\n                    a,\n                    o,\n                    s\n                ];\n            };\n            s.rgb.hcg = function(r) {\n                var e = r[0] / 255;\n                var n = r[1] / 255;\n                var t = r[2] / 255;\n                var a = Math.max(Math.max(e, n), t);\n                var o = Math.min(Math.min(e, n), t);\n                var s = a - o;\n                var l;\n                var i;\n                if (s < 1) {\n                    l = o / (1 - s);\n                } else {\n                    l = 0;\n                }\n                if (s <= 0) {\n                    i = 0;\n                } else if (a === e) {\n                    i = (n - t) / s % 6;\n                } else if (a === n) {\n                    i = 2 + (t - e) / s;\n                } else {\n                    i = 4 + (e - n) / s + 4;\n                }\n                i /= 6;\n                i %= 1;\n                return [\n                    i * 360,\n                    s * 100,\n                    l * 100\n                ];\n            };\n            s.hsl.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = 1;\n                var a = 0;\n                if (n < .5) {\n                    t = 2 * e * n;\n                } else {\n                    t = 2 * e * (1 - n);\n                }\n                if (t < 1) {\n                    a = (n - .5 * t) / (1 - t);\n                }\n                return [\n                    r[0],\n                    t * 100,\n                    a * 100\n                ];\n            };\n            s.hsv.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e * n;\n                var a = 0;\n                if (t < 1) {\n                    a = (n - t) / (1 - t);\n                }\n                return [\n                    r[0],\n                    t * 100,\n                    a * 100\n                ];\n            };\n            s.hcg.rgb = function(r) {\n                var e = r[0] / 360;\n                var n = r[1] / 100;\n                var t = r[2] / 100;\n                if (n === 0) {\n                    return [\n                        t * 255,\n                        t * 255,\n                        t * 255\n                    ];\n                }\n                var a = [\n                    0,\n                    0,\n                    0\n                ];\n                var o = e % 1 * 6;\n                var s = o % 1;\n                var l = 1 - s;\n                var i = 0;\n                switch(Math.floor(o)){\n                    case 0:\n                        a[0] = 1;\n                        a[1] = s;\n                        a[2] = 0;\n                        break;\n                    case 1:\n                        a[0] = l;\n                        a[1] = 1;\n                        a[2] = 0;\n                        break;\n                    case 2:\n                        a[0] = 0;\n                        a[1] = 1;\n                        a[2] = s;\n                        break;\n                    case 3:\n                        a[0] = 0;\n                        a[1] = l;\n                        a[2] = 1;\n                        break;\n                    case 4:\n                        a[0] = s;\n                        a[1] = 0;\n                        a[2] = 1;\n                        break;\n                    default:\n                        a[0] = 1;\n                        a[1] = 0;\n                        a[2] = l;\n                }\n                i = (1 - n) * t;\n                return [\n                    (n * a[0] + i) * 255,\n                    (n * a[1] + i) * 255,\n                    (n * a[2] + i) * 255\n                ];\n            };\n            s.hcg.hsv = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e + n * (1 - e);\n                var a = 0;\n                if (t > 0) {\n                    a = e / t;\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    t * 100\n                ];\n            };\n            s.hcg.hsl = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = n * (1 - e) + .5 * e;\n                var a = 0;\n                if (t > 0 && t < .5) {\n                    a = e / (2 * t);\n                } else if (t >= .5 && t < 1) {\n                    a = e / (2 * (1 - t));\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    t * 100\n                ];\n            };\n            s.hcg.hwb = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = e + n * (1 - e);\n                return [\n                    r[0],\n                    (t - e) * 100,\n                    (1 - t) * 100\n                ];\n            };\n            s.hwb.hcg = function(r) {\n                var e = r[1] / 100;\n                var n = r[2] / 100;\n                var t = 1 - n;\n                var a = t - e;\n                var o = 0;\n                if (a < 1) {\n                    o = (t - a) / (1 - a);\n                }\n                return [\n                    r[0],\n                    a * 100,\n                    o * 100\n                ];\n            };\n            s.apple.rgb = function(r) {\n                return [\n                    r[0] / 65535 * 255,\n                    r[1] / 65535 * 255,\n                    r[2] / 65535 * 255\n                ];\n            };\n            s.rgb.apple = function(r) {\n                return [\n                    r[0] / 255 * 65535,\n                    r[1] / 255 * 65535,\n                    r[2] / 255 * 65535\n                ];\n            };\n            s.gray.rgb = function(r) {\n                return [\n                    r[0] / 100 * 255,\n                    r[0] / 100 * 255,\n                    r[0] / 100 * 255\n                ];\n            };\n            s.gray.hsl = s.gray.hsv = function(r) {\n                return [\n                    0,\n                    0,\n                    r[0]\n                ];\n            };\n            s.gray.hwb = function(r) {\n                return [\n                    0,\n                    100,\n                    r[0]\n                ];\n            };\n            s.gray.cmyk = function(r) {\n                return [\n                    0,\n                    0,\n                    0,\n                    r[0]\n                ];\n            };\n            s.gray.lab = function(r) {\n                return [\n                    r[0],\n                    0,\n                    0\n                ];\n            };\n            s.gray.hex = function(r) {\n                var e = Math.round(r[0] / 100 * 255) & 255;\n                var n = (e << 16) + (e << 8) + e;\n                var t = n.toString(16).toUpperCase();\n                return \"000000\".substring(t.length) + t;\n            };\n            s.rgb.gray = function(r) {\n                var e = (r[0] + r[1] + r[2]) / 3;\n                return [\n                    e / 255 * 100\n                ];\n            };\n        },\n        54: (r, e, n)=>{\n            var t = n(117);\n            var a = n(528);\n            var o = {};\n            var s = Object.keys(t);\n            function wrapRaw(r) {\n                var wrappedFn = function(e) {\n                    if (e === undefined || e === null) {\n                        return e;\n                    }\n                    if (arguments.length > 1) {\n                        e = Array.prototype.slice.call(arguments);\n                    }\n                    return r(e);\n                };\n                if (\"conversion\" in r) {\n                    wrappedFn.conversion = r.conversion;\n                }\n                return wrappedFn;\n            }\n            function wrapRounded(r) {\n                var wrappedFn = function(e) {\n                    if (e === undefined || e === null) {\n                        return e;\n                    }\n                    if (arguments.length > 1) {\n                        e = Array.prototype.slice.call(arguments);\n                    }\n                    var n = r(e);\n                    if (typeof n === \"object\") {\n                        for(var t = n.length, a = 0; a < t; a++){\n                            n[a] = Math.round(n[a]);\n                        }\n                    }\n                    return n;\n                };\n                if (\"conversion\" in r) {\n                    wrappedFn.conversion = r.conversion;\n                }\n                return wrappedFn;\n            }\n            s.forEach(function(r) {\n                o[r] = {};\n                Object.defineProperty(o[r], \"channels\", {\n                    value: t[r].channels\n                });\n                Object.defineProperty(o[r], \"labels\", {\n                    value: t[r].labels\n                });\n                var e = a(r);\n                var n = Object.keys(e);\n                n.forEach(function(n) {\n                    var t = e[n];\n                    o[r][n] = wrapRounded(t);\n                    o[r][n].raw = wrapRaw(t);\n                });\n            });\n            r.exports = o;\n        },\n        528: (r, e, n)=>{\n            var t = n(117);\n            function buildGraph() {\n                var r = {};\n                var e = Object.keys(t);\n                for(var n = e.length, a = 0; a < n; a++){\n                    r[e[a]] = {\n                        distance: -1,\n                        parent: null\n                    };\n                }\n                return r;\n            }\n            function deriveBFS(r) {\n                var e = buildGraph();\n                var n = [\n                    r\n                ];\n                e[r].distance = 0;\n                while(n.length){\n                    var a = n.pop();\n                    var o = Object.keys(t[a]);\n                    for(var s = o.length, l = 0; l < s; l++){\n                        var i = o[l];\n                        var c = e[i];\n                        if (c.distance === -1) {\n                            c.distance = e[a].distance + 1;\n                            c.parent = a;\n                            n.unshift(i);\n                        }\n                    }\n                }\n                return e;\n            }\n            function link(r, e) {\n                return function(n) {\n                    return e(r(n));\n                };\n            }\n            function wrapConversion(r, e) {\n                var n = [\n                    e[r].parent,\n                    r\n                ];\n                var a = t[e[r].parent][r];\n                var o = e[r].parent;\n                while(e[o].parent){\n                    n.unshift(e[o].parent);\n                    a = link(t[e[o].parent][o], a);\n                    o = e[o].parent;\n                }\n                a.conversion = n;\n                return a;\n            }\n            r.exports = function(r) {\n                var e = deriveBFS(r);\n                var n = {};\n                var t = Object.keys(e);\n                for(var a = t.length, o = 0; o < a; o++){\n                    var s = t[o];\n                    var l = e[s];\n                    if (l.parent === null) {\n                        continue;\n                    }\n                    n[s] = wrapConversion(s, e);\n                }\n                return n;\n            };\n        },\n        251: (r)=>{\n            \"use strict\";\n            r.exports = {\n                aliceblue: [\n                    240,\n                    248,\n                    255\n                ],\n                antiquewhite: [\n                    250,\n                    235,\n                    215\n                ],\n                aqua: [\n                    0,\n                    255,\n                    255\n                ],\n                aquamarine: [\n                    127,\n                    255,\n                    212\n                ],\n                azure: [\n                    240,\n                    255,\n                    255\n                ],\n                beige: [\n                    245,\n                    245,\n                    220\n                ],\n                bisque: [\n                    255,\n                    228,\n                    196\n                ],\n                black: [\n                    0,\n                    0,\n                    0\n                ],\n                blanchedalmond: [\n                    255,\n                    235,\n                    205\n                ],\n                blue: [\n                    0,\n                    0,\n                    255\n                ],\n                blueviolet: [\n                    138,\n                    43,\n                    226\n                ],\n                brown: [\n                    165,\n                    42,\n                    42\n                ],\n                burlywood: [\n                    222,\n                    184,\n                    135\n                ],\n                cadetblue: [\n                    95,\n                    158,\n                    160\n                ],\n                chartreuse: [\n                    127,\n                    255,\n                    0\n                ],\n                chocolate: [\n                    210,\n                    105,\n                    30\n                ],\n                coral: [\n                    255,\n                    127,\n                    80\n                ],\n                cornflowerblue: [\n                    100,\n                    149,\n                    237\n                ],\n                cornsilk: [\n                    255,\n                    248,\n                    220\n                ],\n                crimson: [\n                    220,\n                    20,\n                    60\n                ],\n                cyan: [\n                    0,\n                    255,\n                    255\n                ],\n                darkblue: [\n                    0,\n                    0,\n                    139\n                ],\n                darkcyan: [\n                    0,\n                    139,\n                    139\n                ],\n                darkgoldenrod: [\n                    184,\n                    134,\n                    11\n                ],\n                darkgray: [\n                    169,\n                    169,\n                    169\n                ],\n                darkgreen: [\n                    0,\n                    100,\n                    0\n                ],\n                darkgrey: [\n                    169,\n                    169,\n                    169\n                ],\n                darkkhaki: [\n                    189,\n                    183,\n                    107\n                ],\n                darkmagenta: [\n                    139,\n                    0,\n                    139\n                ],\n                darkolivegreen: [\n                    85,\n                    107,\n                    47\n                ],\n                darkorange: [\n                    255,\n                    140,\n                    0\n                ],\n                darkorchid: [\n                    153,\n                    50,\n                    204\n                ],\n                darkred: [\n                    139,\n                    0,\n                    0\n                ],\n                darksalmon: [\n                    233,\n                    150,\n                    122\n                ],\n                darkseagreen: [\n                    143,\n                    188,\n                    143\n                ],\n                darkslateblue: [\n                    72,\n                    61,\n                    139\n                ],\n                darkslategray: [\n                    47,\n                    79,\n                    79\n                ],\n                darkslategrey: [\n                    47,\n                    79,\n                    79\n                ],\n                darkturquoise: [\n                    0,\n                    206,\n                    209\n                ],\n                darkviolet: [\n                    148,\n                    0,\n                    211\n                ],\n                deeppink: [\n                    255,\n                    20,\n                    147\n                ],\n                deepskyblue: [\n                    0,\n                    191,\n                    255\n                ],\n                dimgray: [\n                    105,\n                    105,\n                    105\n                ],\n                dimgrey: [\n                    105,\n                    105,\n                    105\n                ],\n                dodgerblue: [\n                    30,\n                    144,\n                    255\n                ],\n                firebrick: [\n                    178,\n                    34,\n                    34\n                ],\n                floralwhite: [\n                    255,\n                    250,\n                    240\n                ],\n                forestgreen: [\n                    34,\n                    139,\n                    34\n                ],\n                fuchsia: [\n                    255,\n                    0,\n                    255\n                ],\n                gainsboro: [\n                    220,\n                    220,\n                    220\n                ],\n                ghostwhite: [\n                    248,\n                    248,\n                    255\n                ],\n                gold: [\n                    255,\n                    215,\n                    0\n                ],\n                goldenrod: [\n                    218,\n                    165,\n                    32\n                ],\n                gray: [\n                    128,\n                    128,\n                    128\n                ],\n                green: [\n                    0,\n                    128,\n                    0\n                ],\n                greenyellow: [\n                    173,\n                    255,\n                    47\n                ],\n                grey: [\n                    128,\n                    128,\n                    128\n                ],\n                honeydew: [\n                    240,\n                    255,\n                    240\n                ],\n                hotpink: [\n                    255,\n                    105,\n                    180\n                ],\n                indianred: [\n                    205,\n                    92,\n                    92\n                ],\n                indigo: [\n                    75,\n                    0,\n                    130\n                ],\n                ivory: [\n                    255,\n                    255,\n                    240\n                ],\n                khaki: [\n                    240,\n                    230,\n                    140\n                ],\n                lavender: [\n                    230,\n                    230,\n                    250\n                ],\n                lavenderblush: [\n                    255,\n                    240,\n                    245\n                ],\n                lawngreen: [\n                    124,\n                    252,\n                    0\n                ],\n                lemonchiffon: [\n                    255,\n                    250,\n                    205\n                ],\n                lightblue: [\n                    173,\n                    216,\n                    230\n                ],\n                lightcoral: [\n                    240,\n                    128,\n                    128\n                ],\n                lightcyan: [\n                    224,\n                    255,\n                    255\n                ],\n                lightgoldenrodyellow: [\n                    250,\n                    250,\n                    210\n                ],\n                lightgray: [\n                    211,\n                    211,\n                    211\n                ],\n                lightgreen: [\n                    144,\n                    238,\n                    144\n                ],\n                lightgrey: [\n                    211,\n                    211,\n                    211\n                ],\n                lightpink: [\n                    255,\n                    182,\n                    193\n                ],\n                lightsalmon: [\n                    255,\n                    160,\n                    122\n                ],\n                lightseagreen: [\n                    32,\n                    178,\n                    170\n                ],\n                lightskyblue: [\n                    135,\n                    206,\n                    250\n                ],\n                lightslategray: [\n                    119,\n                    136,\n                    153\n                ],\n                lightslategrey: [\n                    119,\n                    136,\n                    153\n                ],\n                lightsteelblue: [\n                    176,\n                    196,\n                    222\n                ],\n                lightyellow: [\n                    255,\n                    255,\n                    224\n                ],\n                lime: [\n                    0,\n                    255,\n                    0\n                ],\n                limegreen: [\n                    50,\n                    205,\n                    50\n                ],\n                linen: [\n                    250,\n                    240,\n                    230\n                ],\n                magenta: [\n                    255,\n                    0,\n                    255\n                ],\n                maroon: [\n                    128,\n                    0,\n                    0\n                ],\n                mediumaquamarine: [\n                    102,\n                    205,\n                    170\n                ],\n                mediumblue: [\n                    0,\n                    0,\n                    205\n                ],\n                mediumorchid: [\n                    186,\n                    85,\n                    211\n                ],\n                mediumpurple: [\n                    147,\n                    112,\n                    219\n                ],\n                mediumseagreen: [\n                    60,\n                    179,\n                    113\n                ],\n                mediumslateblue: [\n                    123,\n                    104,\n                    238\n                ],\n                mediumspringgreen: [\n                    0,\n                    250,\n                    154\n                ],\n                mediumturquoise: [\n                    72,\n                    209,\n                    204\n                ],\n                mediumvioletred: [\n                    199,\n                    21,\n                    133\n                ],\n                midnightblue: [\n                    25,\n                    25,\n                    112\n                ],\n                mintcream: [\n                    245,\n                    255,\n                    250\n                ],\n                mistyrose: [\n                    255,\n                    228,\n                    225\n                ],\n                moccasin: [\n                    255,\n                    228,\n                    181\n                ],\n                navajowhite: [\n                    255,\n                    222,\n                    173\n                ],\n                navy: [\n                    0,\n                    0,\n                    128\n                ],\n                oldlace: [\n                    253,\n                    245,\n                    230\n                ],\n                olive: [\n                    128,\n                    128,\n                    0\n                ],\n                olivedrab: [\n                    107,\n                    142,\n                    35\n                ],\n                orange: [\n                    255,\n                    165,\n                    0\n                ],\n                orangered: [\n                    255,\n                    69,\n                    0\n                ],\n                orchid: [\n                    218,\n                    112,\n                    214\n                ],\n                palegoldenrod: [\n                    238,\n                    232,\n                    170\n                ],\n                palegreen: [\n                    152,\n                    251,\n                    152\n                ],\n                paleturquoise: [\n                    175,\n                    238,\n                    238\n                ],\n                palevioletred: [\n                    219,\n                    112,\n                    147\n                ],\n                papayawhip: [\n                    255,\n                    239,\n                    213\n                ],\n                peachpuff: [\n                    255,\n                    218,\n                    185\n                ],\n                peru: [\n                    205,\n                    133,\n                    63\n                ],\n                pink: [\n                    255,\n                    192,\n                    203\n                ],\n                plum: [\n                    221,\n                    160,\n                    221\n                ],\n                powderblue: [\n                    176,\n                    224,\n                    230\n                ],\n                purple: [\n                    128,\n                    0,\n                    128\n                ],\n                rebeccapurple: [\n                    102,\n                    51,\n                    153\n                ],\n                red: [\n                    255,\n                    0,\n                    0\n                ],\n                rosybrown: [\n                    188,\n                    143,\n                    143\n                ],\n                royalblue: [\n                    65,\n                    105,\n                    225\n                ],\n                saddlebrown: [\n                    139,\n                    69,\n                    19\n                ],\n                salmon: [\n                    250,\n                    128,\n                    114\n                ],\n                sandybrown: [\n                    244,\n                    164,\n                    96\n                ],\n                seagreen: [\n                    46,\n                    139,\n                    87\n                ],\n                seashell: [\n                    255,\n                    245,\n                    238\n                ],\n                sienna: [\n                    160,\n                    82,\n                    45\n                ],\n                silver: [\n                    192,\n                    192,\n                    192\n                ],\n                skyblue: [\n                    135,\n                    206,\n                    235\n                ],\n                slateblue: [\n                    106,\n                    90,\n                    205\n                ],\n                slategray: [\n                    112,\n                    128,\n                    144\n                ],\n                slategrey: [\n                    112,\n                    128,\n                    144\n                ],\n                snow: [\n                    255,\n                    250,\n                    250\n                ],\n                springgreen: [\n                    0,\n                    255,\n                    127\n                ],\n                steelblue: [\n                    70,\n                    130,\n                    180\n                ],\n                tan: [\n                    210,\n                    180,\n                    140\n                ],\n                teal: [\n                    0,\n                    128,\n                    128\n                ],\n                thistle: [\n                    216,\n                    191,\n                    216\n                ],\n                tomato: [\n                    255,\n                    99,\n                    71\n                ],\n                turquoise: [\n                    64,\n                    224,\n                    208\n                ],\n                violet: [\n                    238,\n                    130,\n                    238\n                ],\n                wheat: [\n                    245,\n                    222,\n                    179\n                ],\n                white: [\n                    255,\n                    255,\n                    255\n                ],\n                whitesmoke: [\n                    245,\n                    245,\n                    245\n                ],\n                yellow: [\n                    255,\n                    255,\n                    0\n                ],\n                yellowgreen: [\n                    154,\n                    205,\n                    50\n                ]\n            };\n        },\n        379: (r)=>{\n            \"use strict\";\n            var e = /[|\\\\{}()[\\]^$+*?.]/g;\n            r.exports = function(r) {\n                if (typeof r !== \"string\") {\n                    throw new TypeError(\"Expected a string\");\n                }\n                return r.replace(e, \"\\\\$&\");\n            };\n        },\n        343: (r)=>{\n            \"use strict\";\n            r.exports = (r, e)=>{\n                e = e || process.argv;\n                const n = r.startsWith(\"-\") ? \"\" : r.length === 1 ? \"-\" : \"--\";\n                const t = e.indexOf(n + r);\n                const a = e.indexOf(\"--\");\n                return t !== -1 && (a === -1 ? true : t < a);\n            };\n        },\n        220: (r, e, n)=>{\n            \"use strict\";\n            const t = n(37);\n            const a = n(343);\n            const o = process.env;\n            let s;\n            if (a(\"no-color\") || a(\"no-colors\") || a(\"color=false\")) {\n                s = false;\n            } else if (a(\"color\") || a(\"colors\") || a(\"color=true\") || a(\"color=always\")) {\n                s = true;\n            }\n            if (\"FORCE_COLOR\" in o) {\n                s = o.FORCE_COLOR.length === 0 || parseInt(o.FORCE_COLOR, 10) !== 0;\n            }\n            function translateLevel(r) {\n                if (r === 0) {\n                    return false;\n                }\n                return {\n                    level: r,\n                    hasBasic: true,\n                    has256: r >= 2,\n                    has16m: r >= 3\n                };\n            }\n            function supportsColor(r) {\n                if (s === false) {\n                    return 0;\n                }\n                if (a(\"color=16m\") || a(\"color=full\") || a(\"color=truecolor\")) {\n                    return 3;\n                }\n                if (a(\"color=256\")) {\n                    return 2;\n                }\n                if (r && !r.isTTY && s !== true) {\n                    return 0;\n                }\n                const e = s ? 1 : 0;\n                if (process.platform === \"win32\") {\n                    const r = t.release().split(\".\");\n                    if (Number(process.versions.node.split(\".\")[0]) >= 8 && Number(r[0]) >= 10 && Number(r[2]) >= 10586) {\n                        return Number(r[2]) >= 14931 ? 3 : 2;\n                    }\n                    return 1;\n                }\n                if (\"CI\" in o) {\n                    if ([\n                        \"TRAVIS\",\n                        \"CIRCLECI\",\n                        \"APPVEYOR\",\n                        \"GITLAB_CI\"\n                    ].some((r)=>r in o) || o.CI_NAME === \"codeship\") {\n                        return 1;\n                    }\n                    return e;\n                }\n                if (\"TEAMCITY_VERSION\" in o) {\n                    return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(o.TEAMCITY_VERSION) ? 1 : 0;\n                }\n                if (o.COLORTERM === \"truecolor\") {\n                    return 3;\n                }\n                if (\"TERM_PROGRAM\" in o) {\n                    const r = parseInt((o.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n                    switch(o.TERM_PROGRAM){\n                        case \"iTerm.app\":\n                            return r >= 3 ? 3 : 2;\n                        case \"Apple_Terminal\":\n                            return 2;\n                    }\n                }\n                if (/-256(color)?$/i.test(o.TERM)) {\n                    return 2;\n                }\n                if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(o.TERM)) {\n                    return 1;\n                }\n                if (\"COLORTERM\" in o) {\n                    return 1;\n                }\n                if (o.TERM === \"dumb\") {\n                    return e;\n                }\n                return e;\n            }\n            function getSupportLevel(r) {\n                const e = supportsColor(r);\n                return translateLevel(e);\n            }\n            r.exports = {\n                supportsColor: getSupportLevel,\n                stdout: getSupportLevel(process.stdout),\n                stderr: getSupportLevel(process.stderr)\n            };\n        },\n        37: (r)=>{\n            \"use strict\";\n            r.exports = __webpack_require__(/*! os */ \"os\");\n        }\n    };\n    var e = {};\n    function __nccwpck_require__(n) {\n        var t = e[n];\n        if (t !== undefined) {\n            return t.exports;\n        }\n        var a = e[n] = {\n            id: n,\n            loaded: false,\n            exports: {}\n        };\n        var o = true;\n        try {\n            r[n](a, a.exports, __nccwpck_require__);\n            o = false;\n        } finally{\n            if (o) delete e[n];\n        }\n        a.loaded = true;\n        return a.exports;\n    }\n    (()=>{\n        __nccwpck_require__.nmd = (r)=>{\n            r.paths = [];\n            if (!r.children) r.children = [];\n            return r;\n        };\n    })();\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var n = __nccwpck_require__(148);\n    module.exports = n;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/chalk/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/compiled/cookie/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/cookie/index.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n(()=>{\n    \"use strict\";\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var e = {};\n    (()=>{\n        var r = e;\n        /*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */ r.parse = parse;\n        r.serialize = serialize;\n        var i = decodeURIComponent;\n        var t = encodeURIComponent;\n        var a = /; */;\n        var n = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n        function parse(e, r) {\n            if (typeof e !== \"string\") {\n                throw new TypeError(\"argument str must be a string\");\n            }\n            var t = {};\n            var n = r || {};\n            var o = e.split(a);\n            var s = n.decode || i;\n            for(var p = 0; p < o.length; p++){\n                var f = o[p];\n                var u = f.indexOf(\"=\");\n                if (u < 0) {\n                    continue;\n                }\n                var v = f.substr(0, u).trim();\n                var c = f.substr(++u, f.length).trim();\n                if ('\"' == c[0]) {\n                    c = c.slice(1, -1);\n                }\n                if (undefined == t[v]) {\n                    t[v] = tryDecode(c, s);\n                }\n            }\n            return t;\n        }\n        function serialize(e, r, i) {\n            var a = i || {};\n            var o = a.encode || t;\n            if (typeof o !== \"function\") {\n                throw new TypeError(\"option encode is invalid\");\n            }\n            if (!n.test(e)) {\n                throw new TypeError(\"argument name is invalid\");\n            }\n            var s = o(r);\n            if (s && !n.test(s)) {\n                throw new TypeError(\"argument val is invalid\");\n            }\n            var p = e + \"=\" + s;\n            if (null != a.maxAge) {\n                var f = a.maxAge - 0;\n                if (isNaN(f) || !isFinite(f)) {\n                    throw new TypeError(\"option maxAge is invalid\");\n                }\n                p += \"; Max-Age=\" + Math.floor(f);\n            }\n            if (a.domain) {\n                if (!n.test(a.domain)) {\n                    throw new TypeError(\"option domain is invalid\");\n                }\n                p += \"; Domain=\" + a.domain;\n            }\n            if (a.path) {\n                if (!n.test(a.path)) {\n                    throw new TypeError(\"option path is invalid\");\n                }\n                p += \"; Path=\" + a.path;\n            }\n            if (a.expires) {\n                if (typeof a.expires.toUTCString !== \"function\") {\n                    throw new TypeError(\"option expires is invalid\");\n                }\n                p += \"; Expires=\" + a.expires.toUTCString();\n            }\n            if (a.httpOnly) {\n                p += \"; HttpOnly\";\n            }\n            if (a.secure) {\n                p += \"; Secure\";\n            }\n            if (a.sameSite) {\n                var u = typeof a.sameSite === \"string\" ? a.sameSite.toLowerCase() : a.sameSite;\n                switch(u){\n                    case true:\n                        p += \"; SameSite=Strict\";\n                        break;\n                    case \"lax\":\n                        p += \"; SameSite=Lax\";\n                        break;\n                    case \"strict\":\n                        p += \"; SameSite=Strict\";\n                        break;\n                    case \"none\":\n                        p += \"; SameSite=None\";\n                        break;\n                    default:\n                        throw new TypeError(\"option sameSite is invalid\");\n                }\n            }\n            return p;\n        }\n        function tryDecode(e, r) {\n            try {\n                return r(e);\n            } catch (r) {\n                return e;\n            }\n        }\n    })();\n    module.exports = e;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL2Nvb2tpZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUM7SUFBSztJQUFhLElBQUcsT0FBT0Esd0JBQXNCLGFBQVlBLG9CQUFvQkMsRUFBRSxHQUFDQyxZQUFVO0lBQUksSUFBSUMsSUFBRSxDQUFDO0lBQUc7UUFBSyxJQUFJQyxJQUFFRDtRQUN6SDs7Ozs7Q0FLQyxHQUFFQyxFQUFFQyxLQUFLLEdBQUNBO1FBQU1ELEVBQUVFLFNBQVMsR0FBQ0E7UUFBVSxJQUFJQyxJQUFFQztRQUFtQixJQUFJQyxJQUFFQztRQUFtQixJQUFJQyxJQUFFO1FBQU0sSUFBSUMsSUFBRTtRQUF3QyxTQUFTUCxNQUFNRixDQUFDLEVBQUNDLENBQUM7WUFBRSxJQUFHLE9BQU9ELE1BQUksVUFBUztnQkFBQyxNQUFNLElBQUlVLFVBQVU7WUFBZ0M7WUFBQyxJQUFJSixJQUFFLENBQUM7WUFBRSxJQUFJRyxJQUFFUixLQUFHLENBQUM7WUFBRSxJQUFJVSxJQUFFWCxFQUFFWSxLQUFLLENBQUNKO1lBQUcsSUFBSUssSUFBRUosRUFBRUssTUFBTSxJQUFFVjtZQUFFLElBQUksSUFBSVcsSUFBRSxHQUFFQSxJQUFFSixFQUFFSyxNQUFNLEVBQUNELElBQUk7Z0JBQUMsSUFBSUUsSUFBRU4sQ0FBQyxDQUFDSSxFQUFFO2dCQUFDLElBQUlHLElBQUVELEVBQUVFLE9BQU8sQ0FBQztnQkFBSyxJQUFHRCxJQUFFLEdBQUU7b0JBQUM7Z0JBQVE7Z0JBQUMsSUFBSUUsSUFBRUgsRUFBRUksTUFBTSxDQUFDLEdBQUVILEdBQUdJLElBQUk7Z0JBQUcsSUFBSUMsSUFBRU4sRUFBRUksTUFBTSxDQUFDLEVBQUVILEdBQUVELEVBQUVELE1BQU0sRUFBRU0sSUFBSTtnQkFBRyxJQUFHLE9BQUtDLENBQUMsQ0FBQyxFQUFFLEVBQUM7b0JBQUNBLElBQUVBLEVBQUVDLEtBQUssQ0FBQyxHQUFFLENBQUM7Z0JBQUU7Z0JBQUMsSUFBR0MsYUFBV25CLENBQUMsQ0FBQ2MsRUFBRSxFQUFDO29CQUFDZCxDQUFDLENBQUNjLEVBQUUsR0FBQ00sVUFBVUgsR0FBRVY7Z0JBQUU7WUFBQztZQUFDLE9BQU9QO1FBQUM7UUFBQyxTQUFTSCxVQUFVSCxDQUFDLEVBQUNDLENBQUMsRUFBQ0csQ0FBQztZQUFFLElBQUlJLElBQUVKLEtBQUcsQ0FBQztZQUFFLElBQUlPLElBQUVILEVBQUVtQixNQUFNLElBQUVyQjtZQUFFLElBQUcsT0FBT0ssTUFBSSxZQUFXO2dCQUFDLE1BQU0sSUFBSUQsVUFBVTtZQUEyQjtZQUFDLElBQUcsQ0FBQ0QsRUFBRW1CLElBQUksQ0FBQzVCLElBQUc7Z0JBQUMsTUFBTSxJQUFJVSxVQUFVO1lBQTJCO1lBQUMsSUFBSUcsSUFBRUYsRUFBRVY7WUFBRyxJQUFHWSxLQUFHLENBQUNKLEVBQUVtQixJQUFJLENBQUNmLElBQUc7Z0JBQUMsTUFBTSxJQUFJSCxVQUFVO1lBQTBCO1lBQUMsSUFBSUssSUFBRWYsSUFBRSxNQUFJYTtZQUFFLElBQUcsUUFBTUwsRUFBRXFCLE1BQU0sRUFBQztnQkFBQyxJQUFJWixJQUFFVCxFQUFFcUIsTUFBTSxHQUFDO2dCQUFFLElBQUdDLE1BQU1iLE1BQUksQ0FBQ2MsU0FBU2QsSUFBRztvQkFBQyxNQUFNLElBQUlQLFVBQVU7Z0JBQTJCO2dCQUFDSyxLQUFHLGVBQWFpQixLQUFLQyxLQUFLLENBQUNoQjtZQUFFO1lBQUMsSUFBR1QsRUFBRTBCLE1BQU0sRUFBQztnQkFBQyxJQUFHLENBQUN6QixFQUFFbUIsSUFBSSxDQUFDcEIsRUFBRTBCLE1BQU0sR0FBRTtvQkFBQyxNQUFNLElBQUl4QixVQUFVO2dCQUEyQjtnQkFBQ0ssS0FBRyxjQUFZUCxFQUFFMEIsTUFBTTtZQUFBO1lBQUMsSUFBRzFCLEVBQUUyQixJQUFJLEVBQUM7Z0JBQUMsSUFBRyxDQUFDMUIsRUFBRW1CLElBQUksQ0FBQ3BCLEVBQUUyQixJQUFJLEdBQUU7b0JBQUMsTUFBTSxJQUFJekIsVUFBVTtnQkFBeUI7Z0JBQUNLLEtBQUcsWUFBVVAsRUFBRTJCLElBQUk7WUFBQTtZQUFDLElBQUczQixFQUFFNEIsT0FBTyxFQUFDO2dCQUFDLElBQUcsT0FBTzVCLEVBQUU0QixPQUFPLENBQUNDLFdBQVcsS0FBRyxZQUFXO29CQUFDLE1BQU0sSUFBSTNCLFVBQVU7Z0JBQTRCO2dCQUFDSyxLQUFHLGVBQWFQLEVBQUU0QixPQUFPLENBQUNDLFdBQVc7WUFBRTtZQUFDLElBQUc3QixFQUFFOEIsUUFBUSxFQUFDO2dCQUFDdkIsS0FBRztZQUFZO1lBQUMsSUFBR1AsRUFBRStCLE1BQU0sRUFBQztnQkFBQ3hCLEtBQUc7WUFBVTtZQUFDLElBQUdQLEVBQUVnQyxRQUFRLEVBQUM7Z0JBQUMsSUFBSXRCLElBQUUsT0FBT1YsRUFBRWdDLFFBQVEsS0FBRyxXQUFTaEMsRUFBRWdDLFFBQVEsQ0FBQ0MsV0FBVyxLQUFHakMsRUFBRWdDLFFBQVE7Z0JBQUMsT0FBT3RCO29CQUFHLEtBQUs7d0JBQUtILEtBQUc7d0JBQW9CO29CQUFNLEtBQUk7d0JBQU1BLEtBQUc7d0JBQWlCO29CQUFNLEtBQUk7d0JBQVNBLEtBQUc7d0JBQW9CO29CQUFNLEtBQUk7d0JBQU9BLEtBQUc7d0JBQWtCO29CQUFNO3dCQUFRLE1BQU0sSUFBSUwsVUFBVTtnQkFBNkI7WUFBQztZQUFDLE9BQU9LO1FBQUM7UUFBQyxTQUFTVyxVQUFVMUIsQ0FBQyxFQUFDQyxDQUFDO1lBQUUsSUFBRztnQkFBQyxPQUFPQSxFQUFFRDtZQUFFLEVBQUMsT0FBTUMsR0FBRTtnQkFBQyxPQUFPRDtZQUFDO1FBQUM7SUFBQztJQUFLMEMsT0FBT0MsT0FBTyxHQUFDM0M7QUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvY29va2llL2luZGV4LmpzP2IyNWUiXSwic291cmNlc0NvbnRlbnQiOlsiKCgpPT57XCJ1c2Ugc3RyaWN0XCI7aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciBlPXt9OygoKT0+e3ZhciByPWU7XG4vKiFcbiAqIGNvb2tpZVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBSb21hbiBTaHR5bG1hblxuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovci5wYXJzZT1wYXJzZTtyLnNlcmlhbGl6ZT1zZXJpYWxpemU7dmFyIGk9ZGVjb2RlVVJJQ29tcG9uZW50O3ZhciB0PWVuY29kZVVSSUNvbXBvbmVudDt2YXIgYT0vOyAqLzt2YXIgbj0vXltcXHUwMDA5XFx1MDAyMC1cXHUwMDdlXFx1MDA4MC1cXHUwMGZmXSskLztmdW5jdGlvbiBwYXJzZShlLHIpe2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IHN0ciBtdXN0IGJlIGEgc3RyaW5nXCIpfXZhciB0PXt9O3ZhciBuPXJ8fHt9O3ZhciBvPWUuc3BsaXQoYSk7dmFyIHM9bi5kZWNvZGV8fGk7Zm9yKHZhciBwPTA7cDxvLmxlbmd0aDtwKyspe3ZhciBmPW9bcF07dmFyIHU9Zi5pbmRleE9mKFwiPVwiKTtpZih1PDApe2NvbnRpbnVlfXZhciB2PWYuc3Vic3RyKDAsdSkudHJpbSgpO3ZhciBjPWYuc3Vic3RyKCsrdSxmLmxlbmd0aCkudHJpbSgpO2lmKCdcIic9PWNbMF0pe2M9Yy5zbGljZSgxLC0xKX1pZih1bmRlZmluZWQ9PXRbdl0pe3Rbdl09dHJ5RGVjb2RlKGMscyl9fXJldHVybiB0fWZ1bmN0aW9uIHNlcmlhbGl6ZShlLHIsaSl7dmFyIGE9aXx8e307dmFyIG89YS5lbmNvZGV8fHQ7aWYodHlwZW9mIG8hPT1cImZ1bmN0aW9uXCIpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJvcHRpb24gZW5jb2RlIGlzIGludmFsaWRcIil9aWYoIW4udGVzdChlKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcImFyZ3VtZW50IG5hbWUgaXMgaW52YWxpZFwiKX12YXIgcz1vKHIpO2lmKHMmJiFuLnRlc3Qocykpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCB2YWwgaXMgaW52YWxpZFwiKX12YXIgcD1lK1wiPVwiK3M7aWYobnVsbCE9YS5tYXhBZ2Upe3ZhciBmPWEubWF4QWdlLTA7aWYoaXNOYU4oZil8fCFpc0Zpbml0ZShmKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBtYXhBZ2UgaXMgaW52YWxpZFwiKX1wKz1cIjsgTWF4LUFnZT1cIitNYXRoLmZsb29yKGYpfWlmKGEuZG9tYWluKXtpZighbi50ZXN0KGEuZG9tYWluKSl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBkb21haW4gaXMgaW52YWxpZFwiKX1wKz1cIjsgRG9tYWluPVwiK2EuZG9tYWlufWlmKGEucGF0aCl7aWYoIW4udGVzdChhLnBhdGgpKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIHBhdGggaXMgaW52YWxpZFwiKX1wKz1cIjsgUGF0aD1cIithLnBhdGh9aWYoYS5leHBpcmVzKXtpZih0eXBlb2YgYS5leHBpcmVzLnRvVVRDU3RyaW5nIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwib3B0aW9uIGV4cGlyZXMgaXMgaW52YWxpZFwiKX1wKz1cIjsgRXhwaXJlcz1cIithLmV4cGlyZXMudG9VVENTdHJpbmcoKX1pZihhLmh0dHBPbmx5KXtwKz1cIjsgSHR0cE9ubHlcIn1pZihhLnNlY3VyZSl7cCs9XCI7IFNlY3VyZVwifWlmKGEuc2FtZVNpdGUpe3ZhciB1PXR5cGVvZiBhLnNhbWVTaXRlPT09XCJzdHJpbmdcIj9hLnNhbWVTaXRlLnRvTG93ZXJDYXNlKCk6YS5zYW1lU2l0ZTtzd2l0Y2godSl7Y2FzZSB0cnVlOnArPVwiOyBTYW1lU2l0ZT1TdHJpY3RcIjticmVhaztjYXNlXCJsYXhcIjpwKz1cIjsgU2FtZVNpdGU9TGF4XCI7YnJlYWs7Y2FzZVwic3RyaWN0XCI6cCs9XCI7IFNhbWVTaXRlPVN0cmljdFwiO2JyZWFrO2Nhc2VcIm5vbmVcIjpwKz1cIjsgU2FtZVNpdGU9Tm9uZVwiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihcIm9wdGlvbiBzYW1lU2l0ZSBpcyBpbnZhbGlkXCIpfX1yZXR1cm4gcH1mdW5jdGlvbiB0cnlEZWNvZGUoZSxyKXt0cnl7cmV0dXJuIHIoZSl9Y2F0Y2gocil7cmV0dXJuIGV9fX0pKCk7bW9kdWxlLmV4cG9ydHM9ZX0pKCk7Il0sIm5hbWVzIjpbIl9fbmNjd3Bja19yZXF1aXJlX18iLCJhYiIsIl9fZGlybmFtZSIsImUiLCJyIiwicGFyc2UiLCJzZXJpYWxpemUiLCJpIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidCIsImVuY29kZVVSSUNvbXBvbmVudCIsImEiLCJuIiwiVHlwZUVycm9yIiwibyIsInNwbGl0IiwicyIsImRlY29kZSIsInAiLCJsZW5ndGgiLCJmIiwidSIsImluZGV4T2YiLCJ2Iiwic3Vic3RyIiwidHJpbSIsImMiLCJzbGljZSIsInVuZGVmaW5lZCIsInRyeURlY29kZSIsImVuY29kZSIsInRlc3QiLCJtYXhBZ2UiLCJpc05hTiIsImlzRmluaXRlIiwiTWF0aCIsImZsb29yIiwiZG9tYWluIiwicGF0aCIsImV4cGlyZXMiLCJ0b1VUQ1N0cmluZyIsImh0dHBPbmx5Iiwic2VjdXJlIiwic2FtZVNpdGUiLCJ0b0xvd2VyQ2FzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/compiled/cookie/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/lib/chalk.js":
/*!*********************************************!*\
  !*** ./node_modules/next/dist/lib/chalk.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nlet chalk;\nif (false) {} else {\n    chalk = __webpack_require__(/*! next/dist/compiled/chalk */ \"(rsc)/./node_modules/next/dist/compiled/chalk/index.js\");\n}\nconst _default = chalk; //# sourceMappingURL=chalk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2xpYi9jaGFsay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMkNBQTBDO0lBQ3RDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsSUFBSUM7QUFDSixJQUFJQyxLQUFtQyxFQUFFLEVBRXhDLE1BQU07SUFDSEQsUUFBUUksbUJBQU9BLENBQUMsd0ZBQTBCO0FBQzlDO0FBQ0EsTUFBTUwsV0FBV0MsT0FFakIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9saWIvY2hhbGsuanM/NTQ5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZhdWx0O1xuICAgIH1cbn0pO1xubGV0IGNoYWxrO1xuaWYgKHByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA9PT0gXCJlZGdlXCIpIHtcbiAgICBjaGFsayA9IHJlcXVpcmUoXCIuL3dlYi9jaGFsa1wiKS5kZWZhdWx0O1xufSBlbHNlIHtcbiAgICBjaGFsayA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvY2hhbGtcIik7XG59XG5jb25zdCBfZGVmYXVsdCA9IGNoYWxrO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFsay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2RlZmF1bHQiLCJjaGFsayIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1JVTlRJTUUiLCJyZXF1aXJlIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/lib/chalk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/lib/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/lib/constants.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NEXT_QUERY_PARAM_PREFIX: function() {\n        return NEXT_QUERY_PARAM_PREFIX;\n    },\n    PRERENDER_REVALIDATE_HEADER: function() {\n        return PRERENDER_REVALIDATE_HEADER;\n    },\n    PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER: function() {\n        return PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER;\n    },\n    CACHE_ONE_YEAR: function() {\n        return CACHE_ONE_YEAR;\n    },\n    MIDDLEWARE_FILENAME: function() {\n        return MIDDLEWARE_FILENAME;\n    },\n    MIDDLEWARE_LOCATION_REGEXP: function() {\n        return MIDDLEWARE_LOCATION_REGEXP;\n    },\n    INSTRUMENTATION_HOOK_FILENAME: function() {\n        return INSTRUMENTATION_HOOK_FILENAME;\n    },\n    PAGES_DIR_ALIAS: function() {\n        return PAGES_DIR_ALIAS;\n    },\n    DOT_NEXT_ALIAS: function() {\n        return DOT_NEXT_ALIAS;\n    },\n    ROOT_DIR_ALIAS: function() {\n        return ROOT_DIR_ALIAS;\n    },\n    APP_DIR_ALIAS: function() {\n        return APP_DIR_ALIAS;\n    },\n    RSC_MOD_REF_PROXY_ALIAS: function() {\n        return RSC_MOD_REF_PROXY_ALIAS;\n    },\n    RSC_ACTION_VALIDATE_ALIAS: function() {\n        return RSC_ACTION_VALIDATE_ALIAS;\n    },\n    RSC_ACTION_PROXY_ALIAS: function() {\n        return RSC_ACTION_PROXY_ALIAS;\n    },\n    RSC_ACTION_CLIENT_WRAPPER_ALIAS: function() {\n        return RSC_ACTION_CLIENT_WRAPPER_ALIAS;\n    },\n    PUBLIC_DIR_MIDDLEWARE_CONFLICT: function() {\n        return PUBLIC_DIR_MIDDLEWARE_CONFLICT;\n    },\n    SSG_GET_INITIAL_PROPS_CONFLICT: function() {\n        return SSG_GET_INITIAL_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_GET_INIT_PROPS_CONFLICT: function() {\n        return SERVER_PROPS_GET_INIT_PROPS_CONFLICT;\n    },\n    SERVER_PROPS_SSG_CONFLICT: function() {\n        return SERVER_PROPS_SSG_CONFLICT;\n    },\n    STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR: function() {\n        return STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR;\n    },\n    SERVER_PROPS_EXPORT_ERROR: function() {\n        return SERVER_PROPS_EXPORT_ERROR;\n    },\n    GSP_NO_RETURNED_VALUE: function() {\n        return GSP_NO_RETURNED_VALUE;\n    },\n    GSSP_NO_RETURNED_VALUE: function() {\n        return GSSP_NO_RETURNED_VALUE;\n    },\n    UNSTABLE_REVALIDATE_RENAME_ERROR: function() {\n        return UNSTABLE_REVALIDATE_RENAME_ERROR;\n    },\n    GSSP_COMPONENT_MEMBER_ERROR: function() {\n        return GSSP_COMPONENT_MEMBER_ERROR;\n    },\n    NON_STANDARD_NODE_ENV: function() {\n        return NON_STANDARD_NODE_ENV;\n    },\n    SSG_FALLBACK_EXPORT_ERROR: function() {\n        return SSG_FALLBACK_EXPORT_ERROR;\n    },\n    ESLINT_DEFAULT_DIRS: function() {\n        return ESLINT_DEFAULT_DIRS;\n    },\n    ESLINT_DEFAULT_DIRS_WITH_APP: function() {\n        return ESLINT_DEFAULT_DIRS_WITH_APP;\n    },\n    ESLINT_PROMPT_VALUES: function() {\n        return ESLINT_PROMPT_VALUES;\n    },\n    SERVER_RUNTIME: function() {\n        return SERVER_RUNTIME;\n    },\n    WEBPACK_LAYERS: function() {\n        return WEBPACK_LAYERS;\n    },\n    WEBPACK_RESOURCE_QUERIES: function() {\n        return WEBPACK_RESOURCE_QUERIES;\n    }\n});\nconst NEXT_QUERY_PARAM_PREFIX = \"nxtP\";\nconst PRERENDER_REVALIDATE_HEADER = \"x-prerender-revalidate\";\nconst PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER = \"x-prerender-revalidate-if-generated\";\nconst CACHE_ONE_YEAR = 31536000;\nconst MIDDLEWARE_FILENAME = \"middleware\";\nconst MIDDLEWARE_LOCATION_REGEXP = `(?:src/)?${MIDDLEWARE_FILENAME}`;\nconst INSTRUMENTATION_HOOK_FILENAME = \"instrumentation\";\nconst PAGES_DIR_ALIAS = \"private-next-pages\";\nconst DOT_NEXT_ALIAS = \"private-dot-next\";\nconst ROOT_DIR_ALIAS = \"private-next-root-dir\";\nconst APP_DIR_ALIAS = \"private-next-app-dir\";\nconst RSC_MOD_REF_PROXY_ALIAS = \"next/dist/build/webpack/loaders/next-flight-loader/module-proxy\";\nconst RSC_ACTION_VALIDATE_ALIAS = \"private-next-rsc-action-validate\";\nconst RSC_ACTION_PROXY_ALIAS = \"private-next-rsc-action-proxy\";\nconst RSC_ACTION_CLIENT_WRAPPER_ALIAS = \"private-next-rsc-action-client-wrapper\";\nconst PUBLIC_DIR_MIDDLEWARE_CONFLICT = `You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict`;\nconst SSG_GET_INITIAL_PROPS_CONFLICT = `You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps`;\nconst SERVER_PROPS_GET_INIT_PROPS_CONFLICT = `You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.`;\nconst SERVER_PROPS_SSG_CONFLICT = `You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps`;\nconst STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR = `can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props`;\nconst SERVER_PROPS_EXPORT_ERROR = `pages with \\`getServerSideProps\\` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export`;\nconst GSP_NO_RETURNED_VALUE = \"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\";\nconst GSSP_NO_RETURNED_VALUE = \"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\";\nconst UNSTABLE_REVALIDATE_RENAME_ERROR = \"The `unstable_revalidate` property is available for general use.\\n\" + \"Please use `revalidate` instead.\";\nconst GSSP_COMPONENT_MEMBER_ERROR = `can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member`;\nconst NON_STANDARD_NODE_ENV = `You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env`;\nconst SSG_FALLBACK_EXPORT_ERROR = `Pages with \\`fallback\\` enabled in \\`getStaticPaths\\` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export`;\nconst ESLINT_DEFAULT_DIRS = [\n    \"pages\",\n    \"components\",\n    \"lib\",\n    \"src\"\n];\nconst ESLINT_DEFAULT_DIRS_WITH_APP = [\n    \"app\",\n    ...ESLINT_DEFAULT_DIRS\n];\nconst ESLINT_PROMPT_VALUES = [\n    {\n        title: \"Strict\",\n        recommended: true,\n        config: {\n            extends: \"next/core-web-vitals\"\n        }\n    },\n    {\n        title: \"Base\",\n        config: {\n            extends: \"next\"\n        }\n    },\n    {\n        title: \"Cancel\",\n        config: null\n    }\n];\nconst SERVER_RUNTIME = {\n    edge: \"edge\",\n    experimentalEdge: \"experimental-edge\",\n    nodejs: \"nodejs\"\n};\n/**\n * The names of the webpack layers. These layers are the primitives for the\n * webpack chunks.\n */ const WEBPACK_LAYERS_NAMES = {\n    /**\n   * The layer for the shared code between the client and server bundles.\n   */ shared: \"shared\",\n    /**\n   * React Server Components layer (rsc).\n   */ reactServerComponents: \"rsc\",\n    /**\n   * Server Side Rendering layer (ssr).\n   */ serverSideRendering: \"ssr\",\n    /**\n   * The browser client bundle layer for actions.\n   */ actionBrowser: \"actionBrowser\",\n    /**\n   * The layer for the API routes.\n   */ api: \"api\",\n    /**\n   * The layer for the middleware code.\n   */ middleware: \"middleware\",\n    /**\n   * The layer for assets on the edge.\n   */ edgeAsset: \"edge-asset\",\n    /**\n   * The browser client bundle layer for App directory.\n   */ appPagesBrowser: \"app-pages-browser\",\n    /**\n   * The server bundle layer for metadata routes.\n   */ appMetadataRoute: \"app-metadata-route\"\n};\nconst WEBPACK_LAYERS = {\n    ...WEBPACK_LAYERS_NAMES,\n    GROUP: {\n        server: [\n            WEBPACK_LAYERS_NAMES.reactServerComponents,\n            WEBPACK_LAYERS_NAMES.actionBrowser,\n            WEBPACK_LAYERS_NAMES.appMetadataRoute\n        ]\n    }\n};\nconst WEBPACK_RESOURCE_QUERIES = {\n    edgeSSREntry: \"__next_edge_ssr_entry__\",\n    metadata: \"__next_metadata__\",\n    metadataRoute: \"__next_metadata_route__\",\n    metadataImageMeta: \"__next_metadata_image_meta__\"\n}; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/lib/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/api-utils/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/server/api-utils/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getCookieParser: function() {\n        return getCookieParser;\n    },\n    sendStatusCode: function() {\n        return sendStatusCode;\n    },\n    redirect: function() {\n        return redirect;\n    },\n    checkIsOnDemandRevalidate: function() {\n        return checkIsOnDemandRevalidate;\n    },\n    COOKIE_NAME_PRERENDER_BYPASS: function() {\n        return COOKIE_NAME_PRERENDER_BYPASS;\n    },\n    COOKIE_NAME_PRERENDER_DATA: function() {\n        return COOKIE_NAME_PRERENDER_DATA;\n    },\n    RESPONSE_LIMIT_DEFAULT: function() {\n        return RESPONSE_LIMIT_DEFAULT;\n    },\n    SYMBOL_PREVIEW_DATA: function() {\n        return SYMBOL_PREVIEW_DATA;\n    },\n    SYMBOL_CLEARED_COOKIES: function() {\n        return SYMBOL_CLEARED_COOKIES;\n    },\n    clearPreviewData: function() {\n        return clearPreviewData;\n    },\n    ApiError: function() {\n        return ApiError;\n    },\n    sendError: function() {\n        return sendError;\n    },\n    setLazyProp: function() {\n        return setLazyProp;\n    }\n});\nconst _headers = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _constants = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\nfunction getCookieParser(headers) {\n    return function parseCookie() {\n        const { cookie } = headers;\n        if (!cookie) {\n            return {};\n        }\n        const { parse: parseCookieFn } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(rsc)/./node_modules/next/dist/compiled/cookie/index.js\");\n        return parseCookieFn(Array.isArray(cookie) ? cookie.join(\"; \") : cookie);\n    };\n}\nfunction sendStatusCode(res, statusCode) {\n    res.statusCode = statusCode;\n    return res;\n}\nfunction redirect(res, statusOrUrl, url) {\n    if (typeof statusOrUrl === \"string\") {\n        url = statusOrUrl;\n        statusOrUrl = 307;\n    }\n    if (typeof statusOrUrl !== \"number\" || typeof url !== \"string\") {\n        throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n    }\n    res.writeHead(statusOrUrl, {\n        Location: url\n    });\n    res.write(url);\n    res.end();\n    return res;\n}\nfunction checkIsOnDemandRevalidate(req, previewProps) {\n    const headers = _headers.HeadersAdapter.from(req.headers);\n    const previewModeId = headers.get(_constants.PRERENDER_REVALIDATE_HEADER);\n    const isOnDemandRevalidate = previewModeId === previewProps.previewModeId;\n    const revalidateOnlyGenerated = headers.has(_constants.PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER);\n    return {\n        isOnDemandRevalidate,\n        revalidateOnlyGenerated\n    };\n}\nconst COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`;\nconst COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`;\nconst RESPONSE_LIMIT_DEFAULT = 4 * 1024 * 1024;\nconst SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA);\nconst SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS);\nfunction clearPreviewData(res, options = {}) {\n    if (SYMBOL_CLEARED_COOKIES in res) {\n        return res;\n    }\n    const { serialize } = __webpack_require__(/*! next/dist/compiled/cookie */ \"(rsc)/./node_modules/next/dist/compiled/cookie/index.js\");\n    const previous = res.getHeader(\"Set-Cookie\");\n    res.setHeader(`Set-Cookie`, [\n        ...typeof previous === \"string\" ? [\n            previous\n        ] : Array.isArray(previous) ? previous : [],\n        serialize(COOKIE_NAME_PRERENDER_BYPASS, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        }),\n        serialize(COOKIE_NAME_PRERENDER_DATA, \"\", {\n            // To delete a cookie, set `expires` to a date in the past:\n            // https://tools.ietf.org/html/rfc6265#section-4.1.1\n            // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n            expires: new Date(0),\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            ...options.path !== undefined ? {\n                path: options.path\n            } : undefined\n        })\n    ]);\n    Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n        value: true,\n        enumerable: false\n    });\n    return res;\n}\nclass ApiError extends Error {\n    constructor(statusCode, message){\n        super(message);\n        this.statusCode = statusCode;\n    }\n}\nfunction sendError(res, statusCode, message) {\n    res.statusCode = statusCode;\n    res.statusMessage = message;\n    res.end(message);\n}\nfunction setLazyProp({ req }, prop, getter) {\n    const opts = {\n        configurable: true,\n        enumerable: true\n    };\n    const optsReset = {\n        ...opts,\n        writable: true\n    };\n    Object.defineProperty(req, prop, {\n        ...opts,\n        get: ()=>{\n            const value = getter();\n            // we set the property on the object to avoid recalculating it\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n            return value;\n        },\n        set: (value)=>{\n            Object.defineProperty(req, prop, {\n                ...optsReset,\n                value\n            });\n        }\n    });\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/api-utils/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/draft-mode-provider.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"DraftModeProvider\", ({\n    enumerable: true,\n    get: function() {\n        return DraftModeProvider;\n    }\n}));\nconst _apiutils = __webpack_require__(/*! ../api-utils */ \"(rsc)/./node_modules/next/dist/server/api-utils/index.js\");\nclass DraftModeProvider {\n    constructor(previewProps, req, cookies, mutableCookies){\n        var _cookies_get;\n        // The logic for draftMode() is very similar to tryGetPreviewData()\n        // but Draft Mode does not have any data associated with it.\n        const isOnDemandRevalidate = previewProps && (0, _apiutils.checkIsOnDemandRevalidate)(req, previewProps).isOnDemandRevalidate;\n        const cookieValue = (_cookies_get = cookies.get(_apiutils.COOKIE_NAME_PRERENDER_BYPASS)) == null ? void 0 : _cookies_get.value;\n        this.isEnabled = Boolean(!isOnDemandRevalidate && cookieValue && previewProps && cookieValue === previewProps.previewModeId);\n        this._previewModeId = previewProps == null ? void 0 : previewProps.previewModeId;\n        this._mutableCookies = mutableCookies;\n    }\n    enable() {\n        if (!this._previewModeId) {\n            throw new Error(\"Invariant: previewProps missing previewModeId this should never happen\");\n        }\n        this._mutableCookies.set({\n            name: _apiutils.COOKIE_NAME_PRERENDER_BYPASS,\n            value: this._previewModeId,\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\"\n        });\n    }\n    disable() {\n        // To delete a cookie, set `expires` to a date in the past:\n        // https://tools.ietf.org/html/rfc6265#section-4.1.1\n        // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n        this._mutableCookies.set({\n            name: _apiutils.COOKIE_NAME_PRERENDER_BYPASS,\n            value: \"\",\n            httpOnly: true,\n            sameSite:  false ? 0 : \"lax\",\n            secure: \"development\" !== \"development\",\n            path: \"/\",\n            expires: new Date(0)\n        });\n    }\n} //# sourceMappingURL=draft-mode-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL2RyYWZ0LW1vZGUtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHFEQUFvRDtJQUNoREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLDhFQUFjO0FBQ3hDLE1BQU1GO0lBQ0ZHLFlBQVlDLFlBQVksRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEVBQUVDLGNBQWMsQ0FBQztRQUNuRCxJQUFJQztRQUNKLG1FQUFtRTtRQUNuRSw0REFBNEQ7UUFDNUQsTUFBTUMsdUJBQXVCTCxnQkFBZ0IsQ0FBQyxHQUFHSCxVQUFVUyx5QkFBeUIsRUFBRUwsS0FBS0QsY0FBY0ssb0JBQW9CO1FBQzdILE1BQU1FLGNBQWMsQ0FBQ0gsZUFBZUYsUUFBUVAsR0FBRyxDQUFDRSxVQUFVVyw0QkFBNEIsTUFBTSxPQUFPLEtBQUssSUFBSUosYUFBYVgsS0FBSztRQUM5SCxJQUFJLENBQUNnQixTQUFTLEdBQUdDLFFBQVEsQ0FBQ0wsd0JBQXdCRSxlQUFlUCxnQkFBZ0JPLGdCQUFnQlAsYUFBYVcsYUFBYTtRQUMzSCxJQUFJLENBQUNDLGNBQWMsR0FBR1osZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQSxhQUFhVyxhQUFhO1FBQ2hGLElBQUksQ0FBQ0UsZUFBZSxHQUFHVjtJQUMzQjtJQUNBVyxTQUFTO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQ0YsY0FBYyxFQUFFO1lBQ3RCLE1BQU0sSUFBSUcsTUFBTTtRQUNwQjtRQUNBLElBQUksQ0FBQ0YsZUFBZSxDQUFDRyxHQUFHLENBQUM7WUFDckJDLE1BQU1wQixVQUFVVyw0QkFBNEI7WUFDNUNmLE9BQU8sSUFBSSxDQUFDbUIsY0FBYztZQUMxQk0sVUFBVTtZQUNWQyxVQUFVQyxNQUFzQyxHQUFHLENBQU0sR0FBRztZQUM1REMsUUFBUUQsa0JBQXlCO1lBQ2pDRSxNQUFNO1FBQ1Y7SUFDSjtJQUNBQyxVQUFVO1FBQ04sMkRBQTJEO1FBQzNELG9EQUFvRDtRQUNwRCx3RUFBd0U7UUFDeEUsSUFBSSxDQUFDVixlQUFlLENBQUNHLEdBQUcsQ0FBQztZQUNyQkMsTUFBTXBCLFVBQVVXLDRCQUE0QjtZQUM1Q2YsT0FBTztZQUNQeUIsVUFBVTtZQUNWQyxVQUFVQyxNQUFzQyxHQUFHLENBQU0sR0FBRztZQUM1REMsUUFBUUQsa0JBQXlCO1lBQ2pDRSxNQUFNO1lBQ05FLFNBQVMsSUFBSUMsS0FBSztRQUN0QjtJQUNKO0FBQ0osRUFFQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL2RyYWZ0LW1vZGUtcHJvdmlkZXIuanM/ODdkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRyYWZ0TW9kZVByb3ZpZGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBEcmFmdE1vZGVQcm92aWRlcjtcbiAgICB9XG59KTtcbmNvbnN0IF9hcGl1dGlscyA9IHJlcXVpcmUoXCIuLi9hcGktdXRpbHNcIik7XG5jbGFzcyBEcmFmdE1vZGVQcm92aWRlciB7XG4gICAgY29uc3RydWN0b3IocHJldmlld1Byb3BzLCByZXEsIGNvb2tpZXMsIG11dGFibGVDb29raWVzKXtcbiAgICAgICAgdmFyIF9jb29raWVzX2dldDtcbiAgICAgICAgLy8gVGhlIGxvZ2ljIGZvciBkcmFmdE1vZGUoKSBpcyB2ZXJ5IHNpbWlsYXIgdG8gdHJ5R2V0UHJldmlld0RhdGEoKVxuICAgICAgICAvLyBidXQgRHJhZnQgTW9kZSBkb2VzIG5vdCBoYXZlIGFueSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICAgICAgY29uc3QgaXNPbkRlbWFuZFJldmFsaWRhdGUgPSBwcmV2aWV3UHJvcHMgJiYgKDAsIF9hcGl1dGlscy5jaGVja0lzT25EZW1hbmRSZXZhbGlkYXRlKShyZXEsIHByZXZpZXdQcm9wcykuaXNPbkRlbWFuZFJldmFsaWRhdGU7XG4gICAgICAgIGNvbnN0IGNvb2tpZVZhbHVlID0gKF9jb29raWVzX2dldCA9IGNvb2tpZXMuZ2V0KF9hcGl1dGlscy5DT09LSUVfTkFNRV9QUkVSRU5ERVJfQllQQVNTKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb29raWVzX2dldC52YWx1ZTtcbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBCb29sZWFuKCFpc09uRGVtYW5kUmV2YWxpZGF0ZSAmJiBjb29raWVWYWx1ZSAmJiBwcmV2aWV3UHJvcHMgJiYgY29va2llVmFsdWUgPT09IHByZXZpZXdQcm9wcy5wcmV2aWV3TW9kZUlkKTtcbiAgICAgICAgdGhpcy5fcHJldmlld01vZGVJZCA9IHByZXZpZXdQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogcHJldmlld1Byb3BzLnByZXZpZXdNb2RlSWQ7XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzID0gbXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wcmV2aWV3TW9kZUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IHByZXZpZXdQcm9wcyBtaXNzaW5nIHByZXZpZXdNb2RlSWQgdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX211dGFibGVDb29raWVzLnNldCh7XG4gICAgICAgICAgICBuYW1lOiBfYXBpdXRpbHMuQ09PS0lFX05BTUVfUFJFUkVOREVSX0JZUEFTUyxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLl9wcmV2aWV3TW9kZUlkLFxuICAgICAgICAgICAgaHR0cE9ubHk6IHRydWUsXG4gICAgICAgICAgICBzYW1lU2l0ZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIiA/IFwibm9uZVwiIDogXCJsYXhcIixcbiAgICAgICAgICAgIHNlY3VyZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL1wiXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICAvLyBUbyBkZWxldGUgYSBjb29raWUsIHNldCBgZXhwaXJlc2AgdG8gYSBkYXRlIGluIHRoZSBwYXN0OlxuICAgICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjI2NSNzZWN0aW9uLTQuMS4xXG4gICAgICAgIC8vIGBNYXgtQWdlOiAwYCBpcyBub3QgdmFsaWQsIHRodXMgaWdub3JlZCwgYW5kIHRoZSBjb29raWUgaXMgcGVyc2lzdGVkLlxuICAgICAgICB0aGlzLl9tdXRhYmxlQ29va2llcy5zZXQoe1xuICAgICAgICAgICAgbmFtZTogX2FwaXV0aWxzLkNPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MsXG4gICAgICAgICAgICB2YWx1ZTogXCJcIixcbiAgICAgICAgICAgIGh0dHBPbmx5OiB0cnVlLFxuICAgICAgICAgICAgc2FtZVNpdGU6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIgPyBcIm5vbmVcIiA6IFwibGF4XCIsXG4gICAgICAgICAgICBzZWN1cmU6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcImRldmVsb3BtZW50XCIsXG4gICAgICAgICAgICBwYXRoOiBcIi9cIixcbiAgICAgICAgICAgIGV4cGlyZXM6IG5ldyBEYXRlKDApXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZnQtbW9kZS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiRHJhZnRNb2RlUHJvdmlkZXIiLCJfYXBpdXRpbHMiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJwcmV2aWV3UHJvcHMiLCJyZXEiLCJjb29raWVzIiwibXV0YWJsZUNvb2tpZXMiLCJfY29va2llc19nZXQiLCJpc09uRGVtYW5kUmV2YWxpZGF0ZSIsImNoZWNrSXNPbkRlbWFuZFJldmFsaWRhdGUiLCJjb29raWVWYWx1ZSIsIkNPT0tJRV9OQU1FX1BSRVJFTkRFUl9CWVBBU1MiLCJpc0VuYWJsZWQiLCJCb29sZWFuIiwicHJldmlld01vZGVJZCIsIl9wcmV2aWV3TW9kZUlkIiwiX211dGFibGVDb29raWVzIiwiZW5hYmxlIiwiRXJyb3IiLCJzZXQiLCJuYW1lIiwiaHR0cE9ubHkiLCJzYW1lU2l0ZSIsInByb2Nlc3MiLCJzZWN1cmUiLCJwYXRoIiwiZGlzYWJsZSIsImV4cGlyZXMiLCJEYXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RequestAsyncStorageWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return RequestAsyncStorageWrapper;\n    }\n}));\nconst _approuterheaders = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(rsc)/./node_modules/next/dist/client/components/app-router-headers.js\");\nconst _headers = __webpack_require__(/*! ../web/spec-extension/adapters/headers */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\");\nconst _requestcookies = __webpack_require__(/*! ../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _cookies = __webpack_require__(/*! ../web/spec-extension/cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _draftmodeprovider = __webpack_require__(/*! ./draft-mode-provider */ \"(rsc)/./node_modules/next/dist/server/async-storage/draft-mode-provider.js\");\nfunction getHeaders(headers) {\n    const cleaned = _headers.HeadersAdapter.from(headers);\n    for (const param of _approuterheaders.FLIGHT_PARAMETERS){\n        cleaned.delete(param.toString().toLowerCase());\n    }\n    return _headers.HeadersAdapter.seal(cleaned);\n}\nfunction getCookies(headers) {\n    const cookies = new _cookies.RequestCookies(_headers.HeadersAdapter.from(headers));\n    return _requestcookies.RequestCookiesAdapter.seal(cookies);\n}\nfunction getMutableCookies(headers, onUpdateCookies) {\n    const cookies = new _cookies.RequestCookies(_headers.HeadersAdapter.from(headers));\n    return _requestcookies.MutableRequestCookiesAdapter.wrap(cookies, onUpdateCookies);\n}\nconst RequestAsyncStorageWrapper = {\n    /**\n   * Wrap the callback with the given store so it can access the underlying\n   * store using hooks.\n   *\n   * @param storage underlying storage object returned by the module\n   * @param context context to seed the store\n   * @param callback function to call within the scope of the context\n   * @returns the result returned by the callback\n   */ wrap (storage, { req, res, renderOpts }, callback) {\n        let previewProps = undefined;\n        if (renderOpts && \"previewProps\" in renderOpts) {\n            // TODO: investigate why previewProps isn't on RenderOpts\n            previewProps = renderOpts.previewProps;\n        }\n        function defaultOnUpdateCookies(cookies) {\n            if (res) {\n                res.setHeader(\"Set-Cookie\", cookies);\n            }\n        }\n        const cache = {};\n        const store = {\n            get headers () {\n                if (!cache.headers) {\n                    // Seal the headers object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.headers = getHeaders(req.headers);\n                }\n                return cache.headers;\n            },\n            get cookies () {\n                if (!cache.cookies) {\n                    // Seal the cookies object that'll freeze out any methods that could\n                    // mutate the underlying data.\n                    cache.cookies = getCookies(req.headers);\n                }\n                return cache.cookies;\n            },\n            get mutableCookies () {\n                if (!cache.mutableCookies) {\n                    cache.mutableCookies = getMutableCookies(req.headers, (renderOpts == null ? void 0 : renderOpts.onUpdateCookies) || (res ? defaultOnUpdateCookies : undefined));\n                }\n                return cache.mutableCookies;\n            },\n            get draftMode () {\n                if (!cache.draftMode) {\n                    cache.draftMode = new _draftmodeprovider.DraftModeProvider(previewProps, req, this.cookies, this.mutableCookies);\n                }\n                return cache.draftMode;\n            }\n        };\n        return storage.run(store, callback, store);\n    }\n}; //# sourceMappingURL=request-async-storage-wrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"StaticGenerationAsyncStorageWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return StaticGenerationAsyncStorageWrapper;\n    }\n}));\nconst StaticGenerationAsyncStorageWrapper = {\n    wrap (storage, { pathname, renderOpts }, callback) {\n        /**\n     * Rules of Static & Dynamic HTML:\n     *\n     *    1.) We must generate static HTML unless the caller explicitly opts\n     *        in to dynamic HTML support.\n     *\n     *    2.) If dynamic HTML support is requested, we must honor that request\n     *        or throw an error. It is the sole responsibility of the caller to\n     *        ensure they aren't e.g. requesting dynamic HTML for an AMP page.\n     *\n     *    3.) If the request is in draft mode, we must generate dynamic HTML.\n     *\n     * These rules help ensure that other existing features like request caching,\n     * coalescing, and ISR continue working as intended.\n     */ const isStaticGeneration = !renderOpts.supportsDynamicHTML && !renderOpts.isDraftMode;\n        const store = {\n            isStaticGeneration,\n            pathname,\n            originalPathname: renderOpts.originalPathname,\n            incrementalCache: // so that it can access the fs cache without mocks\n            renderOpts.incrementalCache || globalThis.__incrementalCache,\n            isRevalidate: renderOpts.isRevalidate,\n            isPrerendering: renderOpts.nextExport,\n            fetchCache: renderOpts.fetchCache,\n            isOnDemandRevalidate: renderOpts.isOnDemandRevalidate,\n            isDraftMode: renderOpts.isDraftMode\n        };\n        // TODO: remove this when we resolve accessing the store outside the execution context\n        renderOpts.store = store;\n        return storage.run(store, callback, store);\n    }\n}; //# sourceMappingURL=static-generation-async-storage-wrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9hc3luYy1zdG9yYWdlL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2Utd3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsdUVBQXNFO0lBQ2xFSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUEsc0NBQXNDO0lBQ3hDQyxNQUFNQyxPQUFPLEVBQUUsRUFBRUMsUUFBUSxFQUFHQyxVQUFVLEVBQUcsRUFBRUMsUUFBUTtRQUMvQzs7Ozs7Ozs7Ozs7Ozs7S0FjSCxHQUFHLE1BQU1DLHFCQUFxQixDQUFDRixXQUFXRyxtQkFBbUIsSUFBSSxDQUFDSCxXQUFXSSxXQUFXO1FBQ3JGLE1BQU1DLFFBQVE7WUFDVkg7WUFDQUg7WUFDQU8sa0JBQWtCTixXQUFXTSxnQkFBZ0I7WUFDN0NDLGtCQUNBLG1EQUFtRDtZQUNuRFAsV0FBV08sZ0JBQWdCLElBQUlDLFdBQVdDLGtCQUFrQjtZQUM1REMsY0FBY1YsV0FBV1UsWUFBWTtZQUNyQ0MsZ0JBQWdCWCxXQUFXWSxVQUFVO1lBQ3JDQyxZQUFZYixXQUFXYSxVQUFVO1lBQ2pDQyxzQkFBc0JkLFdBQVdjLG9CQUFvQjtZQUNyRFYsYUFBYUosV0FBV0ksV0FBVztRQUN2QztRQUNBLHNGQUFzRjtRQUN0RkosV0FBV0ssS0FBSyxHQUFHQTtRQUNuQixPQUFPUCxRQUFRaUIsR0FBRyxDQUFDVixPQUFPSixVQUFVSTtJQUN4QztBQUNKLEdBRUEsbUVBQW1FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvYXN5bmMtc3RvcmFnZS9zdGF0aWMtZ2VuZXJhdGlvbi1hc3luYy1zdG9yYWdlLXdyYXBwZXIuanM/YTg4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBTdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlV3JhcHBlcjtcbiAgICB9XG59KTtcbmNvbnN0IFN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyID0ge1xuICAgIHdyYXAgKHN0b3JhZ2UsIHsgcGF0aG5hbWUgLCByZW5kZXJPcHRzICB9LCBjYWxsYmFjaykge1xuICAgICAgICAvKipcbiAgICAgKiBSdWxlcyBvZiBTdGF0aWMgJiBEeW5hbWljIEhUTUw6XG4gICAgICpcbiAgICAgKiAgICAxLikgV2UgbXVzdCBnZW5lcmF0ZSBzdGF0aWMgSFRNTCB1bmxlc3MgdGhlIGNhbGxlciBleHBsaWNpdGx5IG9wdHNcbiAgICAgKiAgICAgICAgaW4gdG8gZHluYW1pYyBIVE1MIHN1cHBvcnQuXG4gICAgICpcbiAgICAgKiAgICAyLikgSWYgZHluYW1pYyBIVE1MIHN1cHBvcnQgaXMgcmVxdWVzdGVkLCB3ZSBtdXN0IGhvbm9yIHRoYXQgcmVxdWVzdFxuICAgICAqICAgICAgICBvciB0aHJvdyBhbiBlcnJvci4gSXQgaXMgdGhlIHNvbGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIGNhbGxlciB0b1xuICAgICAqICAgICAgICBlbnN1cmUgdGhleSBhcmVuJ3QgZS5nLiByZXF1ZXN0aW5nIGR5bmFtaWMgSFRNTCBmb3IgYW4gQU1QIHBhZ2UuXG4gICAgICpcbiAgICAgKiAgICAzLikgSWYgdGhlIHJlcXVlc3QgaXMgaW4gZHJhZnQgbW9kZSwgd2UgbXVzdCBnZW5lcmF0ZSBkeW5hbWljIEhUTUwuXG4gICAgICpcbiAgICAgKiBUaGVzZSBydWxlcyBoZWxwIGVuc3VyZSB0aGF0IG90aGVyIGV4aXN0aW5nIGZlYXR1cmVzIGxpa2UgcmVxdWVzdCBjYWNoaW5nLFxuICAgICAqIGNvYWxlc2NpbmcsIGFuZCBJU1IgY29udGludWUgd29ya2luZyBhcyBpbnRlbmRlZC5cbiAgICAgKi8gY29uc3QgaXNTdGF0aWNHZW5lcmF0aW9uID0gIXJlbmRlck9wdHMuc3VwcG9ydHNEeW5hbWljSFRNTCAmJiAhcmVuZGVyT3B0cy5pc0RyYWZ0TW9kZTtcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB7XG4gICAgICAgICAgICBpc1N0YXRpY0dlbmVyYXRpb24sXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIG9yaWdpbmFsUGF0aG5hbWU6IHJlbmRlck9wdHMub3JpZ2luYWxQYXRobmFtZSxcbiAgICAgICAgICAgIGluY3JlbWVudGFsQ2FjaGU6IC8vIHdlIGZhbGxiYWNrIHRvIGEgZ2xvYmFsIGluY3JlbWVudGFsIGNhY2hlIGZvciBlZGdlLXJ1bnRpbWUgbG9jYWxseVxuICAgICAgICAgICAgLy8gc28gdGhhdCBpdCBjYW4gYWNjZXNzIHRoZSBmcyBjYWNoZSB3aXRob3V0IG1vY2tzXG4gICAgICAgICAgICByZW5kZXJPcHRzLmluY3JlbWVudGFsQ2FjaGUgfHwgZ2xvYmFsVGhpcy5fX2luY3JlbWVudGFsQ2FjaGUsXG4gICAgICAgICAgICBpc1JldmFsaWRhdGU6IHJlbmRlck9wdHMuaXNSZXZhbGlkYXRlLFxuICAgICAgICAgICAgaXNQcmVyZW5kZXJpbmc6IHJlbmRlck9wdHMubmV4dEV4cG9ydCxcbiAgICAgICAgICAgIGZldGNoQ2FjaGU6IHJlbmRlck9wdHMuZmV0Y2hDYWNoZSxcbiAgICAgICAgICAgIGlzT25EZW1hbmRSZXZhbGlkYXRlOiByZW5kZXJPcHRzLmlzT25EZW1hbmRSZXZhbGlkYXRlLFxuICAgICAgICAgICAgaXNEcmFmdE1vZGU6IHJlbmRlck9wdHMuaXNEcmFmdE1vZGVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgd2hlbiB3ZSByZXNvbHZlIGFjY2Vzc2luZyB0aGUgc3RvcmUgb3V0c2lkZSB0aGUgZXhlY3V0aW9uIGNvbnRleHRcbiAgICAgICAgcmVuZGVyT3B0cy5zdG9yZSA9IHN0b3JlO1xuICAgICAgICByZXR1cm4gc3RvcmFnZS5ydW4oc3RvcmUsIGNhbGxiYWNrLCBzdG9yZSk7XG4gICAgfVxufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS13cmFwcGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJTdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlV3JhcHBlciIsIndyYXAiLCJzdG9yYWdlIiwicGF0aG5hbWUiLCJyZW5kZXJPcHRzIiwiY2FsbGJhY2siLCJpc1N0YXRpY0dlbmVyYXRpb24iLCJzdXBwb3J0c0R5bmFtaWNIVE1MIiwiaXNEcmFmdE1vZGUiLCJzdG9yZSIsIm9yaWdpbmFsUGF0aG5hbWUiLCJpbmNyZW1lbnRhbENhY2hlIiwiZ2xvYmFsVGhpcyIsIl9faW5jcmVtZW50YWxDYWNoZSIsImlzUmV2YWxpZGF0ZSIsImlzUHJlcmVuZGVyaW5nIiwibmV4dEV4cG9ydCIsImZldGNoQ2FjaGUiLCJpc09uRGVtYW5kUmV2YWxpZGF0ZSIsInJ1biJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-kind.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-kind.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouteKind\", ({\n    enumerable: true,\n    get: function() {\n        return RouteKind;\n    }\n}));\nvar RouteKind;\n(function(RouteKind) {\n    RouteKind[/**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */ \"PAGES\"] = \"PAGES\";\n    RouteKind[/**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */ \"PAGES_API\"] = \"PAGES_API\";\n    RouteKind[/**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */ \"APP_PAGE\"] = \"APP_PAGE\";\n    RouteKind[/**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */ \"APP_ROUTE\"] = \"APP_ROUTE\";\n})(RouteKind || (RouteKind = {})); //# sourceMappingURL=route-kind.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsNkNBQTRDO0lBQ3hDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsSUFBSUE7QUFDSCxVQUFTQSxTQUFTO0lBQ2ZBLFNBQVMsQ0FBQzs7R0FFWCxHQUFHLFFBQVEsR0FBRztJQUNiQSxTQUFTLENBQUM7O0dBRVgsR0FBRyxZQUFZLEdBQUc7SUFDakJBLFNBQVMsQ0FBQzs7O0dBR1gsR0FBRyxXQUFXLEdBQUc7SUFDaEJBLFNBQVMsQ0FBQzs7O0dBR1gsR0FBRyxZQUFZLEdBQUc7QUFDckIsR0FBR0EsYUFBY0EsQ0FBQUEsWUFBWSxDQUFDLEtBRTlCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kLmpzPzM5NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSb3V0ZUtpbmRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJvdXRlS2luZDtcbiAgICB9XG59KTtcbnZhciBSb3V0ZUtpbmQ7XG4oZnVuY3Rpb24oUm91dGVLaW5kKSB7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgUEFHRVNgIHJlcHJlc2VudHMgYWxsIHRoZSBSZWFjdCBwYWdlcyB0aGF0IGFyZSB1bmRlciBgcGFnZXMvYC5cbiAgICovIFwiUEFHRVNcIl0gPSBcIlBBR0VTXCI7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgUEFHRVNfQVBJYCByZXByZXNlbnRzIGFsbCB0aGUgQVBJIHJvdXRlcyB1bmRlciBgcGFnZXMvYXBpL2AuXG4gICAqLyBcIlBBR0VTX0FQSVwiXSA9IFwiUEFHRVNfQVBJXCI7XG4gICAgUm91dGVLaW5kWy8qKlxuICAgKiBgQVBQX1BBR0VgIHJlcHJlc2VudHMgYWxsIHRoZSBSZWFjdCBwYWdlcyB0aGF0IGFyZSB1bmRlciBgYXBwL2Agd2l0aCB0aGVcbiAgICogZmlsZW5hbWUgb2YgYHBhZ2Uue2osdH1zeyx4fWAuXG4gICAqLyBcIkFQUF9QQUdFXCJdID0gXCJBUFBfUEFHRVwiO1xuICAgIFJvdXRlS2luZFsvKipcbiAgICogYEFQUF9ST1VURWAgcmVwcmVzZW50cyBhbGwgdGhlIEFQSSByb3V0ZXMgYW5kIG1ldGFkYXRhIHJvdXRlcyB0aGF0IGFyZSB1bmRlciBgYXBwL2Agd2l0aCB0aGVcbiAgICogZmlsZW5hbWUgb2YgYHJvdXRlLntqLHR9c3sseH1gLlxuICAgKi8gXCJBUFBfUk9VVEVcIl0gPSBcIkFQUF9ST1VURVwiO1xufSkoUm91dGVLaW5kIHx8IChSb3V0ZUtpbmQgPSB7fSkpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS1raW5kLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJSb3V0ZUtpbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-kind.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"autoImplementMethods\", ({\n    enumerable: true,\n    get: function() {\n        return autoImplementMethods;\n    }\n}));\nconst _http = __webpack_require__(/*! ../../../../web/http */ \"(rsc)/./node_modules/next/dist/server/web/http.js\");\nconst _responsehandlers = __webpack_require__(/*! ../../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nconst AUTOMATIC_ROUTE_METHODS = [\n    \"HEAD\",\n    \"OPTIONS\"\n];\nfunction autoImplementMethods(handlers) {\n    // Loop through all the HTTP methods to create the initial methods object.\n    // Each of the methods will be set to the the 405 response handler.\n    const methods = _http.HTTP_METHODS.reduce((acc, method)=>({\n            ...acc,\n            // If the userland module implements the method, then use it. Otherwise,\n            // use the 405 response handler.\n            [method]: handlers[method] ?? _responsehandlers.handleMethodNotAllowedResponse\n        }), {});\n    // Get all the methods that could be automatically implemented that were not\n    // implemented by the userland module.\n    const implemented = new Set(_http.HTTP_METHODS.filter((method)=>handlers[method]));\n    const missing = AUTOMATIC_ROUTE_METHODS.filter((method)=>!implemented.has(method));\n    // Loop over the missing methods to automatically implement them if we can.\n    for (const method of missing){\n        // If the userland module doesn't implement the HEAD method, then\n        // we'll automatically implement it by calling the GET method (if it\n        // exists).\n        if (method === \"HEAD\") {\n            // If the userland module doesn't implement the GET method, then\n            // we're done.\n            if (!handlers.GET) break;\n            // Implement the HEAD method by calling the GET method.\n            methods.HEAD = handlers.GET;\n            // Mark it as implemented.\n            implemented.add(\"HEAD\");\n            continue;\n        }\n        // If OPTIONS is not provided then implement it.\n        if (method === \"OPTIONS\") {\n            // TODO: check if HEAD is implemented, if so, use it to add more headers\n            // Get all the methods that were implemented by the userland module.\n            const allow = [\n                \"OPTIONS\",\n                ...implemented\n            ];\n            // If the list of methods doesn't include HEAD, but it includes GET, then\n            // add HEAD as it's automatically implemented.\n            if (!implemented.has(\"HEAD\") && implemented.has(\"GET\")) {\n                allow.push(\"HEAD\");\n            }\n            // Sort and join the list with commas to create the `Allow` header. See:\n            // https://httpwg.org/specs/rfc9110.html#field.allow\n            const headers = {\n                Allow: allow.sort().join(\", \")\n            };\n            // Implement the OPTIONS method by returning a 204 response with the\n            // `Allow` header.\n            methods.OPTIONS = ()=>new Response(null, {\n                    status: 204,\n                    headers\n                });\n            // Mark this method as implemented.\n            implemented.add(\"OPTIONS\");\n            continue;\n        }\n        throw new Error(`Invariant: should handle all automatic implementable methods, got method: ${method}`);\n    }\n    return methods;\n} //# sourceMappingURL=auto-implement-methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9hdXRvLWltcGxlbWVudC1tZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx3REFBdUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxRQUFRQyxtQkFBT0EsQ0FBQywrRUFBc0I7QUFDNUMsTUFBTUMsb0JBQW9CRCxtQkFBT0EsQ0FBQyxnSUFBaUM7QUFDbkUsTUFBTUUsMEJBQTBCO0lBQzVCO0lBQ0E7Q0FDSDtBQUNELFNBQVNKLHFCQUFxQkssUUFBUTtJQUNsQywwRUFBMEU7SUFDMUUsbUVBQW1FO0lBQ25FLE1BQU1DLFVBQVVMLE1BQU1NLFlBQVksQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLEtBQUtDLFNBQVU7WUFDbEQsR0FBR0QsR0FBRztZQUNOLHdFQUF3RTtZQUN4RSxnQ0FBZ0M7WUFDaEMsQ0FBQ0MsT0FBTyxFQUFFTCxRQUFRLENBQUNLLE9BQU8sSUFBSVAsa0JBQWtCUSw4QkFBOEI7UUFDbEYsSUFBSSxDQUFDO0lBQ1QsNEVBQTRFO0lBQzVFLHNDQUFzQztJQUN0QyxNQUFNQyxjQUFjLElBQUlDLElBQUlaLE1BQU1NLFlBQVksQ0FBQ08sTUFBTSxDQUFDLENBQUNKLFNBQVNMLFFBQVEsQ0FBQ0ssT0FBTztJQUNoRixNQUFNSyxVQUFVWCx3QkFBd0JVLE1BQU0sQ0FBQyxDQUFDSixTQUFTLENBQUNFLFlBQVlJLEdBQUcsQ0FBQ047SUFDMUUsMkVBQTJFO0lBQzNFLEtBQUssTUFBTUEsVUFBVUssUUFBUTtRQUN6QixpRUFBaUU7UUFDakUsb0VBQW9FO1FBQ3BFLFdBQVc7UUFDWCxJQUFJTCxXQUFXLFFBQVE7WUFDbkIsZ0VBQWdFO1lBQ2hFLGNBQWM7WUFDZCxJQUFJLENBQUNMLFNBQVNZLEdBQUcsRUFBRTtZQUNuQix1REFBdUQ7WUFDdkRYLFFBQVFZLElBQUksR0FBR2IsU0FBU1ksR0FBRztZQUMzQiwwQkFBMEI7WUFDMUJMLFlBQVlPLEdBQUcsQ0FBQztZQUNoQjtRQUNKO1FBQ0EsZ0RBQWdEO1FBQ2hELElBQUlULFdBQVcsV0FBVztZQUN0Qix3RUFBd0U7WUFDeEUsb0VBQW9FO1lBQ3BFLE1BQU1VLFFBQVE7Z0JBQ1Y7bUJBQ0dSO2FBQ047WUFDRCx5RUFBeUU7WUFDekUsOENBQThDO1lBQzlDLElBQUksQ0FBQ0EsWUFBWUksR0FBRyxDQUFDLFdBQVdKLFlBQVlJLEdBQUcsQ0FBQyxRQUFRO2dCQUNwREksTUFBTUMsSUFBSSxDQUFDO1lBQ2Y7WUFDQSx3RUFBd0U7WUFDeEUsb0RBQW9EO1lBQ3BELE1BQU1DLFVBQVU7Z0JBQ1pDLE9BQU9ILE1BQU1JLElBQUksR0FBR0MsSUFBSSxDQUFDO1lBQzdCO1lBQ0Esb0VBQW9FO1lBQ3BFLGtCQUFrQjtZQUNsQm5CLFFBQVFvQixPQUFPLEdBQUcsSUFBSSxJQUFJQyxTQUFTLE1BQU07b0JBQ2pDQyxRQUFRO29CQUNSTjtnQkFDSjtZQUNKLG1DQUFtQztZQUNuQ1YsWUFBWU8sR0FBRyxDQUFDO1lBQ2hCO1FBQ0o7UUFDQSxNQUFNLElBQUlVLE1BQU0sQ0FBQywwRUFBMEUsRUFBRW5CLE9BQU8sQ0FBQztJQUN6RztJQUNBLE9BQU9KO0FBQ1gsRUFFQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9hdXRvLWltcGxlbWVudC1tZXRob2RzLmpzP2IxYTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdXRvSW1wbGVtZW50TWV0aG9kc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXV0b0ltcGxlbWVudE1ldGhvZHM7XG4gICAgfVxufSk7XG5jb25zdCBfaHR0cCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi93ZWIvaHR0cFwiKTtcbmNvbnN0IF9yZXNwb25zZWhhbmRsZXJzID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMvcmVzcG9uc2UtaGFuZGxlcnNcIik7XG5jb25zdCBBVVRPTUFUSUNfUk9VVEVfTUVUSE9EUyA9IFtcbiAgICBcIkhFQURcIixcbiAgICBcIk9QVElPTlNcIlxuXTtcbmZ1bmN0aW9uIGF1dG9JbXBsZW1lbnRNZXRob2RzKGhhbmRsZXJzKSB7XG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgSFRUUCBtZXRob2RzIHRvIGNyZWF0ZSB0aGUgaW5pdGlhbCBtZXRob2RzIG9iamVjdC5cbiAgICAvLyBFYWNoIG9mIHRoZSBtZXRob2RzIHdpbGwgYmUgc2V0IHRvIHRoZSB0aGUgNDA1IHJlc3BvbnNlIGhhbmRsZXIuXG4gICAgY29uc3QgbWV0aG9kcyA9IF9odHRwLkhUVFBfTUVUSE9EUy5yZWR1Y2UoKGFjYywgbWV0aG9kKT0+KHtcbiAgICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VybGFuZCBtb2R1bGUgaW1wbGVtZW50cyB0aGUgbWV0aG9kLCB0aGVuIHVzZSBpdC4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgLy8gdXNlIHRoZSA0MDUgcmVzcG9uc2UgaGFuZGxlci5cbiAgICAgICAgICAgIFttZXRob2RdOiBoYW5kbGVyc1ttZXRob2RdID8/IF9yZXNwb25zZWhhbmRsZXJzLmhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZVxuICAgICAgICB9KSwge30pO1xuICAgIC8vIEdldCBhbGwgdGhlIG1ldGhvZHMgdGhhdCBjb3VsZCBiZSBhdXRvbWF0aWNhbGx5IGltcGxlbWVudGVkIHRoYXQgd2VyZSBub3RcbiAgICAvLyBpbXBsZW1lbnRlZCBieSB0aGUgdXNlcmxhbmQgbW9kdWxlLlxuICAgIGNvbnN0IGltcGxlbWVudGVkID0gbmV3IFNldChfaHR0cC5IVFRQX01FVEhPRFMuZmlsdGVyKChtZXRob2QpPT5oYW5kbGVyc1ttZXRob2RdKSk7XG4gICAgY29uc3QgbWlzc2luZyA9IEFVVE9NQVRJQ19ST1VURV9NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+IWltcGxlbWVudGVkLmhhcyhtZXRob2QpKTtcbiAgICAvLyBMb29wIG92ZXIgdGhlIG1pc3NpbmcgbWV0aG9kcyB0byBhdXRvbWF0aWNhbGx5IGltcGxlbWVudCB0aGVtIGlmIHdlIGNhbi5cbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtaXNzaW5nKXtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXJsYW5kIG1vZHVsZSBkb2Vzbid0IGltcGxlbWVudCB0aGUgSEVBRCBtZXRob2QsIHRoZW5cbiAgICAgICAgLy8gd2UnbGwgYXV0b21hdGljYWxseSBpbXBsZW1lbnQgaXQgYnkgY2FsbGluZyB0aGUgR0VUIG1ldGhvZCAoaWYgaXRcbiAgICAgICAgLy8gZXhpc3RzKS5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB1c2VybGFuZCBtb2R1bGUgZG9lc24ndCBpbXBsZW1lbnQgdGhlIEdFVCBtZXRob2QsIHRoZW5cbiAgICAgICAgICAgIC8vIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICBpZiAoIWhhbmRsZXJzLkdFVCkgYnJlYWs7XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgdGhlIEhFQUQgbWV0aG9kIGJ5IGNhbGxpbmcgdGhlIEdFVCBtZXRob2QuXG4gICAgICAgICAgICBtZXRob2RzLkhFQUQgPSBoYW5kbGVycy5HRVQ7XG4gICAgICAgICAgICAvLyBNYXJrIGl0IGFzIGltcGxlbWVudGVkLlxuICAgICAgICAgICAgaW1wbGVtZW50ZWQuYWRkKFwiSEVBRFwiKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIE9QVElPTlMgaXMgbm90IHByb3ZpZGVkIHRoZW4gaW1wbGVtZW50IGl0LlxuICAgICAgICBpZiAobWV0aG9kID09PSBcIk9QVElPTlNcIikge1xuICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgSEVBRCBpcyBpbXBsZW1lbnRlZCwgaWYgc28sIHVzZSBpdCB0byBhZGQgbW9yZSBoZWFkZXJzXG4gICAgICAgICAgICAvLyBHZXQgYWxsIHRoZSBtZXRob2RzIHRoYXQgd2VyZSBpbXBsZW1lbnRlZCBieSB0aGUgdXNlcmxhbmQgbW9kdWxlLlxuICAgICAgICAgICAgY29uc3QgYWxsb3cgPSBbXG4gICAgICAgICAgICAgICAgXCJPUFRJT05TXCIsXG4gICAgICAgICAgICAgICAgLi4uaW1wbGVtZW50ZWRcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAvLyBJZiB0aGUgbGlzdCBvZiBtZXRob2RzIGRvZXNuJ3QgaW5jbHVkZSBIRUFELCBidXQgaXQgaW5jbHVkZXMgR0VULCB0aGVuXG4gICAgICAgICAgICAvLyBhZGQgSEVBRCBhcyBpdCdzIGF1dG9tYXRpY2FsbHkgaW1wbGVtZW50ZWQuXG4gICAgICAgICAgICBpZiAoIWltcGxlbWVudGVkLmhhcyhcIkhFQURcIikgJiYgaW1wbGVtZW50ZWQuaGFzKFwiR0VUXCIpKSB7XG4gICAgICAgICAgICAgICAgYWxsb3cucHVzaChcIkhFQURcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTb3J0IGFuZCBqb2luIHRoZSBsaXN0IHdpdGggY29tbWFzIHRvIGNyZWF0ZSB0aGUgYEFsbG93YCBoZWFkZXIuIFNlZTpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuYWxsb3dcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAgICAgQWxsb3c6IGFsbG93LnNvcnQoKS5qb2luKFwiLCBcIilcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBJbXBsZW1lbnQgdGhlIE9QVElPTlMgbWV0aG9kIGJ5IHJldHVybmluZyBhIDIwNCByZXNwb25zZSB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gYEFsbG93YCBoZWFkZXIuXG4gICAgICAgICAgICBtZXRob2RzLk9QVElPTlMgPSAoKT0+bmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAyMDQsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIE1hcmsgdGhpcyBtZXRob2QgYXMgaW1wbGVtZW50ZWQuXG4gICAgICAgICAgICBpbXBsZW1lbnRlZC5hZGQoXCJPUFRJT05TXCIpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhcmlhbnQ6IHNob3VsZCBoYW5kbGUgYWxsIGF1dG9tYXRpYyBpbXBsZW1lbnRhYmxlIG1ldGhvZHMsIGdvdCBtZXRob2Q6ICR7bWV0aG9kfWApO1xuICAgIH1cbiAgICByZXR1cm4gbWV0aG9kcztcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0by1pbXBsZW1lbnQtbWV0aG9kcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYXV0b0ltcGxlbWVudE1ldGhvZHMiLCJfaHR0cCIsInJlcXVpcmUiLCJfcmVzcG9uc2VoYW5kbGVycyIsIkFVVE9NQVRJQ19ST1VURV9NRVRIT0RTIiwiaGFuZGxlcnMiLCJtZXRob2RzIiwiSFRUUF9NRVRIT0RTIiwicmVkdWNlIiwiYWNjIiwibWV0aG9kIiwiaGFuZGxlTWV0aG9kTm90QWxsb3dlZFJlc3BvbnNlIiwiaW1wbGVtZW50ZWQiLCJTZXQiLCJmaWx0ZXIiLCJtaXNzaW5nIiwiaGFzIiwiR0VUIiwiSEVBRCIsImFkZCIsImFsbG93IiwicHVzaCIsImhlYWRlcnMiLCJBbGxvdyIsInNvcnQiLCJqb2luIiwiT1BUSU9OUyIsIlJlc3BvbnNlIiwic3RhdHVzIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Cleans a URL by stripping the protocol, host, and search params.\n *\n * @param urlString the url to clean\n * @returns the cleaned url\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"cleanURL\", ({\n    enumerable: true,\n    get: function() {\n        return cleanURL;\n    }\n}));\nfunction cleanURL(urlString) {\n    const url = new URL(urlString);\n    url.host = \"localhost:3000\";\n    url.search = \"\";\n    url.protocol = \"http\";\n    return url.toString();\n} //# sourceMappingURL=clean-url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9jbGVhbi11cmwuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCw0Q0FBMkM7SUFDdkNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxTQUFTQyxTQUFTO0lBQ3ZCLE1BQU1DLE1BQU0sSUFBSUMsSUFBSUY7SUFDcEJDLElBQUlFLElBQUksR0FBRztJQUNYRixJQUFJRyxNQUFNLEdBQUc7SUFDYkgsSUFBSUksUUFBUSxHQUFHO0lBQ2YsT0FBT0osSUFBSUssUUFBUTtBQUN2QixFQUVBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL2NsZWFuLXVybC5qcz85NDExIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2xlYW5zIGEgVVJMIGJ5IHN0cmlwcGluZyB0aGUgcHJvdG9jb2wsIGhvc3QsIGFuZCBzZWFyY2ggcGFyYW1zLlxuICpcbiAqIEBwYXJhbSB1cmxTdHJpbmcgdGhlIHVybCB0byBjbGVhblxuICogQHJldHVybnMgdGhlIGNsZWFuZWQgdXJsXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjbGVhblVSTFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2xlYW5VUkw7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBjbGVhblVSTCh1cmxTdHJpbmcpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHVybFN0cmluZyk7XG4gICAgdXJsLmhvc3QgPSBcImxvY2FsaG9zdDozMDAwXCI7XG4gICAgdXJsLnNlYXJjaCA9IFwiXCI7XG4gICAgdXJsLnByb3RvY29sID0gXCJodHRwXCI7XG4gICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGVhbi11cmwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImNsZWFuVVJMIiwidXJsU3RyaW5nIiwidXJsIiwiVVJMIiwiaG9zdCIsInNlYXJjaCIsInByb3RvY29sIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getNonStaticMethods\", ({\n    enumerable: true,\n    get: function() {\n        return getNonStaticMethods;\n    }\n}));\nconst NON_STATIC_METHODS = [\n    \"OPTIONS\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"PATCH\"\n];\nfunction getNonStaticMethods(handlers) {\n    // We can currently only statically optimize if only GET/HEAD are used as\n    // prerender can't be used conditionally based on the method currently.\n    const methods = NON_STATIC_METHODS.filter((method)=>handlers[method]);\n    if (methods.length === 0) return false;\n    return methods;\n} //# sourceMappingURL=get-non-static-methods.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtbm9uLXN0YXRpYy1tZXRob2RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxxQkFBcUI7SUFDdkI7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU0Qsb0JBQW9CRSxRQUFRO0lBQ2pDLHlFQUF5RTtJQUN6RSx1RUFBdUU7SUFDdkUsTUFBTUMsVUFBVUYsbUJBQW1CRyxNQUFNLENBQUMsQ0FBQ0MsU0FBU0gsUUFBUSxDQUFDRyxPQUFPO0lBQ3BFLElBQUlGLFFBQVFHLE1BQU0sS0FBSyxHQUFHLE9BQU87SUFDakMsT0FBT0g7QUFDWCxFQUVBLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9oZWxwZXJzL2dldC1ub24tc3RhdGljLW1ldGhvZHMuanM/ZTgwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE5vblN0YXRpY01ldGhvZHNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5vblN0YXRpY01ldGhvZHM7XG4gICAgfVxufSk7XG5jb25zdCBOT05fU1RBVElDX01FVEhPRFMgPSBbXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQT1NUXCIsXG4gICAgXCJQVVRcIixcbiAgICBcIkRFTEVURVwiLFxuICAgIFwiUEFUQ0hcIlxuXTtcbmZ1bmN0aW9uIGdldE5vblN0YXRpY01ldGhvZHMoaGFuZGxlcnMpIHtcbiAgICAvLyBXZSBjYW4gY3VycmVudGx5IG9ubHkgc3RhdGljYWxseSBvcHRpbWl6ZSBpZiBvbmx5IEdFVC9IRUFEIGFyZSB1c2VkIGFzXG4gICAgLy8gcHJlcmVuZGVyIGNhbid0IGJlIHVzZWQgY29uZGl0aW9uYWxseSBiYXNlZCBvbiB0aGUgbWV0aG9kIGN1cnJlbnRseS5cbiAgICBjb25zdCBtZXRob2RzID0gTk9OX1NUQVRJQ19NRVRIT0RTLmZpbHRlcigobWV0aG9kKT0+aGFuZGxlcnNbbWV0aG9kXSk7XG4gICAgaWYgKG1ldGhvZHMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG1ldGhvZHM7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1ub24tc3RhdGljLW1ldGhvZHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldE5vblN0YXRpY01ldGhvZHMiLCJOT05fU1RBVElDX01FVEhPRFMiLCJoYW5kbGVycyIsIm1ldGhvZHMiLCJmaWx0ZXIiLCJtZXRob2QiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Get pathname from absolute path.\n *\n * @param absolutePath the absolute path\n * @returns the pathname\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getPathnameFromAbsolutePath\", ({\n    enumerable: true,\n    get: function() {\n        return getPathnameFromAbsolutePath;\n    }\n}));\nfunction getPathnameFromAbsolutePath(absolutePath) {\n    // Remove prefix including app dir\n    let appDir = \"/app/\";\n    if (!absolutePath.includes(appDir)) {\n        appDir = \"\\\\app\\\\\";\n    }\n    const [, ...parts] = absolutePath.split(appDir);\n    const relativePath = appDir[0] + parts.join(appDir);\n    // remove extension\n    const pathname = relativePath.split(\".\").slice(0, -1).join(\".\");\n    return pathname;\n} //# sourceMappingURL=get-pathname-from-absolute-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDLEdBQWdCO0FBQ2pCQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsK0RBQThEO0lBQzFESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsNEJBQTRCQyxZQUFZO0lBQzdDLGtDQUFrQztJQUNsQyxJQUFJQyxTQUFTO0lBQ2IsSUFBSSxDQUFDRCxhQUFhRSxRQUFRLENBQUNELFNBQVM7UUFDaENBLFNBQVM7SUFDYjtJQUNBLE1BQU0sR0FBRyxHQUFHRSxNQUFNLEdBQUdILGFBQWFJLEtBQUssQ0FBQ0g7SUFDeEMsTUFBTUksZUFBZUosTUFBTSxDQUFDLEVBQUUsR0FBR0UsTUFBTUcsSUFBSSxDQUFDTDtJQUM1QyxtQkFBbUI7SUFDbkIsTUFBTU0sV0FBV0YsYUFBYUQsS0FBSyxDQUFDLEtBQUtJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0YsSUFBSSxDQUFDO0lBQzNELE9BQU9DO0FBQ1gsRUFFQSwyREFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9nZXQtcGF0aG5hbWUtZnJvbS1hYnNvbHV0ZS1wYXRoLmpzPzFiYTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgcGF0aG5hbWUgZnJvbSBhYnNvbHV0ZSBwYXRoLlxuICpcbiAqIEBwYXJhbSBhYnNvbHV0ZVBhdGggdGhlIGFic29sdXRlIHBhdGhcbiAqIEByZXR1cm5zIHRoZSBwYXRobmFtZVxuICovIFwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0UGF0aG5hbWVGcm9tQWJzb2x1dGVQYXRoXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGg7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgoYWJzb2x1dGVQYXRoKSB7XG4gICAgLy8gUmVtb3ZlIHByZWZpeCBpbmNsdWRpbmcgYXBwIGRpclxuICAgIGxldCBhcHBEaXIgPSBcIi9hcHAvXCI7XG4gICAgaWYgKCFhYnNvbHV0ZVBhdGguaW5jbHVkZXMoYXBwRGlyKSkge1xuICAgICAgICBhcHBEaXIgPSBcIlxcXFxhcHBcXFxcXCI7XG4gICAgfVxuICAgIGNvbnN0IFssIC4uLnBhcnRzXSA9IGFic29sdXRlUGF0aC5zcGxpdChhcHBEaXIpO1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IGFwcERpclswXSArIHBhcnRzLmpvaW4oYXBwRGlyKTtcbiAgICAvLyByZW1vdmUgZXh0ZW5zaW9uXG4gICAgY29uc3QgcGF0aG5hbWUgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIuXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiLlwiKTtcbiAgICByZXR1cm4gcGF0aG5hbWU7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1wYXRobmFtZS1mcm9tLWFic29sdXRlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldFBhdGhuYW1lRnJvbUFic29sdXRlUGF0aCIsImFic29sdXRlUGF0aCIsImFwcERpciIsImluY2x1ZGVzIiwicGFydHMiLCJzcGxpdCIsInJlbGF0aXZlUGF0aCIsImpvaW4iLCJwYXRobmFtZSIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"parsedUrlQueryToParams\", ({\n    enumerable: true,\n    get: function() {\n        return parsedUrlQueryToParams;\n    }\n}));\nfunction parsedUrlQueryToParams(query) {\n    const params = {};\n    for (const [key, value] of Object.entries(query)){\n        if (typeof value === \"undefined\") continue;\n        params[key] = value;\n    }\n    return params;\n} //# sourceMappingURL=parsed-url-query-to-params.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9wYXJzZWQtdXJsLXF1ZXJ5LXRvLXBhcmFtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMERBQXlEO0lBQ3JESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsdUJBQXVCQyxLQUFLO0lBQ2pDLE1BQU1DLFNBQVMsQ0FBQztJQUNoQixLQUFLLE1BQU0sQ0FBQ0MsS0FBS04sTUFBTSxJQUFJSCxPQUFPVSxPQUFPLENBQUNILE9BQU87UUFDN0MsSUFBSSxPQUFPSixVQUFVLGFBQWE7UUFDbENLLE1BQU0sQ0FBQ0MsSUFBSSxHQUFHTjtJQUNsQjtJQUNBLE9BQU9LO0FBQ1gsRUFFQSxzREFBc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9wYXJzZWQtdXJsLXF1ZXJ5LXRvLXBhcmFtcy5qcz85YWVjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFyc2VkVXJsUXVlcnlUb1BhcmFtc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcGFyc2VkVXJsUXVlcnlUb1BhcmFtcztcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHBhcnNlZFVybFF1ZXJ5VG9QYXJhbXMocXVlcnkpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhxdWVyeSkpe1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSBjb250aW51ZTtcbiAgICAgICAgcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcmFtcztcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VkLXVybC1xdWVyeS10by1wYXJhbXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInBhcnNlZFVybFF1ZXJ5VG9QYXJhbXMiLCJxdWVyeSIsInBhcmFtcyIsImtleSIsImVudHJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"proxyRequest\", ({\n    enumerable: true,\n    get: function() {\n        return proxyRequest;\n    }\n}));\nconst _cookies = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\");\nconst _nexturl = __webpack_require__(/*! ../../../../web/next-url */ \"(rsc)/./node_modules/next/dist/server/web/next-url.js\");\nconst _cleanurl = __webpack_require__(/*! ./clean-url */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/clean-url.js\");\nfunction proxyRequest(request, { dynamic }, hooks) {\n    function handleNextUrlBailout(prop) {\n        switch(prop){\n            case \"search\":\n            case \"searchParams\":\n            case \"toString\":\n            case \"href\":\n            case \"origin\":\n                hooks.staticGenerationBailout(`nextUrl.${prop}`);\n                return;\n            default:\n                return;\n        }\n    }\n    const cache = {};\n    const handleForceStatic = (url, prop)=>{\n        switch(prop){\n            case \"search\":\n                return \"\";\n            case \"searchParams\":\n                if (!cache.searchParams) cache.searchParams = new URLSearchParams();\n                return cache.searchParams;\n            case \"url\":\n            case \"href\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                return cache.url;\n            case \"toJSON\":\n            case \"toString\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                if (!cache.toString) cache.toString = ()=>cache.url;\n                return cache.toString;\n            case \"headers\":\n                if (!cache.headers) cache.headers = new Headers();\n                return cache.headers;\n            case \"cookies\":\n                if (!cache.headers) cache.headers = new Headers();\n                if (!cache.cookies) cache.cookies = new _cookies.RequestCookies(cache.headers);\n                return cache.cookies;\n            case \"clone\":\n                if (!cache.url) cache.url = (0, _cleanurl.cleanURL)(url);\n                return ()=>new _nexturl.NextURL(cache.url);\n            default:\n                break;\n        }\n    };\n    const wrappedNextUrl = new Proxy(request.nextUrl, {\n        get (target, prop) {\n            handleNextUrlBailout(prop);\n            if (dynamic === \"force-static\" && typeof prop === \"string\") {\n                const result = handleForceStatic(target.href, prop);\n                if (result !== undefined) return result;\n            }\n            const value = target[prop];\n            if (typeof value === \"function\") {\n                return value.bind(target);\n            }\n            return value;\n        },\n        set (target, prop, value) {\n            handleNextUrlBailout(prop);\n            target[prop] = value;\n            return true;\n        }\n    });\n    const handleReqBailout = (prop)=>{\n        switch(prop){\n            case \"headers\":\n                hooks.headerHooks.headers();\n                return;\n            // if request.url is accessed directly instead of\n            // request.nextUrl we bail since it includes query\n            // values that can be relied on dynamically\n            case \"url\":\n            case \"body\":\n            case \"blob\":\n            case \"json\":\n            case \"text\":\n            case \"arrayBuffer\":\n            case \"formData\":\n                hooks.staticGenerationBailout(`request.${prop}`);\n                return;\n            default:\n                return;\n        }\n    };\n    return new Proxy(request, {\n        get (target, prop) {\n            handleReqBailout(prop);\n            if (prop === \"nextUrl\") {\n                return wrappedNextUrl;\n            }\n            if (dynamic === \"force-static\" && typeof prop === \"string\") {\n                const result = handleForceStatic(target.url, prop);\n                if (result !== undefined) return result;\n            }\n            const value = target[prop];\n            if (typeof value === \"function\") {\n                return value.bind(target);\n            }\n            return value;\n        },\n        set (target, prop, value) {\n            handleReqBailout(prop);\n            target[prop] = value;\n            return true;\n        }\n    });\n} //# sourceMappingURL=proxy-request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"resolveHandlerError\", ({\n    enumerable: true,\n    get: function() {\n        return resolveHandlerError;\n    }\n}));\nconst _notfound = __webpack_require__(/*! ../../../../../client/components/not-found */ \"(rsc)/./node_modules/next/dist/client/components/not-found.js\");\nconst _redirect = __webpack_require__(/*! ../../../../../client/components/redirect */ \"(rsc)/./node_modules/next/dist/client/components/redirect.js\");\nconst _responsehandlers = __webpack_require__(/*! ../../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nfunction resolveHandlerError(err) {\n    if ((0, _redirect.isRedirectError)(err)) {\n        const redirect = (0, _redirect.getURLFromRedirectError)(err);\n        if (!redirect) {\n            throw new Error(\"Invariant: Unexpected redirect url format\");\n        }\n        // This is a redirect error! Send the redirect response.\n        return (0, _responsehandlers.handleTemporaryRedirectResponse)(redirect, err.mutableCookies);\n    }\n    if ((0, _notfound.isNotFoundError)(err)) {\n        // This is a not found error! Send the not found response.\n        return (0, _responsehandlers.handleNotFoundResponse)();\n    }\n    // Return false to indicate that this is not a handled error.\n    return false;\n} //# sourceMappingURL=resolve-handler-error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvaGVscGVycy9yZXNvbHZlLWhhbmRsZXItZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFlBQVlDLG1CQUFPQSxDQUFDLGlIQUE0QztBQUN0RSxNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQywrR0FBMkM7QUFDckUsTUFBTUUsb0JBQW9CRixtQkFBT0EsQ0FBQyxnSUFBaUM7QUFDbkUsU0FBU0Ysb0JBQW9CSyxHQUFHO0lBQzVCLElBQUksQ0FBQyxHQUFHRixVQUFVRyxlQUFlLEVBQUVELE1BQU07UUFDckMsTUFBTUUsV0FBVyxDQUFDLEdBQUdKLFVBQVVLLHVCQUF1QixFQUFFSDtRQUN4RCxJQUFJLENBQUNFLFVBQVU7WUFDWCxNQUFNLElBQUlFLE1BQU07UUFDcEI7UUFDQSx3REFBd0Q7UUFDeEQsT0FBTyxDQUFDLEdBQUdMLGtCQUFrQk0sK0JBQStCLEVBQUVILFVBQVVGLElBQUlNLGNBQWM7SUFDOUY7SUFDQSxJQUFJLENBQUMsR0FBR1YsVUFBVVcsZUFBZSxFQUFFUCxNQUFNO1FBQ3JDLDBEQUEwRDtRQUMxRCxPQUFPLENBQUMsR0FBR0Qsa0JBQWtCUyxzQkFBc0I7SUFDdkQ7SUFDQSw2REFBNkQ7SUFDN0QsT0FBTztBQUNYLEVBRUEsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL2hlbHBlcnMvcmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzP2Y2MTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXNvbHZlSGFuZGxlckVycm9yXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlSGFuZGxlckVycm9yO1xuICAgIH1cbn0pO1xuY29uc3QgX25vdGZvdW5kID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uL2NsaWVudC9jb21wb25lbnRzL25vdC1mb3VuZFwiKTtcbmNvbnN0IF9yZWRpcmVjdCA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi8uLi9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdFwiKTtcbmNvbnN0IF9yZXNwb25zZWhhbmRsZXJzID0gcmVxdWlyZShcIi4uLy4uL2hlbHBlcnMvcmVzcG9uc2UtaGFuZGxlcnNcIik7XG5mdW5jdGlvbiByZXNvbHZlSGFuZGxlckVycm9yKGVycikge1xuICAgIGlmICgoMCwgX3JlZGlyZWN0LmlzUmVkaXJlY3RFcnJvcikoZXJyKSkge1xuICAgICAgICBjb25zdCByZWRpcmVjdCA9ICgwLCBfcmVkaXJlY3QuZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IpKGVycik7XG4gICAgICAgIGlmICghcmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogVW5leHBlY3RlZCByZWRpcmVjdCB1cmwgZm9ybWF0XCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgaXMgYSByZWRpcmVjdCBlcnJvciEgU2VuZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuXG4gICAgICAgIHJldHVybiAoMCwgX3Jlc3BvbnNlaGFuZGxlcnMuaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSkocmVkaXJlY3QsIGVyci5tdXRhYmxlQ29va2llcyk7XG4gICAgfVxuICAgIGlmICgoMCwgX25vdGZvdW5kLmlzTm90Rm91bmRFcnJvcikoZXJyKSkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbm90IGZvdW5kIGVycm9yISBTZW5kIHRoZSBub3QgZm91bmQgcmVzcG9uc2UuXG4gICAgICAgIHJldHVybiAoMCwgX3Jlc3BvbnNlaGFuZGxlcnMuaGFuZGxlTm90Rm91bmRSZXNwb25zZSkoKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGZhbHNlIHRvIGluZGljYXRlIHRoYXQgdGhpcyBpcyBub3QgYSBoYW5kbGVkIGVycm9yLlxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZS1oYW5kbGVyLWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZXNvbHZlSGFuZGxlckVycm9yIiwiX25vdGZvdW5kIiwicmVxdWlyZSIsIl9yZWRpcmVjdCIsIl9yZXNwb25zZWhhbmRsZXJzIiwiZXJyIiwiaXNSZWRpcmVjdEVycm9yIiwicmVkaXJlY3QiLCJnZXRVUkxGcm9tUmVkaXJlY3RFcnJvciIsIkVycm9yIiwiaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSIsIm11dGFibGVDb29raWVzIiwiaXNOb3RGb3VuZEVycm9yIiwiaGFuZGxlTm90Rm91bmRSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/app-route/module.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    AppRouteRouteModule: function() {\n        return AppRouteRouteModule;\n    },\n    default: function() {\n        return _default;\n    }\n});\nconst _routemodule = __webpack_require__(/*! ../route-module */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/route-module.js\");\nconst _requestasyncstoragewrapper = __webpack_require__(/*! ../../../async-storage/request-async-storage-wrapper */ \"(rsc)/./node_modules/next/dist/server/async-storage/request-async-storage-wrapper.js\");\nconst _staticgenerationasyncstoragewrapper = __webpack_require__(/*! ../../../async-storage/static-generation-async-storage-wrapper */ \"(rsc)/./node_modules/next/dist/server/async-storage/static-generation-async-storage-wrapper.js\");\nconst _responsehandlers = __webpack_require__(/*! ../helpers/response-handlers */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\");\nconst _http = __webpack_require__(/*! ../../../web/http */ \"(rsc)/./node_modules/next/dist/server/web/http.js\");\nconst _patchfetch = __webpack_require__(/*! ../../../lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\nconst _tracer = __webpack_require__(/*! ../../../lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants = __webpack_require__(/*! ../../../lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nconst _getpathnamefromabsolutepath = __webpack_require__(/*! ./helpers/get-pathname-from-absolute-path */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-pathname-from-absolute-path.js\");\nconst _proxyrequest = __webpack_require__(/*! ./helpers/proxy-request */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/proxy-request.js\");\nconst _resolvehandlererror = __webpack_require__(/*! ./helpers/resolve-handler-error */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/resolve-handler-error.js\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(__webpack_require__(/*! ../../../../build/output/log */ \"(rsc)/./node_modules/next/dist/build/output/log.js\"));\nconst _autoimplementmethods = __webpack_require__(/*! ./helpers/auto-implement-methods */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/auto-implement-methods.js\");\nconst _getnonstaticmethods = __webpack_require__(/*! ./helpers/get-non-static-methods */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/get-non-static-methods.js\");\nconst _requestcookies = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nconst _routekind = __webpack_require__(/*! ../../route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\nconst _parsedurlquerytoparams = __webpack_require__(/*! ./helpers/parsed-url-query-to-params */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/helpers/parsed-url-query-to-params.js\");\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n// These are imported weirdly like this because of the way that the bundling\n// works. We need to import the built files from the dist directory, but we\n// can't do that directly because we need types from the source files. So we\n// import the types from the source files and then import the built files.\nconst { requestAsyncStorage } = __webpack_require__(/*! next/dist/client/components/request-async-storage */ \"(shared)/./node_modules/next/dist/client/components/request-async-storage.js\");\nconst { staticGenerationAsyncStorage } = __webpack_require__(/*! next/dist/client/components/static-generation-async-storage */ \"(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\");\nconst serverHooks = __webpack_require__(/*! next/dist/client/components/hooks-server-context */ \"(rsc)/./node_modules/next/dist/client/components/hooks-server-context.js\");\nconst headerHooks = __webpack_require__(/*! next/dist/client/components/headers */ \"(rsc)/./node_modules/next/dist/client/components/headers.js\");\nconst { staticGenerationBailout } = __webpack_require__(/*! next/dist/client/components/static-generation-bailout */ \"(rsc)/./node_modules/next/dist/client/components/static-generation-bailout.js\");\nconst { actionAsyncStorage } = __webpack_require__(/*! next/dist/client/components/action-async-storage */ \"(shared)/./node_modules/next/dist/client/components/action-async-storage.js\");\nclass AppRouteRouteModule extends _routemodule.RouteModule {\n    static is(route) {\n        return route.definition.kind === _routekind.RouteKind.APP_ROUTE;\n    }\n    constructor({ userland, definition, resolvedPagePath, nextConfigOutput }){\n        super({\n            userland,\n            definition\n        });\n        /**\n   * A reference to the request async storage.\n   */ this.requestAsyncStorage = requestAsyncStorage;\n        /**\n   * A reference to the static generation async storage.\n   */ this.staticGenerationAsyncStorage = staticGenerationAsyncStorage;\n        /**\n   * An interface to call server hooks which interact with the underlying\n   * storage.\n   */ this.serverHooks = serverHooks;\n        /**\n   * An interface to call header hooks which interact with the underlying\n   * request storage.\n   */ this.headerHooks = headerHooks;\n        /**\n   * An interface to call static generation bailout hooks which interact with\n   * the underlying static generation storage.\n   */ this.staticGenerationBailout = staticGenerationBailout;\n        /**\n   * A reference to the mutation related async storage, such as mutations of\n   * cookies.\n   */ this.actionAsyncStorage = actionAsyncStorage;\n        this.resolvedPagePath = resolvedPagePath;\n        this.nextConfigOutput = nextConfigOutput;\n        // Automatically implement some methods if they aren't implemented by the\n        // userland module.\n        this.methods = (0, _autoimplementmethods.autoImplementMethods)(userland);\n        // Get the non-static methods for this route.\n        this.nonStaticMethods = (0, _getnonstaticmethods.getNonStaticMethods)(userland);\n        // Get the dynamic property from the userland module.\n        this.dynamic = this.userland.dynamic;\n        if (this.nextConfigOutput === \"export\") {\n            if (!this.dynamic || this.dynamic === \"auto\") {\n                this.dynamic = \"error\";\n            } else if (this.dynamic === \"force-dynamic\") {\n                throw new Error(`export const dynamic = \"force-dynamic\" on page \"${definition.pathname}\" cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/advanced-features/static-html-export`);\n            }\n        }\n        // We only warn in development after here, so return if we're not in\n        // development.\n        if (true) {\n            // Print error in development if the exported handlers are in lowercase, only\n            // uppercase handlers are supported.\n            const lowercased = _http.HTTP_METHODS.map((method)=>method.toLowerCase());\n            for (const method of lowercased){\n                if (method in this.userland) {\n                    _log.error(`Detected lowercase method '${method}' in '${this.resolvedPagePath}'. Export the uppercase '${method.toUpperCase()}' method name to fix this error.`);\n                }\n            }\n            // Print error if the module exports a default handler, they must use named\n            // exports for each HTTP method.\n            if (\"default\" in this.userland) {\n                _log.error(`Detected default export in '${this.resolvedPagePath}'. Export a named export for each HTTP method instead.`);\n            }\n            // If there is no methods exported by this module, then return a not found\n            // response.\n            if (!_http.HTTP_METHODS.some((method)=>method in this.userland)) {\n                _log.error(`No HTTP methods exported in '${this.resolvedPagePath}'. Export a named export for each HTTP method.`);\n            }\n        }\n    }\n    /**\n   * Resolves the handler function for the given method.\n   *\n   * @param method the requested method\n   * @returns the handler function for the given method\n   */ resolve(method) {\n        // Ensure that the requested method is a valid method (to prevent RCE's).\n        if (!(0, _http.isHTTPMethod)(method)) return _responsehandlers.handleBadRequestResponse;\n        // Return the handler.\n        return this.methods[method];\n    }\n    /**\n   * Executes the route handler.\n   */ async execute(request, context) {\n        // Get the handler function for the given method.\n        const handler = this.resolve(request.method);\n        // Get the context for the request.\n        const requestContext = {\n            req: request\n        };\n        requestContext.renderOpts = {\n            previewProps: context.prerenderManifest.preview\n        };\n        // Get the context for the static generation.\n        const staticGenerationContext = {\n            pathname: this.definition.pathname,\n            renderOpts: // the default values.\n            context.staticGenerationContext ?? {\n                supportsDynamicHTML: false\n            }\n        };\n        // Add the fetchCache option to the renderOpts.\n        staticGenerationContext.renderOpts.fetchCache = this.userland.fetchCache;\n        // Run the handler with the request AsyncLocalStorage to inject the helper\n        // support. We set this to `unknown` because the type is not known until\n        // runtime when we do a instanceof check below.\n        const response = await this.actionAsyncStorage.run({\n            isAppRoute: true\n        }, ()=>{\n            return _requestasyncstoragewrapper.RequestAsyncStorageWrapper.wrap(this.requestAsyncStorage, requestContext, ()=>{\n                return _staticgenerationasyncstoragewrapper.StaticGenerationAsyncStorageWrapper.wrap(this.staticGenerationAsyncStorage, staticGenerationContext, (staticGenerationStore)=>{\n                    var _getTracer_getRootSpanAttributes;\n                    // Check to see if we should bail out of static generation based on\n                    // having non-static methods.\n                    if (this.nonStaticMethods) {\n                        this.staticGenerationBailout(`non-static methods used ${this.nonStaticMethods.join(\", \")}`);\n                    }\n                    // Update the static generation store based on the dynamic property.\n                    switch(this.dynamic){\n                        case \"force-dynamic\":\n                            // The dynamic property is set to force-dynamic, so we should\n                            // force the page to be dynamic.\n                            staticGenerationStore.forceDynamic = true;\n                            this.staticGenerationBailout(`force-dynamic`, {\n                                dynamic: this.dynamic\n                            });\n                            break;\n                        case \"force-static\":\n                            // The dynamic property is set to force-static, so we should\n                            // force the page to be static.\n                            staticGenerationStore.forceStatic = true;\n                            break;\n                        case \"error\":\n                            // The dynamic property is set to error, so we should throw an\n                            // error if the page is being statically generated.\n                            staticGenerationStore.dynamicShouldError = true;\n                            break;\n                        default:\n                            break;\n                    }\n                    // If the static generation store does not have a revalidate value\n                    // set, then we should set it the revalidate value from the userland\n                    // module or default to false.\n                    staticGenerationStore.revalidate ??= this.userland.revalidate ?? false;\n                    // Wrap the request so we can add additional functionality to cases\n                    // that might change it's output or affect the rendering.\n                    const wrappedRequest = (0, _proxyrequest.proxyRequest)(request, {\n                        dynamic: this.dynamic\n                    }, {\n                        headerHooks: this.headerHooks,\n                        serverHooks: this.serverHooks,\n                        staticGenerationBailout: this.staticGenerationBailout\n                    });\n                    // TODO: propagate this pathname from route matcher\n                    const route = (0, _getpathnamefromabsolutepath.getPathnameFromAbsolutePath)(this.resolvedPagePath);\n                    (_getTracer_getRootSpanAttributes = (0, _tracer.getTracer)().getRootSpanAttributes()) == null ? void 0 : _getTracer_getRootSpanAttributes.set(\"next.route\", route);\n                    return (0, _tracer.getTracer)().trace(_constants.AppRouteRouteHandlersSpan.runHandler, {\n                        spanName: `executing api route (app) ${route}`,\n                        attributes: {\n                            \"next.route\": route\n                        }\n                    }, async ()=>{\n                        var _staticGenerationStore_tags;\n                        // Patch the global fetch.\n                        (0, _patchfetch.patchFetch)({\n                            serverHooks: this.serverHooks,\n                            staticGenerationAsyncStorage: this.staticGenerationAsyncStorage\n                        });\n                        const res = await handler(wrappedRequest, {\n                            params: context.params ? (0, _parsedurlquerytoparams.parsedUrlQueryToParams)(context.params) : undefined\n                        });\n                        context.staticGenerationContext.fetchMetrics = staticGenerationStore.fetchMetrics;\n                        await Promise.all(staticGenerationStore.pendingRevalidates || []);\n                        (0, _patchfetch.addImplicitTags)(staticGenerationStore);\n                        context.staticGenerationContext.fetchTags = (_staticGenerationStore_tags = staticGenerationStore.tags) == null ? void 0 : _staticGenerationStore_tags.join(\",\");\n                        // It's possible cookies were set in the handler, so we need\n                        // to merge the modified cookies and the returned response\n                        // here.\n                        const requestStore = this.requestAsyncStorage.getStore();\n                        if (requestStore && requestStore.mutableCookies) {\n                            const headers = new Headers(res.headers);\n                            if ((0, _requestcookies.appendMutableCookies)(headers, requestStore.mutableCookies)) {\n                                return new Response(res.body, {\n                                    status: res.status,\n                                    statusText: res.statusText,\n                                    headers\n                                });\n                            }\n                        }\n                        return res;\n                    });\n                });\n            });\n        });\n        // If the handler did't return a valid response, then return the internal\n        // error response.\n        if (!(response instanceof Response)) {\n            // TODO: validate the correct handling behavior, maybe log something?\n            return (0, _responsehandlers.handleInternalServerErrorResponse)();\n        }\n        if (response.headers.has(\"x-middleware-rewrite\")) {\n            // TODO: move this error into the `NextResponse.rewrite()` function.\n            // TODO-APP: re-enable support below when we can proxy these type of requests\n            throw new Error(\"NextResponse.rewrite() was used in a app route handler, this is not currently supported. Please remove the invocation to continue.\");\n        // // This is a rewrite created via `NextResponse.rewrite()`. We need to send\n        // // the response up so it can be handled by the backing server.\n        // // If the server is running in minimal mode, we just want to forward the\n        // // response (including the rewrite headers) upstream so it can perform the\n        // // redirect for us, otherwise return with the special condition so this\n        // // server can perform a rewrite.\n        // if (!minimalMode) {\n        //   return { response, condition: 'rewrite' }\n        // }\n        // // Relativize the url so it's relative to the base url. This is so the\n        // // outgoing headers upstream can be relative.\n        // const rewritePath = response.headers.get('x-middleware-rewrite')!\n        // const initUrl = getRequestMeta(req, '__NEXT_INIT_URL')!\n        // const { pathname } = parseUrl(relativizeURL(rewritePath, initUrl))\n        // response.headers.set('x-middleware-rewrite', pathname)\n        }\n        if (response.headers.get(\"x-middleware-next\") === \"1\") {\n            // TODO: move this error into the `NextResponse.next()` function.\n            throw new Error(\"NextResponse.next() was used in a app route handler, this is not supported. See here for more info: https://nextjs.org/docs/messages/next-response-next-in-app-route-handler\");\n        }\n        return response;\n    }\n    async handle(request, context) {\n        try {\n            // Execute the route to get the response.\n            const response = await this.execute(request, context);\n            // The response was handled, return it.\n            return response;\n        } catch (err) {\n            // Try to resolve the error to a response, else throw it again.\n            const response = (0, _resolvehandlererror.resolveHandlerError)(err);\n            if (!response) throw err;\n            // The response was resolved, return it.\n            return response;\n        }\n    }\n}\nconst _default = AppRouteRouteModule; //# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBR047QUFDQSxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxxQkFBcUI7UUFDakIsT0FBT0E7SUFDWDtJQUNBQyxTQUFTO1FBQ0wsT0FBT087SUFDWDtBQUNKO0FBQ0EsTUFBTUMsZUFBZUMsbUJBQU9BLENBQUMsbUdBQWlCO0FBQzlDLE1BQU1DLDhCQUE4QkQsbUJBQU9BLENBQUMsa0pBQXNEO0FBQ2xHLE1BQU1FLHVDQUF1Q0YsbUJBQU9BLENBQUMsc0tBQWdFO0FBQ3JILE1BQU1HLG9CQUFvQkgsbUJBQU9BLENBQUMsNkhBQThCO0FBQ2hFLE1BQU1JLFFBQVFKLG1CQUFPQSxDQUFDLDRFQUFtQjtBQUN6QyxNQUFNSyxjQUFjTCxtQkFBT0EsQ0FBQywwRkFBMEI7QUFDdEQsTUFBTU0sVUFBVU4sbUJBQU9BLENBQUMsNEZBQTJCO0FBQ25ELE1BQU1PLGFBQWFQLG1CQUFPQSxDQUFDLGtHQUE4QjtBQUN6RCxNQUFNUSwrQkFBK0JSLG1CQUFPQSxDQUFDLGtLQUEyQztBQUN4RixNQUFNUyxnQkFBZ0JULG1CQUFPQSxDQUFDLDhIQUF5QjtBQUN2RCxNQUFNVSx1QkFBdUJWLG1CQUFPQSxDQUFDLDhJQUFpQztBQUN0RSxNQUFNVyxPQUFPLFdBQVcsR0FBR0MsMEJBQTBCWixtQkFBT0EsQ0FBQyx3RkFBOEI7QUFDM0YsTUFBTWEsd0JBQXdCYixtQkFBT0EsQ0FBQyxnSkFBa0M7QUFDeEUsTUFBTWMsdUJBQXVCZCxtQkFBT0EsQ0FBQyxnSkFBa0M7QUFDdkUsTUFBTWUsa0JBQWtCZixtQkFBT0EsQ0FBQyxrSkFBc0Q7QUFDdEYsTUFBTWdCLGFBQWFoQixtQkFBT0EsQ0FBQyxvRkFBa0I7QUFDN0MsTUFBTWlCLDBCQUEwQmpCLG1CQUFPQSxDQUFDLHdKQUFzQztBQUM5RSxTQUFTa0IseUJBQXlCQyxXQUFXO0lBQ3pDLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFDMUMsSUFBSUMsb0JBQW9CLElBQUlEO0lBQzVCLElBQUlFLG1CQUFtQixJQUFJRjtJQUMzQixPQUFPLENBQUNGLDJCQUEyQixTQUFTQyxXQUFXO1FBQ25ELE9BQU9BLGNBQWNHLG1CQUFtQkQ7SUFDNUMsR0FBR0Y7QUFDUDtBQUNBLFNBQVNQLDBCQUEwQlcsR0FBRyxFQUFFSixXQUFXO0lBQy9DLElBQUksQ0FBQ0EsZUFBZUksT0FBT0EsSUFBSUMsVUFBVSxFQUFFO1FBQ3ZDLE9BQU9EO0lBQ1g7SUFDQSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUN0RSxPQUFPO1lBQ0hoQyxTQUFTZ0M7UUFDYjtJQUNKO0lBQ0EsSUFBSUUsUUFBUVAseUJBQXlCQztJQUNyQyxJQUFJTSxTQUFTQSxNQUFNQyxHQUFHLENBQUNILE1BQU07UUFDekIsT0FBT0UsTUFBTTVCLEdBQUcsQ0FBQzBCO0lBQ3JCO0lBQ0EsSUFBSUksU0FBUyxDQUFDO0lBQ2QsSUFBSUMsd0JBQXdCM0MsT0FBT0MsY0FBYyxJQUFJRCxPQUFPNEMsd0JBQXdCO0lBQ3BGLElBQUksSUFBSUMsT0FBT1AsSUFBSTtRQUNmLElBQUlPLFFBQVEsYUFBYTdDLE9BQU84QyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDVixLQUFLTyxNQUFNO1lBQ3JFLElBQUlJLE9BQU9OLHdCQUF3QjNDLE9BQU80Qyx3QkFBd0IsQ0FBQ04sS0FBS08sT0FBTztZQUMvRSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLckMsR0FBRyxJQUFJcUMsS0FBS0MsR0FBRyxHQUFHO2dCQUNoQ2xELE9BQU9DLGNBQWMsQ0FBQ3lDLFFBQVFHLEtBQUtJO1lBQ3ZDLE9BQU87Z0JBQ0hQLE1BQU0sQ0FBQ0csSUFBSSxHQUFHUCxHQUFHLENBQUNPLElBQUk7WUFDMUI7UUFDSjtJQUNKO0lBQ0FILE9BQU9wQyxPQUFPLEdBQUdnQztJQUNqQixJQUFJRSxPQUFPO1FBQ1BBLE1BQU1VLEdBQUcsQ0FBQ1osS0FBS0k7SUFDbkI7SUFDQSxPQUFPQTtBQUNYO0FBQ0EsNEVBQTRFO0FBQzVFLDJFQUEyRTtBQUMzRSw0RUFBNEU7QUFDNUUsMEVBQTBFO0FBQzFFLE1BQU0sRUFBRVMsbUJBQW1CLEVBQUcsR0FBR3BDLG1CQUFPQSxDQUFDLHVJQUFtRDtBQUM1RixNQUFNLEVBQUVxQyw0QkFBNEIsRUFBRyxHQUFHckMsbUJBQU9BLENBQUMsMkpBQTZEO0FBQy9HLE1BQU1zQyxjQUFjdEMsbUJBQU9BLENBQUMsa0lBQWtEO0FBQzlFLE1BQU11QyxjQUFjdkMsbUJBQU9BLENBQUMsd0dBQXFDO0FBQ2pFLE1BQU0sRUFBRXdDLHVCQUF1QixFQUFHLEdBQUd4QyxtQkFBT0EsQ0FBQyw0SUFBdUQ7QUFDcEcsTUFBTSxFQUFFeUMsa0JBQWtCLEVBQUcsR0FBR3pDLG1CQUFPQSxDQUFDLHFJQUFrRDtBQUMxRixNQUFNViw0QkFBNEJTLGFBQWEyQyxXQUFXO0lBQ3RELE9BQU9DLEdBQUdDLEtBQUssRUFBRTtRQUNiLE9BQU9BLE1BQU1DLFVBQVUsQ0FBQ0MsSUFBSSxLQUFLOUIsV0FBVytCLFNBQVMsQ0FBQ0MsU0FBUztJQUNuRTtJQUNBQyxZQUFZLEVBQUVDLFFBQVEsRUFBR0wsVUFBVSxFQUFHTSxnQkFBZ0IsRUFBR0MsZ0JBQWdCLEVBQUcsQ0FBQztRQUN6RSxLQUFLLENBQUM7WUFDRkY7WUFDQUw7UUFDSjtRQUNBOztHQUVMLEdBQUcsSUFBSSxDQUFDVCxtQkFBbUIsR0FBR0E7UUFDekI7O0dBRUwsR0FBRyxJQUFJLENBQUNDLDRCQUE0QixHQUFHQTtRQUNsQzs7O0dBR0wsR0FBRyxJQUFJLENBQUNDLFdBQVcsR0FBR0E7UUFDakI7OztHQUdMLEdBQUcsSUFBSSxDQUFDQyxXQUFXLEdBQUdBO1FBQ2pCOzs7R0FHTCxHQUFHLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUdBO1FBQzdCOzs7R0FHTCxHQUFHLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUdBO1FBQ3hCLElBQUksQ0FBQ1UsZ0JBQWdCLEdBQUdBO1FBQ3hCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUdBO1FBQ3hCLHlFQUF5RTtRQUN6RSxtQkFBbUI7UUFDbkIsSUFBSSxDQUFDQyxPQUFPLEdBQUcsQ0FBQyxHQUFHeEMsc0JBQXNCeUMsb0JBQW9CLEVBQUVKO1FBQy9ELDZDQUE2QztRQUM3QyxJQUFJLENBQUNLLGdCQUFnQixHQUFHLENBQUMsR0FBR3pDLHFCQUFxQjBDLG1CQUFtQixFQUFFTjtRQUN0RSxxREFBcUQ7UUFDckQsSUFBSSxDQUFDTyxPQUFPLEdBQUcsSUFBSSxDQUFDUCxRQUFRLENBQUNPLE9BQU87UUFDcEMsSUFBSSxJQUFJLENBQUNMLGdCQUFnQixLQUFLLFVBQVU7WUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQ0ssT0FBTyxJQUFJLElBQUksQ0FBQ0EsT0FBTyxLQUFLLFFBQVE7Z0JBQzFDLElBQUksQ0FBQ0EsT0FBTyxHQUFHO1lBQ25CLE9BQU8sSUFBSSxJQUFJLENBQUNBLE9BQU8sS0FBSyxpQkFBaUI7Z0JBQ3pDLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGdEQUFnRCxFQUFFYixXQUFXYyxRQUFRLENBQUMsd0hBQXdILENBQUM7WUFDcE47UUFDSjtRQUNBLG9FQUFvRTtRQUNwRSxlQUFlO1FBQ2YsSUFBSUMsSUFBc0MsRUFBRTtZQUN4Qyw2RUFBNkU7WUFDN0Usb0NBQW9DO1lBQ3BDLE1BQU1DLGFBQWF6RCxNQUFNMEQsWUFBWSxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsU0FBU0EsT0FBT0MsV0FBVztZQUN0RSxLQUFLLE1BQU1ELFVBQVVILFdBQVc7Z0JBQzVCLElBQUlHLFVBQVUsSUFBSSxDQUFDZCxRQUFRLEVBQUU7b0JBQ3pCdkMsS0FBS3VELEtBQUssQ0FBQyxDQUFDLDJCQUEyQixFQUFFRixPQUFPLE1BQU0sRUFBRSxJQUFJLENBQUNiLGdCQUFnQixDQUFDLHlCQUF5QixFQUFFYSxPQUFPRyxXQUFXLEdBQUcsZ0NBQWdDLENBQUM7Z0JBQ25LO1lBQ0o7WUFDQSwyRUFBMkU7WUFDM0UsZ0NBQWdDO1lBQ2hDLElBQUksYUFBYSxJQUFJLENBQUNqQixRQUFRLEVBQUU7Z0JBQzVCdkMsS0FBS3VELEtBQUssQ0FBQyxDQUFDLDRCQUE0QixFQUFFLElBQUksQ0FBQ2YsZ0JBQWdCLENBQUMsc0RBQXNELENBQUM7WUFDM0g7WUFDQSwwRUFBMEU7WUFDMUUsWUFBWTtZQUNaLElBQUksQ0FBQy9DLE1BQU0wRCxZQUFZLENBQUNNLElBQUksQ0FBQyxDQUFDSixTQUFTQSxVQUFVLElBQUksQ0FBQ2QsUUFBUSxHQUFHO2dCQUM3RHZDLEtBQUt1RCxLQUFLLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLENBQUNmLGdCQUFnQixDQUFDLDhDQUE4QyxDQUFDO1lBQ3BIO1FBQ0o7SUFDSjtJQUNBOzs7OztHQUtELEdBQUdrQixRQUFRTCxNQUFNLEVBQUU7UUFDZCx5RUFBeUU7UUFDekUsSUFBSSxDQUFDLENBQUMsR0FBRzVELE1BQU1rRSxZQUFZLEVBQUVOLFNBQVMsT0FBTzdELGtCQUFrQm9FLHdCQUF3QjtRQUN2RixzQkFBc0I7UUFDdEIsT0FBTyxJQUFJLENBQUNsQixPQUFPLENBQUNXLE9BQU87SUFDL0I7SUFDQTs7R0FFRCxHQUFHLE1BQU1RLFFBQVFDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO1FBQzlCLGlEQUFpRDtRQUNqRCxNQUFNQyxVQUFVLElBQUksQ0FBQ04sT0FBTyxDQUFDSSxRQUFRVCxNQUFNO1FBQzNDLG1DQUFtQztRQUNuQyxNQUFNWSxpQkFBaUI7WUFDbkJDLEtBQUtKO1FBQ1Q7UUFDQUcsZUFBZUUsVUFBVSxHQUFHO1lBQ3hCQyxjQUFjTCxRQUFRTSxpQkFBaUIsQ0FBQ0MsT0FBTztRQUNuRDtRQUNBLDZDQUE2QztRQUM3QyxNQUFNQywwQkFBMEI7WUFDNUJ2QixVQUFVLElBQUksQ0FBQ2QsVUFBVSxDQUFDYyxRQUFRO1lBQ2xDbUIsWUFDQSxzQkFBc0I7WUFDdEJKLFFBQVFRLHVCQUF1QixJQUFJO2dCQUMvQkMscUJBQXFCO1lBQ3pCO1FBQ0o7UUFDQSwrQ0FBK0M7UUFDL0NELHdCQUF3QkosVUFBVSxDQUFDTSxVQUFVLEdBQUcsSUFBSSxDQUFDbEMsUUFBUSxDQUFDa0MsVUFBVTtRQUN4RSwwRUFBMEU7UUFDMUUsd0VBQXdFO1FBQ3hFLCtDQUErQztRQUMvQyxNQUFNQyxXQUFXLE1BQU0sSUFBSSxDQUFDNUMsa0JBQWtCLENBQUM2QyxHQUFHLENBQUM7WUFDL0NDLFlBQVk7UUFDaEIsR0FBRztZQUNDLE9BQU90Riw0QkFBNEJ1RiwwQkFBMEIsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQ3JELG1CQUFtQixFQUFFd0MsZ0JBQWdCO2dCQUN6RyxPQUFPMUUscUNBQXFDd0YsbUNBQW1DLENBQUNELElBQUksQ0FBQyxJQUFJLENBQUNwRCw0QkFBNEIsRUFBRTZDLHlCQUF5QixDQUFDUztvQkFDOUksSUFBSUM7b0JBQ0osbUVBQW1FO29CQUNuRSw2QkFBNkI7b0JBQzdCLElBQUksSUFBSSxDQUFDckMsZ0JBQWdCLEVBQUU7d0JBQ3ZCLElBQUksQ0FBQ2YsdUJBQXVCLENBQUMsQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUNlLGdCQUFnQixDQUFDc0MsSUFBSSxDQUFDLE1BQU0sQ0FBQztvQkFDOUY7b0JBQ0Esb0VBQW9FO29CQUNwRSxPQUFPLElBQUksQ0FBQ3BDLE9BQU87d0JBQ2YsS0FBSzs0QkFDRCw2REFBNkQ7NEJBQzdELGdDQUFnQzs0QkFDaENrQyxzQkFBc0JHLFlBQVksR0FBRzs0QkFDckMsSUFBSSxDQUFDdEQsdUJBQXVCLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBRTtnQ0FDMUNpQixTQUFTLElBQUksQ0FBQ0EsT0FBTzs0QkFDekI7NEJBQ0E7d0JBQ0osS0FBSzs0QkFDRCw0REFBNEQ7NEJBQzVELCtCQUErQjs0QkFDL0JrQyxzQkFBc0JJLFdBQVcsR0FBRzs0QkFDcEM7d0JBQ0osS0FBSzs0QkFDRCw4REFBOEQ7NEJBQzlELG1EQUFtRDs0QkFDbkRKLHNCQUFzQkssa0JBQWtCLEdBQUc7NEJBQzNDO3dCQUNKOzRCQUNJO29CQUNSO29CQUNBLGtFQUFrRTtvQkFDbEUsb0VBQW9FO29CQUNwRSw4QkFBOEI7b0JBQzlCTCxzQkFBc0JNLFVBQVUsS0FBSyxJQUFJLENBQUMvQyxRQUFRLENBQUMrQyxVQUFVLElBQUk7b0JBQ2pFLG1FQUFtRTtvQkFDbkUseURBQXlEO29CQUN6RCxNQUFNQyxpQkFBaUIsQ0FBQyxHQUFHekYsY0FBYzBGLFlBQVksRUFBRTFCLFNBQVM7d0JBQzVEaEIsU0FBUyxJQUFJLENBQUNBLE9BQU87b0JBQ3pCLEdBQUc7d0JBQ0NsQixhQUFhLElBQUksQ0FBQ0EsV0FBVzt3QkFDN0JELGFBQWEsSUFBSSxDQUFDQSxXQUFXO3dCQUM3QkUseUJBQXlCLElBQUksQ0FBQ0EsdUJBQXVCO29CQUN6RDtvQkFDQSxtREFBbUQ7b0JBQ25ELE1BQU1JLFFBQVEsQ0FBQyxHQUFHcEMsNkJBQTZCNEYsMkJBQTJCLEVBQUUsSUFBSSxDQUFDakQsZ0JBQWdCO29CQUNoR3lDLENBQUFBLG1DQUFtQyxDQUFDLEdBQUd0RixRQUFRK0YsU0FBUyxJQUFJQyxxQkFBcUIsRUFBQyxLQUFNLE9BQU8sS0FBSyxJQUFJVixpQ0FBaUN6RCxHQUFHLENBQUMsY0FBY1M7b0JBQzVKLE9BQU8sQ0FBQyxHQUFHdEMsUUFBUStGLFNBQVMsSUFBSUUsS0FBSyxDQUFDaEcsV0FBV2lHLHlCQUF5QixDQUFDQyxVQUFVLEVBQUU7d0JBQ25GQyxVQUFVLENBQUMsMEJBQTBCLEVBQUU5RCxNQUFNLENBQUM7d0JBQzlDK0QsWUFBWTs0QkFDUixjQUFjL0Q7d0JBQ2xCO29CQUNKLEdBQUc7d0JBQ0MsSUFBSWdFO3dCQUNKLDBCQUEwQjt3QkFDekIsSUFBR3ZHLFlBQVl3RyxVQUFVLEVBQUU7NEJBQ3hCdkUsYUFBYSxJQUFJLENBQUNBLFdBQVc7NEJBQzdCRCw4QkFBOEIsSUFBSSxDQUFDQSw0QkFBNEI7d0JBQ25FO3dCQUNBLE1BQU15RSxNQUFNLE1BQU1uQyxRQUFRdUIsZ0JBQWdCOzRCQUN0Q2EsUUFBUXJDLFFBQVFxQyxNQUFNLEdBQUcsQ0FBQyxHQUFHOUYsd0JBQXdCK0Ysc0JBQXNCLEVBQUV0QyxRQUFRcUMsTUFBTSxJQUFJRTt3QkFDbkc7d0JBQ0F2QyxRQUFRUSx1QkFBdUIsQ0FBQ2dDLFlBQVksR0FBR3ZCLHNCQUFzQnVCLFlBQVk7d0JBQ2pGLE1BQU1DLFFBQVF6SCxHQUFHLENBQUNpRyxzQkFBc0J5QixrQkFBa0IsSUFBSSxFQUFFO3dCQUMvRCxJQUFHL0csWUFBWWdILGVBQWUsRUFBRTFCO3dCQUNqQ2pCLFFBQVFRLHVCQUF1QixDQUFDb0MsU0FBUyxHQUFHLENBQUNWLDhCQUE4QmpCLHNCQUFzQjRCLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSVgsNEJBQTRCZixJQUFJLENBQUM7d0JBQzNKLDREQUE0RDt3QkFDNUQsMERBQTBEO3dCQUMxRCxRQUFRO3dCQUNSLE1BQU0yQixlQUFlLElBQUksQ0FBQ3BGLG1CQUFtQixDQUFDcUYsUUFBUTt3QkFDdEQsSUFBSUQsZ0JBQWdCQSxhQUFhRSxjQUFjLEVBQUU7NEJBQzdDLE1BQU1DLFVBQVUsSUFBSUMsUUFBUWQsSUFBSWEsT0FBTzs0QkFDdkMsSUFBSSxDQUFDLEdBQUc1RyxnQkFBZ0I4RyxvQkFBb0IsRUFBRUYsU0FBU0gsYUFBYUUsY0FBYyxHQUFHO2dDQUNqRixPQUFPLElBQUlJLFNBQVNoQixJQUFJaUIsSUFBSSxFQUFFO29DQUMxQkMsUUFBUWxCLElBQUlrQixNQUFNO29DQUNsQkMsWUFBWW5CLElBQUltQixVQUFVO29DQUMxQk47Z0NBQ0o7NEJBQ0o7d0JBQ0o7d0JBQ0EsT0FBT2I7b0JBQ1g7Z0JBQ0o7WUFDSjtRQUNKO1FBQ0EseUVBQXlFO1FBQ3pFLGtCQUFrQjtRQUNsQixJQUFJLENBQUV6QixDQUFBQSxvQkFBb0J5QyxRQUFPLEdBQUk7WUFDakMscUVBQXFFO1lBQ3JFLE9BQU8sQ0FBQyxHQUFHM0gsa0JBQWtCK0gsaUNBQWlDO1FBQ2xFO1FBQ0EsSUFBSTdDLFNBQVNzQyxPQUFPLENBQUNqRyxHQUFHLENBQUMseUJBQXlCO1lBQzlDLG9FQUFvRTtZQUNwRSw2RUFBNkU7WUFDN0UsTUFBTSxJQUFJZ0MsTUFBTTtRQUNwQiw2RUFBNkU7UUFDN0UsaUVBQWlFO1FBQ2pFLDJFQUEyRTtRQUMzRSw2RUFBNkU7UUFDN0UsMEVBQTBFO1FBQzFFLG1DQUFtQztRQUNuQyxzQkFBc0I7UUFDdEIsOENBQThDO1FBQzlDLElBQUk7UUFDSix5RUFBeUU7UUFDekUsZ0RBQWdEO1FBQ2hELG9FQUFvRTtRQUNwRSwwREFBMEQ7UUFDMUQscUVBQXFFO1FBQ3JFLHlEQUF5RDtRQUN6RDtRQUNBLElBQUkyQixTQUFTc0MsT0FBTyxDQUFDOUgsR0FBRyxDQUFDLHlCQUF5QixLQUFLO1lBQ25ELGlFQUFpRTtZQUNqRSxNQUFNLElBQUk2RCxNQUFNO1FBQ3BCO1FBQ0EsT0FBTzJCO0lBQ1g7SUFDQSxNQUFNOEMsT0FBTzFELE9BQU8sRUFBRUMsT0FBTyxFQUFFO1FBQzNCLElBQUk7WUFDQSx5Q0FBeUM7WUFDekMsTUFBTVcsV0FBVyxNQUFNLElBQUksQ0FBQ2IsT0FBTyxDQUFDQyxTQUFTQztZQUM3Qyx1Q0FBdUM7WUFDdkMsT0FBT1c7UUFDWCxFQUFFLE9BQU8rQyxLQUFLO1lBQ1YsK0RBQStEO1lBQy9ELE1BQU0vQyxXQUFXLENBQUMsR0FBRzNFLHFCQUFxQjJILG1CQUFtQixFQUFFRDtZQUMvRCxJQUFJLENBQUMvQyxVQUFVLE1BQU0rQztZQUNyQix3Q0FBd0M7WUFDeEMsT0FBTy9DO1FBQ1g7SUFDSjtBQUNKO0FBQ0EsTUFBTXZGLFdBQVdSLHFCQUVqQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmpzPzRlNTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBBcHBSb3V0ZVJvdXRlTW9kdWxlOiBudWxsLFxuICAgIGRlZmF1bHQ6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgQXBwUm91dGVSb3V0ZU1vZHVsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBcHBSb3V0ZVJvdXRlTW9kdWxlO1xuICAgIH0sXG4gICAgZGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfZGVmYXVsdDtcbiAgICB9XG59KTtcbmNvbnN0IF9yb3V0ZW1vZHVsZSA9IHJlcXVpcmUoXCIuLi9yb3V0ZS1tb2R1bGVcIik7XG5jb25zdCBfcmVxdWVzdGFzeW5jc3RvcmFnZXdyYXBwZXIgPSByZXF1aXJlKFwiLi4vLi4vLi4vYXN5bmMtc3RvcmFnZS9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2Utd3JhcHBlclwiKTtcbmNvbnN0IF9zdGF0aWNnZW5lcmF0aW9uYXN5bmNzdG9yYWdld3JhcHBlciA9IHJlcXVpcmUoXCIuLi8uLi8uLi9hc3luYy1zdG9yYWdlL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2Utd3JhcHBlclwiKTtcbmNvbnN0IF9yZXNwb25zZWhhbmRsZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvcmVzcG9uc2UtaGFuZGxlcnNcIik7XG5jb25zdCBfaHR0cCA9IHJlcXVpcmUoXCIuLi8uLi8uLi93ZWIvaHR0cFwiKTtcbmNvbnN0IF9wYXRjaGZldGNoID0gcmVxdWlyZShcIi4uLy4uLy4uL2xpYi9wYXRjaC1mZXRjaFwiKTtcbmNvbnN0IF90cmFjZXIgPSByZXF1aXJlKFwiLi4vLi4vLi4vbGliL3RyYWNlL3RyYWNlclwiKTtcbmNvbnN0IF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbGliL3RyYWNlL2NvbnN0YW50c1wiKTtcbmNvbnN0IF9nZXRwYXRobmFtZWZyb21hYnNvbHV0ZXBhdGggPSByZXF1aXJlKFwiLi9oZWxwZXJzL2dldC1wYXRobmFtZS1mcm9tLWFic29sdXRlLXBhdGhcIik7XG5jb25zdCBfcHJveHlyZXF1ZXN0ID0gcmVxdWlyZShcIi4vaGVscGVycy9wcm94eS1yZXF1ZXN0XCIpO1xuY29uc3QgX3Jlc29sdmVoYW5kbGVyZXJyb3IgPSByZXF1aXJlKFwiLi9oZWxwZXJzL3Jlc29sdmUtaGFuZGxlci1lcnJvclwiKTtcbmNvbnN0IF9sb2cgPSAvKiNfX1BVUkVfXyovIF9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQocmVxdWlyZShcIi4uLy4uLy4uLy4uL2J1aWxkL291dHB1dC9sb2dcIikpO1xuY29uc3QgX2F1dG9pbXBsZW1lbnRtZXRob2RzID0gcmVxdWlyZShcIi4vaGVscGVycy9hdXRvLWltcGxlbWVudC1tZXRob2RzXCIpO1xuY29uc3QgX2dldG5vbnN0YXRpY21ldGhvZHMgPSByZXF1aXJlKFwiLi9oZWxwZXJzL2dldC1ub24tc3RhdGljLW1ldGhvZHNcIik7XG5jb25zdCBfcmVxdWVzdGNvb2tpZXMgPSByZXF1aXJlKFwiLi4vLi4vLi4vd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL3JlcXVlc3QtY29va2llc1wiKTtcbmNvbnN0IF9yb3V0ZWtpbmQgPSByZXF1aXJlKFwiLi4vLi4vcm91dGUta2luZFwiKTtcbmNvbnN0IF9wYXJzZWR1cmxxdWVyeXRvcGFyYW1zID0gcmVxdWlyZShcIi4vaGVscGVycy9wYXJzZWQtdXJsLXF1ZXJ5LXRvLXBhcmFtc1wiKTtcbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkge1xuICAgIGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpO1xuICAgIHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTtcbiAgICByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uKG5vZGVJbnRlcm9wKSB7XG4gICAgICAgIHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDtcbiAgICB9KShub2RlSW50ZXJvcCk7XG59XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX3dpbGRjYXJkKG9iaiwgbm9kZUludGVyb3ApIHtcbiAgICBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWZhdWx0OiBvYmpcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTtcbiAgICBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlLmdldChvYmopO1xuICAgIH1cbiAgICB2YXIgbmV3T2JqID0ge307XG4gICAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICAgIGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7XG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICAgIGNhY2hlLnNldChvYmosIG5ld09iaik7XG4gICAgfVxuICAgIHJldHVybiBuZXdPYmo7XG59XG4vLyBUaGVzZSBhcmUgaW1wb3J0ZWQgd2VpcmRseSBsaWtlIHRoaXMgYmVjYXVzZSBvZiB0aGUgd2F5IHRoYXQgdGhlIGJ1bmRsaW5nXG4vLyB3b3Jrcy4gV2UgbmVlZCB0byBpbXBvcnQgdGhlIGJ1aWx0IGZpbGVzIGZyb20gdGhlIGRpc3QgZGlyZWN0b3J5LCBidXQgd2Vcbi8vIGNhbid0IGRvIHRoYXQgZGlyZWN0bHkgYmVjYXVzZSB3ZSBuZWVkIHR5cGVzIGZyb20gdGhlIHNvdXJjZSBmaWxlcy4gU28gd2Vcbi8vIGltcG9ydCB0aGUgdHlwZXMgZnJvbSB0aGUgc291cmNlIGZpbGVzIGFuZCB0aGVuIGltcG9ydCB0aGUgYnVpbHQgZmlsZXMuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UgIH0gPSByZXF1aXJlKFwibmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlcXVlc3QtYXN5bmMtc3RvcmFnZVwiKTtcbmNvbnN0IHsgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSAgfSA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZVwiKTtcbmNvbnN0IHNlcnZlckhvb2tzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9ob29rcy1zZXJ2ZXItY29udGV4dFwiKTtcbmNvbnN0IGhlYWRlckhvb2tzID0gcmVxdWlyZShcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9oZWFkZXJzXCIpO1xuY29uc3QgeyBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCAgfSA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvc3RhdGljLWdlbmVyYXRpb24tYmFpbG91dFwiKTtcbmNvbnN0IHsgYWN0aW9uQXN5bmNTdG9yYWdlICB9ID0gcmVxdWlyZShcIm5leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hY3Rpb24tYXN5bmMtc3RvcmFnZVwiKTtcbmNsYXNzIEFwcFJvdXRlUm91dGVNb2R1bGUgZXh0ZW5kcyBfcm91dGVtb2R1bGUuUm91dGVNb2R1bGUge1xuICAgIHN0YXRpYyBpcyhyb3V0ZSkge1xuICAgICAgICByZXR1cm4gcm91dGUuZGVmaW5pdGlvbi5raW5kID09PSBfcm91dGVraW5kLlJvdXRlS2luZC5BUFBfUk9VVEU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHsgdXNlcmxhbmQgLCBkZWZpbml0aW9uICwgcmVzb2x2ZWRQYWdlUGF0aCAsIG5leHRDb25maWdPdXRwdXQgIH0pe1xuICAgICAgICBzdXBlcih7XG4gICAgICAgICAgICB1c2VybGFuZCxcbiAgICAgICAgICAgIGRlZmluaXRpb25cbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgcmVxdWVzdCBhc3luYyBzdG9yYWdlLlxuICAgKi8gdGhpcy5yZXF1ZXN0QXN5bmNTdG9yYWdlID0gcmVxdWVzdEFzeW5jU3RvcmFnZTtcbiAgICAgICAgLyoqXG4gICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBzdGF0aWMgZ2VuZXJhdGlvbiBhc3luYyBzdG9yYWdlLlxuICAgKi8gdGhpcy5zdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlID0gc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZTtcbiAgICAgICAgLyoqXG4gICAqIEFuIGludGVyZmFjZSB0byBjYWxsIHNlcnZlciBob29rcyB3aGljaCBpbnRlcmFjdCB3aXRoIHRoZSB1bmRlcmx5aW5nXG4gICAqIHN0b3JhZ2UuXG4gICAqLyB0aGlzLnNlcnZlckhvb2tzID0gc2VydmVySG9va3M7XG4gICAgICAgIC8qKlxuICAgKiBBbiBpbnRlcmZhY2UgdG8gY2FsbCBoZWFkZXIgaG9va3Mgd2hpY2ggaW50ZXJhY3Qgd2l0aCB0aGUgdW5kZXJseWluZ1xuICAgKiByZXF1ZXN0IHN0b3JhZ2UuXG4gICAqLyB0aGlzLmhlYWRlckhvb2tzID0gaGVhZGVySG9va3M7XG4gICAgICAgIC8qKlxuICAgKiBBbiBpbnRlcmZhY2UgdG8gY2FsbCBzdGF0aWMgZ2VuZXJhdGlvbiBiYWlsb3V0IGhvb2tzIHdoaWNoIGludGVyYWN0IHdpdGhcbiAgICogdGhlIHVuZGVybHlpbmcgc3RhdGljIGdlbmVyYXRpb24gc3RvcmFnZS5cbiAgICovIHRoaXMuc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgPSBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dDtcbiAgICAgICAgLyoqXG4gICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBtdXRhdGlvbiByZWxhdGVkIGFzeW5jIHN0b3JhZ2UsIHN1Y2ggYXMgbXV0YXRpb25zIG9mXG4gICAqIGNvb2tpZXMuXG4gICAqLyB0aGlzLmFjdGlvbkFzeW5jU3RvcmFnZSA9IGFjdGlvbkFzeW5jU3RvcmFnZTtcbiAgICAgICAgdGhpcy5yZXNvbHZlZFBhZ2VQYXRoID0gcmVzb2x2ZWRQYWdlUGF0aDtcbiAgICAgICAgdGhpcy5uZXh0Q29uZmlnT3V0cHV0ID0gbmV4dENvbmZpZ091dHB1dDtcbiAgICAgICAgLy8gQXV0b21hdGljYWxseSBpbXBsZW1lbnQgc29tZSBtZXRob2RzIGlmIHRoZXkgYXJlbid0IGltcGxlbWVudGVkIGJ5IHRoZVxuICAgICAgICAvLyB1c2VybGFuZCBtb2R1bGUuXG4gICAgICAgIHRoaXMubWV0aG9kcyA9ICgwLCBfYXV0b2ltcGxlbWVudG1ldGhvZHMuYXV0b0ltcGxlbWVudE1ldGhvZHMpKHVzZXJsYW5kKTtcbiAgICAgICAgLy8gR2V0IHRoZSBub24tc3RhdGljIG1ldGhvZHMgZm9yIHRoaXMgcm91dGUuXG4gICAgICAgIHRoaXMubm9uU3RhdGljTWV0aG9kcyA9ICgwLCBfZ2V0bm9uc3RhdGljbWV0aG9kcy5nZXROb25TdGF0aWNNZXRob2RzKSh1c2VybGFuZCk7XG4gICAgICAgIC8vIEdldCB0aGUgZHluYW1pYyBwcm9wZXJ0eSBmcm9tIHRoZSB1c2VybGFuZCBtb2R1bGUuXG4gICAgICAgIHRoaXMuZHluYW1pYyA9IHRoaXMudXNlcmxhbmQuZHluYW1pYztcbiAgICAgICAgaWYgKHRoaXMubmV4dENvbmZpZ091dHB1dCA9PT0gXCJleHBvcnRcIikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmR5bmFtaWMgfHwgdGhpcy5keW5hbWljID09PSBcImF1dG9cIikge1xuICAgICAgICAgICAgICAgIHRoaXMuZHluYW1pYyA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5keW5hbWljID09PSBcImZvcmNlLWR5bmFtaWNcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwb3J0IGNvbnN0IGR5bmFtaWMgPSBcImZvcmNlLWR5bmFtaWNcIiBvbiBwYWdlIFwiJHtkZWZpbml0aW9uLnBhdGhuYW1lfVwiIGNhbm5vdCBiZSB1c2VkIHdpdGggXCJvdXRwdXQ6IGV4cG9ydFwiLiBTZWUgbW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FkdmFuY2VkLWZlYXR1cmVzL3N0YXRpYy1odG1sLWV4cG9ydGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFdlIG9ubHkgd2FybiBpbiBkZXZlbG9wbWVudCBhZnRlciBoZXJlLCBzbyByZXR1cm4gaWYgd2UncmUgbm90IGluXG4gICAgICAgIC8vIGRldmVsb3BtZW50LlxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xuICAgICAgICAgICAgLy8gUHJpbnQgZXJyb3IgaW4gZGV2ZWxvcG1lbnQgaWYgdGhlIGV4cG9ydGVkIGhhbmRsZXJzIGFyZSBpbiBsb3dlcmNhc2UsIG9ubHlcbiAgICAgICAgICAgIC8vIHVwcGVyY2FzZSBoYW5kbGVycyBhcmUgc3VwcG9ydGVkLlxuICAgICAgICAgICAgY29uc3QgbG93ZXJjYXNlZCA9IF9odHRwLkhUVFBfTUVUSE9EUy5tYXAoKG1ldGhvZCk9Pm1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIGxvd2VyY2FzZWQpe1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2QgaW4gdGhpcy51c2VybGFuZCkge1xuICAgICAgICAgICAgICAgICAgICBfbG9nLmVycm9yKGBEZXRlY3RlZCBsb3dlcmNhc2UgbWV0aG9kICcke21ldGhvZH0nIGluICcke3RoaXMucmVzb2x2ZWRQYWdlUGF0aH0nLiBFeHBvcnQgdGhlIHVwcGVyY2FzZSAnJHttZXRob2QudG9VcHBlckNhc2UoKX0nIG1ldGhvZCBuYW1lIHRvIGZpeCB0aGlzIGVycm9yLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFByaW50IGVycm9yIGlmIHRoZSBtb2R1bGUgZXhwb3J0cyBhIGRlZmF1bHQgaGFuZGxlciwgdGhleSBtdXN0IHVzZSBuYW1lZFxuICAgICAgICAgICAgLy8gZXhwb3J0cyBmb3IgZWFjaCBIVFRQIG1ldGhvZC5cbiAgICAgICAgICAgIGlmIChcImRlZmF1bHRcIiBpbiB0aGlzLnVzZXJsYW5kKSB7XG4gICAgICAgICAgICAgICAgX2xvZy5lcnJvcihgRGV0ZWN0ZWQgZGVmYXVsdCBleHBvcnQgaW4gJyR7dGhpcy5yZXNvbHZlZFBhZ2VQYXRofScuIEV4cG9ydCBhIG5hbWVkIGV4cG9ydCBmb3IgZWFjaCBIVFRQIG1ldGhvZCBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gbWV0aG9kcyBleHBvcnRlZCBieSB0aGlzIG1vZHVsZSwgdGhlbiByZXR1cm4gYSBub3QgZm91bmRcbiAgICAgICAgICAgIC8vIHJlc3BvbnNlLlxuICAgICAgICAgICAgaWYgKCFfaHR0cC5IVFRQX01FVEhPRFMuc29tZSgobWV0aG9kKT0+bWV0aG9kIGluIHRoaXMudXNlcmxhbmQpKSB7XG4gICAgICAgICAgICAgICAgX2xvZy5lcnJvcihgTm8gSFRUUCBtZXRob2RzIGV4cG9ydGVkIGluICcke3RoaXMucmVzb2x2ZWRQYWdlUGF0aH0nLiBFeHBvcnQgYSBuYW1lZCBleHBvcnQgZm9yIGVhY2ggSFRUUCBtZXRob2QuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAqIFJlc29sdmVzIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0gbWV0aG9kIHRoZSByZXF1ZXN0ZWQgbWV0aG9kXG4gICAqIEByZXR1cm5zIHRoZSBoYW5kbGVyIGZ1bmN0aW9uIGZvciB0aGUgZ2l2ZW4gbWV0aG9kXG4gICAqLyByZXNvbHZlKG1ldGhvZCkge1xuICAgICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgcmVxdWVzdGVkIG1ldGhvZCBpcyBhIHZhbGlkIG1ldGhvZCAodG8gcHJldmVudCBSQ0UncykuXG4gICAgICAgIGlmICghKDAsIF9odHRwLmlzSFRUUE1ldGhvZCkobWV0aG9kKSkgcmV0dXJuIF9yZXNwb25zZWhhbmRsZXJzLmhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBoYW5kbGVyLlxuICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RzW21ldGhvZF07XG4gICAgfVxuICAgIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgcm91dGUgaGFuZGxlci5cbiAgICovIGFzeW5jIGV4ZWN1dGUocmVxdWVzdCwgY29udGV4dCkge1xuICAgICAgICAvLyBHZXQgdGhlIGhhbmRsZXIgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBtZXRob2QuXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLnJlc29sdmUocmVxdWVzdC5tZXRob2QpO1xuICAgICAgICAvLyBHZXQgdGhlIGNvbnRleHQgZm9yIHRoZSByZXF1ZXN0LlxuICAgICAgICBjb25zdCByZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgICAgIHJlcTogcmVxdWVzdFxuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0Q29udGV4dC5yZW5kZXJPcHRzID0ge1xuICAgICAgICAgICAgcHJldmlld1Byb3BzOiBjb250ZXh0LnByZXJlbmRlck1hbmlmZXN0LnByZXZpZXdcbiAgICAgICAgfTtcbiAgICAgICAgLy8gR2V0IHRoZSBjb250ZXh0IGZvciB0aGUgc3RhdGljIGdlbmVyYXRpb24uXG4gICAgICAgIGNvbnN0IHN0YXRpY0dlbmVyYXRpb25Db250ZXh0ID0ge1xuICAgICAgICAgICAgcGF0aG5hbWU6IHRoaXMuZGVmaW5pdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICAgIHJlbmRlck9wdHM6IC8vIElmIHRoZSBzdGF0aWNHZW5lcmF0aW9uQ29udGV4dCBpcyBub3QgcHJvdmlkZWQgdGhlbiB3ZSBkZWZhdWx0IHRvXG4gICAgICAgICAgICAvLyB0aGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICAgICAgICBjb250ZXh0LnN0YXRpY0dlbmVyYXRpb25Db250ZXh0ID8/IHtcbiAgICAgICAgICAgICAgICBzdXBwb3J0c0R5bmFtaWNIVE1MOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBBZGQgdGhlIGZldGNoQ2FjaGUgb3B0aW9uIHRvIHRoZSByZW5kZXJPcHRzLlxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQ29udGV4dC5yZW5kZXJPcHRzLmZldGNoQ2FjaGUgPSB0aGlzLnVzZXJsYW5kLmZldGNoQ2FjaGU7XG4gICAgICAgIC8vIFJ1biB0aGUgaGFuZGxlciB3aXRoIHRoZSByZXF1ZXN0IEFzeW5jTG9jYWxTdG9yYWdlIHRvIGluamVjdCB0aGUgaGVscGVyXG4gICAgICAgIC8vIHN1cHBvcnQuIFdlIHNldCB0aGlzIHRvIGB1bmtub3duYCBiZWNhdXNlIHRoZSB0eXBlIGlzIG5vdCBrbm93biB1bnRpbFxuICAgICAgICAvLyBydW50aW1lIHdoZW4gd2UgZG8gYSBpbnN0YW5jZW9mIGNoZWNrIGJlbG93LlxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWN0aW9uQXN5bmNTdG9yYWdlLnJ1bih7XG4gICAgICAgICAgICBpc0FwcFJvdXRlOiB0cnVlXG4gICAgICAgIH0sICgpPT57XG4gICAgICAgICAgICByZXR1cm4gX3JlcXVlc3Rhc3luY3N0b3JhZ2V3cmFwcGVyLlJlcXVlc3RBc3luY1N0b3JhZ2VXcmFwcGVyLndyYXAodGhpcy5yZXF1ZXN0QXN5bmNTdG9yYWdlLCByZXF1ZXN0Q29udGV4dCwgKCk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N0YXRpY2dlbmVyYXRpb25hc3luY3N0b3JhZ2V3cmFwcGVyLlN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyLndyYXAodGhpcy5zdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQ29udGV4dCwgKHN0YXRpY0dlbmVyYXRpb25TdG9yZSk9PntcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9nZXRUcmFjZXJfZ2V0Um9vdFNwYW5BdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgd2Ugc2hvdWxkIGJhaWwgb3V0IG9mIHN0YXRpYyBnZW5lcmF0aW9uIGJhc2VkIG9uXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhdmluZyBub24tc3RhdGljIG1ldGhvZHMuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5vblN0YXRpY01ldGhvZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQoYG5vbi1zdGF0aWMgbWV0aG9kcyB1c2VkICR7dGhpcy5ub25TdGF0aWNNZXRob2RzLmpvaW4oXCIsIFwiKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHN0YXRpYyBnZW5lcmF0aW9uIHN0b3JlIGJhc2VkIG9uIHRoZSBkeW5hbWljIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2godGhpcy5keW5hbWljKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmb3JjZS1keW5hbWljXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGR5bmFtaWMgcHJvcGVydHkgaXMgc2V0IHRvIGZvcmNlLWR5bmFtaWMsIHNvIHdlIHNob3VsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcmNlIHRoZSBwYWdlIHRvIGJlIGR5bmFtaWMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmZvcmNlRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0aWNHZW5lcmF0aW9uQmFpbG91dChgZm9yY2UtZHluYW1pY2AsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHluYW1pYzogdGhpcy5keW5hbWljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZm9yY2Utc3RhdGljXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGR5bmFtaWMgcHJvcGVydHkgaXMgc2V0IHRvIGZvcmNlLXN0YXRpYywgc28gd2Ugc2hvdWxkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yY2UgdGhlIHBhZ2UgdG8gYmUgc3RhdGljLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5mb3JjZVN0YXRpYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZHluYW1pYyBwcm9wZXJ0eSBpcyBzZXQgdG8gZXJyb3IsIHNvIHdlIHNob3VsZCB0aHJvdyBhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIGlmIHRoZSBwYWdlIGlzIGJlaW5nIHN0YXRpY2FsbHkgZ2VuZXJhdGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5keW5hbWljU2hvdWxkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgc3RhdGljIGdlbmVyYXRpb24gc3RvcmUgZG9lcyBub3QgaGF2ZSBhIHJldmFsaWRhdGUgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0LCB0aGVuIHdlIHNob3VsZCBzZXQgaXQgdGhlIHJldmFsaWRhdGUgdmFsdWUgZnJvbSB0aGUgdXNlcmxhbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gbW9kdWxlIG9yIGRlZmF1bHQgdG8gZmFsc2UuXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25TdG9yZS5yZXZhbGlkYXRlID8/PSB0aGlzLnVzZXJsYW5kLnJldmFsaWRhdGUgPz8gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdyYXAgdGhlIHJlcXVlc3Qgc28gd2UgY2FuIGFkZCBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgdG8gY2FzZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhhdCBtaWdodCBjaGFuZ2UgaXQncyBvdXRwdXQgb3IgYWZmZWN0IHRoZSByZW5kZXJpbmcuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdyYXBwZWRSZXF1ZXN0ID0gKDAsIF9wcm94eXJlcXVlc3QucHJveHlSZXF1ZXN0KShyZXF1ZXN0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkeW5hbWljOiB0aGlzLmR5bmFtaWNcbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVySG9va3M6IHRoaXMuaGVhZGVySG9va3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJIb29rczogdGhpcy5zZXJ2ZXJIb29rcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0OiB0aGlzLnN0YXRpY0dlbmVyYXRpb25CYWlsb3V0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBwcm9wYWdhdGUgdGhpcyBwYXRobmFtZSBmcm9tIHJvdXRlIG1hdGNoZXJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm91dGUgPSAoMCwgX2dldHBhdGhuYW1lZnJvbWFic29sdXRlcGF0aC5nZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgpKHRoaXMucmVzb2x2ZWRQYWdlUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIChfZ2V0VHJhY2VyX2dldFJvb3RTcGFuQXR0cmlidXRlcyA9ICgwLCBfdHJhY2VyLmdldFRyYWNlcikoKS5nZXRSb290U3BhbkF0dHJpYnV0ZXMoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9nZXRUcmFjZXJfZ2V0Um9vdFNwYW5BdHRyaWJ1dGVzLnNldChcIm5leHQucm91dGVcIiwgcm91dGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF90cmFjZXIuZ2V0VHJhY2VyKSgpLnRyYWNlKF9jb25zdGFudHMuQXBwUm91dGVSb3V0ZUhhbmRsZXJzU3Bhbi5ydW5IYW5kbGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuTmFtZTogYGV4ZWN1dGluZyBhcGkgcm91dGUgKGFwcCkgJHtyb3V0ZX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmV4dC5yb3V0ZVwiOiByb3V0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBhc3luYyAoKT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9zdGF0aWNHZW5lcmF0aW9uU3RvcmVfdGFncztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBhdGNoIHRoZSBnbG9iYWwgZmV0Y2guXG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3BhdGNoZmV0Y2gucGF0Y2hGZXRjaCkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlckhvb2tzOiB0aGlzLnNlcnZlckhvb2tzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2U6IHRoaXMuc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBoYW5kbGVyKHdyYXBwZWRSZXF1ZXN0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBjb250ZXh0LnBhcmFtcyA/ICgwLCBfcGFyc2VkdXJscXVlcnl0b3BhcmFtcy5wYXJzZWRVcmxRdWVyeVRvUGFyYW1zKShjb250ZXh0LnBhcmFtcykgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdGF0aWNHZW5lcmF0aW9uQ29udGV4dC5mZXRjaE1ldHJpY3MgPSBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZmV0Y2hNZXRyaWNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoc3RhdGljR2VuZXJhdGlvblN0b3JlLnBlbmRpbmdSZXZhbGlkYXRlcyB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3BhdGNoZmV0Y2guYWRkSW1wbGljaXRUYWdzKShzdGF0aWNHZW5lcmF0aW9uU3RvcmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdGF0aWNHZW5lcmF0aW9uQ29udGV4dC5mZXRjaFRhZ3MgPSAoX3N0YXRpY0dlbmVyYXRpb25TdG9yZV90YWdzID0gc3RhdGljR2VuZXJhdGlvblN0b3JlLnRhZ3MpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGljR2VuZXJhdGlvblN0b3JlX3RhZ3Muam9pbihcIixcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCdzIHBvc3NpYmxlIGNvb2tpZXMgd2VyZSBzZXQgaW4gdGhlIGhhbmRsZXIsIHNvIHdlIG5lZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIG1lcmdlIHRoZSBtb2RpZmllZCBjb29raWVzIGFuZCB0aGUgcmV0dXJuZWQgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhlcmUuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0U3RvcmUgPSB0aGlzLnJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0U3RvcmUgJiYgcmVxdWVzdFN0b3JlLm11dGFibGVDb29raWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlcy5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIF9yZXF1ZXN0Y29va2llcy5hcHBlbmRNdXRhYmxlQ29va2llcykoaGVhZGVycywgcmVxdWVzdFN0b3JlLm11dGFibGVDb29raWVzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHJlcy5ib2R5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHJlcy5zdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXNUZXh0OiByZXMuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIGRpZCd0IHJldHVybiBhIHZhbGlkIHJlc3BvbnNlLCB0aGVuIHJldHVybiB0aGUgaW50ZXJuYWxcbiAgICAgICAgLy8gZXJyb3IgcmVzcG9uc2UuXG4gICAgICAgIGlmICghKHJlc3BvbnNlIGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiB2YWxpZGF0ZSB0aGUgY29ycmVjdCBoYW5kbGluZyBiZWhhdmlvciwgbWF5YmUgbG9nIHNvbWV0aGluZz9cbiAgICAgICAgICAgIHJldHVybiAoMCwgX3Jlc3BvbnNlaGFuZGxlcnMuaGFuZGxlSW50ZXJuYWxTZXJ2ZXJFcnJvclJlc3BvbnNlKSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZS5oZWFkZXJzLmhhcyhcIngtbWlkZGxld2FyZS1yZXdyaXRlXCIpKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRoaXMgZXJyb3IgaW50byB0aGUgYE5leHRSZXNwb25zZS5yZXdyaXRlKClgIGZ1bmN0aW9uLlxuICAgICAgICAgICAgLy8gVE9ETy1BUFA6IHJlLWVuYWJsZSBzdXBwb3J0IGJlbG93IHdoZW4gd2UgY2FuIHByb3h5IHRoZXNlIHR5cGUgb2YgcmVxdWVzdHNcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5leHRSZXNwb25zZS5yZXdyaXRlKCkgd2FzIHVzZWQgaW4gYSBhcHAgcm91dGUgaGFuZGxlciwgdGhpcyBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4gUGxlYXNlIHJlbW92ZSB0aGUgaW52b2NhdGlvbiB0byBjb250aW51ZS5cIik7XG4gICAgICAgIC8vIC8vIFRoaXMgaXMgYSByZXdyaXRlIGNyZWF0ZWQgdmlhIGBOZXh0UmVzcG9uc2UucmV3cml0ZSgpYC4gV2UgbmVlZCB0byBzZW5kXG4gICAgICAgIC8vIC8vIHRoZSByZXNwb25zZSB1cCBzbyBpdCBjYW4gYmUgaGFuZGxlZCBieSB0aGUgYmFja2luZyBzZXJ2ZXIuXG4gICAgICAgIC8vIC8vIElmIHRoZSBzZXJ2ZXIgaXMgcnVubmluZyBpbiBtaW5pbWFsIG1vZGUsIHdlIGp1c3Qgd2FudCB0byBmb3J3YXJkIHRoZVxuICAgICAgICAvLyAvLyByZXNwb25zZSAoaW5jbHVkaW5nIHRoZSByZXdyaXRlIGhlYWRlcnMpIHVwc3RyZWFtIHNvIGl0IGNhbiBwZXJmb3JtIHRoZVxuICAgICAgICAvLyAvLyByZWRpcmVjdCBmb3IgdXMsIG90aGVyd2lzZSByZXR1cm4gd2l0aCB0aGUgc3BlY2lhbCBjb25kaXRpb24gc28gdGhpc1xuICAgICAgICAvLyAvLyBzZXJ2ZXIgY2FuIHBlcmZvcm0gYSByZXdyaXRlLlxuICAgICAgICAvLyBpZiAoIW1pbmltYWxNb2RlKSB7XG4gICAgICAgIC8vICAgcmV0dXJuIHsgcmVzcG9uc2UsIGNvbmRpdGlvbjogJ3Jld3JpdGUnIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyAvLyBSZWxhdGl2aXplIHRoZSB1cmwgc28gaXQncyByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmwuIFRoaXMgaXMgc28gdGhlXG4gICAgICAgIC8vIC8vIG91dGdvaW5nIGhlYWRlcnMgdXBzdHJlYW0gY2FuIGJlIHJlbGF0aXZlLlxuICAgICAgICAvLyBjb25zdCByZXdyaXRlUGF0aCA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LW1pZGRsZXdhcmUtcmV3cml0ZScpIVxuICAgICAgICAvLyBjb25zdCBpbml0VXJsID0gZ2V0UmVxdWVzdE1ldGEocmVxLCAnX19ORVhUX0lOSVRfVVJMJykhXG4gICAgICAgIC8vIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHBhcnNlVXJsKHJlbGF0aXZpemVVUkwocmV3cml0ZVBhdGgsIGluaXRVcmwpKVxuICAgICAgICAvLyByZXNwb25zZS5oZWFkZXJzLnNldCgneC1taWRkbGV3YXJlLXJld3JpdGUnLCBwYXRobmFtZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LW1pZGRsZXdhcmUtbmV4dFwiKSA9PT0gXCIxXCIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IG1vdmUgdGhpcyBlcnJvciBpbnRvIHRoZSBgTmV4dFJlc3BvbnNlLm5leHQoKWAgZnVuY3Rpb24uXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXh0UmVzcG9uc2UubmV4dCgpIHdhcyB1c2VkIGluIGEgYXBwIHJvdXRlIGhhbmRsZXIsIHRoaXMgaXMgbm90IHN1cHBvcnRlZC4gU2VlIGhlcmUgZm9yIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvbmV4dC1yZXNwb25zZS1uZXh0LWluLWFwcC1yb3V0ZS1oYW5kbGVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgYXN5bmMgaGFuZGxlKHJlcXVlc3QsIGNvbnRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIHJvdXRlIHRvIGdldCB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZXhlY3V0ZShyZXF1ZXN0LCBjb250ZXh0KTtcbiAgICAgICAgICAgIC8vIFRoZSByZXNwb25zZSB3YXMgaGFuZGxlZCwgcmV0dXJuIGl0LlxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8vIFRyeSB0byByZXNvbHZlIHRoZSBlcnJvciB0byBhIHJlc3BvbnNlLCBlbHNlIHRocm93IGl0IGFnYWluLlxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSAoMCwgX3Jlc29sdmVoYW5kbGVyZXJyb3IucmVzb2x2ZUhhbmRsZXJFcnJvcikoZXJyKTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UpIHRocm93IGVycjtcbiAgICAgICAgICAgIC8vIFRoZSByZXNwb25zZSB3YXMgcmVzb2x2ZWQsIHJldHVybiBpdC5cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IF9kZWZhdWx0ID0gQXBwUm91dGVSb3V0ZU1vZHVsZTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIkFwcFJvdXRlUm91dGVNb2R1bGUiLCJkZWZhdWx0IiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2RlZmF1bHQiLCJfcm91dGVtb2R1bGUiLCJyZXF1aXJlIiwiX3JlcXVlc3Rhc3luY3N0b3JhZ2V3cmFwcGVyIiwiX3N0YXRpY2dlbmVyYXRpb25hc3luY3N0b3JhZ2V3cmFwcGVyIiwiX3Jlc3BvbnNlaGFuZGxlcnMiLCJfaHR0cCIsIl9wYXRjaGZldGNoIiwiX3RyYWNlciIsIl9jb25zdGFudHMiLCJfZ2V0cGF0aG5hbWVmcm9tYWJzb2x1dGVwYXRoIiwiX3Byb3h5cmVxdWVzdCIsIl9yZXNvbHZlaGFuZGxlcmVycm9yIiwiX2xvZyIsIl9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQiLCJfYXV0b2ltcGxlbWVudG1ldGhvZHMiLCJfZ2V0bm9uc3RhdGljbWV0aG9kcyIsIl9yZXF1ZXN0Y29va2llcyIsIl9yb3V0ZWtpbmQiLCJfcGFyc2VkdXJscXVlcnl0b3BhcmFtcyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJjYWNoZSIsImhhcyIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIiwic3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSIsInNlcnZlckhvb2tzIiwiaGVhZGVySG9va3MiLCJzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCIsImFjdGlvbkFzeW5jU3RvcmFnZSIsIlJvdXRlTW9kdWxlIiwiaXMiLCJyb3V0ZSIsImRlZmluaXRpb24iLCJraW5kIiwiUm91dGVLaW5kIiwiQVBQX1JPVVRFIiwiY29uc3RydWN0b3IiLCJ1c2VybGFuZCIsInJlc29sdmVkUGFnZVBhdGgiLCJuZXh0Q29uZmlnT3V0cHV0IiwibWV0aG9kcyIsImF1dG9JbXBsZW1lbnRNZXRob2RzIiwibm9uU3RhdGljTWV0aG9kcyIsImdldE5vblN0YXRpY01ldGhvZHMiLCJkeW5hbWljIiwiRXJyb3IiLCJwYXRobmFtZSIsInByb2Nlc3MiLCJsb3dlcmNhc2VkIiwiSFRUUF9NRVRIT0RTIiwibWFwIiwibWV0aG9kIiwidG9Mb3dlckNhc2UiLCJlcnJvciIsInRvVXBwZXJDYXNlIiwic29tZSIsInJlc29sdmUiLCJpc0hUVFBNZXRob2QiLCJoYW5kbGVCYWRSZXF1ZXN0UmVzcG9uc2UiLCJleGVjdXRlIiwicmVxdWVzdCIsImNvbnRleHQiLCJoYW5kbGVyIiwicmVxdWVzdENvbnRleHQiLCJyZXEiLCJyZW5kZXJPcHRzIiwicHJldmlld1Byb3BzIiwicHJlcmVuZGVyTWFuaWZlc3QiLCJwcmV2aWV3Iiwic3RhdGljR2VuZXJhdGlvbkNvbnRleHQiLCJzdXBwb3J0c0R5bmFtaWNIVE1MIiwiZmV0Y2hDYWNoZSIsInJlc3BvbnNlIiwicnVuIiwiaXNBcHBSb3V0ZSIsIlJlcXVlc3RBc3luY1N0b3JhZ2VXcmFwcGVyIiwid3JhcCIsIlN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VXcmFwcGVyIiwic3RhdGljR2VuZXJhdGlvblN0b3JlIiwiX2dldFRyYWNlcl9nZXRSb290U3BhbkF0dHJpYnV0ZXMiLCJqb2luIiwiZm9yY2VEeW5hbWljIiwiZm9yY2VTdGF0aWMiLCJkeW5hbWljU2hvdWxkRXJyb3IiLCJyZXZhbGlkYXRlIiwid3JhcHBlZFJlcXVlc3QiLCJwcm94eVJlcXVlc3QiLCJnZXRQYXRobmFtZUZyb21BYnNvbHV0ZVBhdGgiLCJnZXRUcmFjZXIiLCJnZXRSb290U3BhbkF0dHJpYnV0ZXMiLCJ0cmFjZSIsIkFwcFJvdXRlUm91dGVIYW5kbGVyc1NwYW4iLCJydW5IYW5kbGVyIiwic3Bhbk5hbWUiLCJhdHRyaWJ1dGVzIiwiX3N0YXRpY0dlbmVyYXRpb25TdG9yZV90YWdzIiwicGF0Y2hGZXRjaCIsInJlcyIsInBhcmFtcyIsInBhcnNlZFVybFF1ZXJ5VG9QYXJhbXMiLCJ1bmRlZmluZWQiLCJmZXRjaE1ldHJpY3MiLCJQcm9taXNlIiwicGVuZGluZ1JldmFsaWRhdGVzIiwiYWRkSW1wbGljaXRUYWdzIiwiZmV0Y2hUYWdzIiwidGFncyIsInJlcXVlc3RTdG9yZSIsImdldFN0b3JlIiwibXV0YWJsZUNvb2tpZXMiLCJoZWFkZXJzIiwiSGVhZGVycyIsImFwcGVuZE11dGFibGVDb29raWVzIiwiUmVzcG9uc2UiLCJib2R5Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImhhbmRsZUludGVybmFsU2VydmVyRXJyb3JSZXNwb25zZSIsImhhbmRsZSIsImVyciIsInJlc29sdmVIYW5kbGVyRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    handleTemporaryRedirectResponse: function() {\n        return handleTemporaryRedirectResponse;\n    },\n    handleBadRequestResponse: function() {\n        return handleBadRequestResponse;\n    },\n    handleNotFoundResponse: function() {\n        return handleNotFoundResponse;\n    },\n    handleMethodNotAllowedResponse: function() {\n        return handleMethodNotAllowedResponse;\n    },\n    handleInternalServerErrorResponse: function() {\n        return handleInternalServerErrorResponse;\n    }\n});\nconst _requestcookies = __webpack_require__(/*! ../../../web/spec-extension/adapters/request-cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\");\nfunction handleTemporaryRedirectResponse(url, mutableCookies) {\n    const headers = new Headers({\n        location: url\n    });\n    (0, _requestcookies.appendMutableCookies)(headers, mutableCookies);\n    return new Response(null, {\n        status: 307,\n        headers\n    });\n}\nfunction handleBadRequestResponse() {\n    return new Response(null, {\n        status: 400\n    });\n}\nfunction handleNotFoundResponse() {\n    return new Response(null, {\n        status: 404\n    });\n}\nfunction handleMethodNotAllowedResponse() {\n    return new Response(null, {\n        status: 405\n    });\n}\nfunction handleInternalServerErrorResponse() {\n    return new Response(null, {\n        status: 500\n    });\n} //# sourceMappingURL=response-handlers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBTU47QUFDQSxTQUFTTSxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJWixPQUFPQyxjQUFjLENBQUNVLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUVIsU0FBUztJQUNiRyxpQ0FBaUM7UUFDN0IsT0FBT0E7SUFDWDtJQUNBQywwQkFBMEI7UUFDdEIsT0FBT0E7SUFDWDtJQUNBQyx3QkFBd0I7UUFDcEIsT0FBT0E7SUFDWDtJQUNBQyxnQ0FBZ0M7UUFDNUIsT0FBT0E7SUFDWDtJQUNBQyxtQ0FBbUM7UUFDL0IsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU8sa0JBQWtCQyxtQkFBT0EsQ0FBQyxrSkFBc0Q7QUFDdEYsU0FBU1osZ0NBQWdDYSxHQUFHLEVBQUVDLGNBQWM7SUFDeEQsTUFBTUMsVUFBVSxJQUFJQyxRQUFRO1FBQ3hCQyxVQUFVSjtJQUNkO0lBQ0MsSUFBR0YsZ0JBQWdCTyxvQkFBb0IsRUFBRUgsU0FBU0Q7SUFDbkQsT0FBTyxJQUFJSyxTQUFTLE1BQU07UUFDdEJDLFFBQVE7UUFDUkw7SUFDSjtBQUNKO0FBQ0EsU0FBU2Q7SUFDTCxPQUFPLElBQUlrQixTQUFTLE1BQU07UUFDdEJDLFFBQVE7SUFDWjtBQUNKO0FBQ0EsU0FBU2xCO0lBQ0wsT0FBTyxJQUFJaUIsU0FBUyxNQUFNO1FBQ3RCQyxRQUFRO0lBQ1o7QUFDSjtBQUNBLFNBQVNqQjtJQUNMLE9BQU8sSUFBSWdCLFNBQVMsTUFBTTtRQUN0QkMsUUFBUTtJQUNaO0FBQ0o7QUFDQSxTQUFTaEI7SUFDTCxPQUFPLElBQUllLFNBQVMsTUFBTTtRQUN0QkMsUUFBUTtJQUNaO0FBQ0osRUFFQSw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9oZWxwZXJzL3Jlc3BvbnNlLWhhbmRsZXJzLmpzPzhkZGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlOiBudWxsLFxuICAgIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTogbnVsbCxcbiAgICBoYW5kbGVOb3RGb3VuZFJlc3BvbnNlOiBudWxsLFxuICAgIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZTogbnVsbCxcbiAgICBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2U6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlO1xuICAgIH0sXG4gICAgaGFuZGxlQmFkUmVxdWVzdFJlc3BvbnNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZTtcbiAgICB9LFxuICAgIGhhbmRsZU5vdEZvdW5kUmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlTm90Rm91bmRSZXNwb25zZTtcbiAgICB9LFxuICAgIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2U7XG4gICAgfSxcbiAgICBoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlSW50ZXJuYWxTZXJ2ZXJFcnJvclJlc3BvbnNlO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlcXVlc3Rjb29raWVzID0gcmVxdWlyZShcIi4uLy4uLy4uL3dlYi9zcGVjLWV4dGVuc2lvbi9hZGFwdGVycy9yZXF1ZXN0LWNvb2tpZXNcIik7XG5mdW5jdGlvbiBoYW5kbGVUZW1wb3JhcnlSZWRpcmVjdFJlc3BvbnNlKHVybCwgbXV0YWJsZUNvb2tpZXMpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICBsb2NhdGlvbjogdXJsXG4gICAgfSk7XG4gICAgKDAsIF9yZXF1ZXN0Y29va2llcy5hcHBlbmRNdXRhYmxlQ29va2llcykoaGVhZGVycywgbXV0YWJsZUNvb2tpZXMpO1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDMwNyxcbiAgICAgICAgaGVhZGVyc1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlQmFkUmVxdWVzdFJlc3BvbnNlKCkge1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IDQwMFxuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlTm90Rm91bmRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDRcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1ldGhvZE5vdEFsbG93ZWRSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA0MDVcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZUludGVybmFsU2VydmVyRXJyb3JSZXNwb25zZSgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiA1MDBcbiAgICB9KTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2UtaGFuZGxlcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwiaGFuZGxlVGVtcG9yYXJ5UmVkaXJlY3RSZXNwb25zZSIsImhhbmRsZUJhZFJlcXVlc3RSZXNwb25zZSIsImhhbmRsZU5vdEZvdW5kUmVzcG9uc2UiLCJoYW5kbGVNZXRob2ROb3RBbGxvd2VkUmVzcG9uc2UiLCJoYW5kbGVJbnRlcm5hbFNlcnZlckVycm9yUmVzcG9uc2UiLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJfcmVxdWVzdGNvb2tpZXMiLCJyZXF1aXJlIiwidXJsIiwibXV0YWJsZUNvb2tpZXMiLCJoZWFkZXJzIiwiSGVhZGVycyIsImxvY2F0aW9uIiwiYXBwZW5kTXV0YWJsZUNvb2tpZXMiLCJSZXNwb25zZSIsInN0YXR1cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/helpers/response-handlers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/future/route-modules/route-module.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/server/future/route-modules/route-module.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouteModule\", ({\n    enumerable: true,\n    get: function() {\n        return RouteModule;\n    }\n}));\nclass RouteModule {\n    constructor({ userland, definition }){\n        this.userland = userland;\n        this.definition = definition;\n    }\n} //# sourceMappingURL=route-module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9yb3V0ZS1tb2R1bGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILCtDQUE4QztJQUMxQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1BO0lBQ0ZDLFlBQVksRUFBRUMsUUFBUSxFQUFHQyxVQUFVLEVBQUcsQ0FBQztRQUNuQyxJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdBO0lBQ3RCO0FBQ0osRUFFQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9yb3V0ZS1tb2R1bGUuanM/OWFhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJvdXRlTW9kdWxlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSb3V0ZU1vZHVsZTtcbiAgICB9XG59KTtcbmNsYXNzIFJvdXRlTW9kdWxlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHVzZXJsYW5kICwgZGVmaW5pdGlvbiAgfSl7XG4gICAgICAgIHRoaXMudXNlcmxhbmQgPSB1c2VybGFuZDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlLW1vZHVsZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiUm91dGVNb2R1bGUiLCJjb25zdHJ1Y3RvciIsInVzZXJsYW5kIiwiZGVmaW5pdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/future/route-modules/route-module.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/patch-fetch.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    addImplicitTags: function() {\n        return addImplicitTags;\n    },\n    patchFetch: function() {\n        return patchFetch;\n    }\n});\nconst _constants = __webpack_require__(/*! ./trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nconst _tracer = __webpack_require__(/*! ./trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\nconst _constants1 = __webpack_require__(/*! ../../lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\nconst isEdgeRuntime = \"nodejs\" === \"edge\";\nfunction addImplicitTags(staticGenerationStore) {\n    const newTags = [];\n    const pathname = staticGenerationStore == null ? void 0 : staticGenerationStore.originalPathname;\n    if (!pathname) {\n        return newTags;\n    }\n    if (!Array.isArray(staticGenerationStore.tags)) {\n        staticGenerationStore.tags = [];\n    }\n    if (!staticGenerationStore.tags.includes(pathname)) {\n        staticGenerationStore.tags.push(pathname);\n    }\n    newTags.push(pathname);\n    return newTags;\n}\nfunction trackFetchMetric(staticGenerationStore, ctx) {\n    if (!staticGenerationStore) return;\n    if (!staticGenerationStore.fetchMetrics) {\n        staticGenerationStore.fetchMetrics = [];\n    }\n    const dedupeFields = [\n        \"url\",\n        \"status\",\n        \"method\"\n    ];\n    // don't add metric if one already exists for the fetch\n    if (staticGenerationStore.fetchMetrics.some((metric)=>{\n        return dedupeFields.every((field)=>metric[field] === ctx[field]);\n    })) {\n        return;\n    }\n    staticGenerationStore.fetchMetrics.push({\n        url: ctx.url,\n        cacheStatus: ctx.cacheStatus,\n        cacheReason: ctx.cacheReason,\n        status: ctx.status,\n        method: ctx.method,\n        start: ctx.start,\n        end: Date.now(),\n        idx: staticGenerationStore.nextFetchId || 0\n    });\n}\nfunction patchFetch({ serverHooks, staticGenerationAsyncStorage }) {\n    if (!globalThis._nextOriginalFetch) {\n        globalThis._nextOriginalFetch = globalThis.fetch;\n    }\n    if (globalThis.fetch.__nextPatched) return;\n    const { DynamicServerError } = serverHooks;\n    const originFetch = globalThis._nextOriginalFetch;\n    globalThis.fetch = async (input, init)=>{\n        var _init_method, _ref;\n        let url;\n        try {\n            url = new URL(input instanceof Request ? input.url : input);\n            url.username = \"\";\n            url.password = \"\";\n        } catch  {\n            // Error caused by malformed URL should be handled by native fetch\n            url = undefined;\n        }\n        const fetchUrl = (url == null ? void 0 : url.href) ?? \"\";\n        const fetchStart = Date.now();\n        const method = (init == null ? void 0 : (_init_method = init.method) == null ? void 0 : _init_method.toUpperCase()) || \"GET\";\n        // Do create a new span trace for internal fetches in the\n        // non-verbose mode.\n        const isInternal = ((_ref = init == null ? void 0 : init.next) == null ? void 0 : _ref.internal) === true;\n        return await (0, _tracer.getTracer)().trace(isInternal ? _constants.NextNodeServerSpan.internalFetch : _constants.AppRenderSpan.fetch, {\n            kind: _tracer.SpanKind.CLIENT,\n            spanName: [\n                \"fetch\",\n                method,\n                fetchUrl\n            ].filter(Boolean).join(\" \"),\n            attributes: {\n                \"http.url\": fetchUrl,\n                \"http.method\": method,\n                \"net.peer.name\": url == null ? void 0 : url.hostname,\n                \"net.peer.port\": (url == null ? void 0 : url.port) || undefined\n            }\n        }, async ()=>{\n            var _getRequestMeta;\n            const staticGenerationStore = staticGenerationAsyncStorage.getStore() || (fetch.__nextGetStaticStore == null ? void 0 : fetch.__nextGetStaticStore());\n            const isRequestInput = input && typeof input === \"object\" && typeof input.method === \"string\";\n            const getRequestMeta = (field)=>{\n                let value = isRequestInput ? input[field] : null;\n                return value || (init == null ? void 0 : init[field]);\n            };\n            // If the staticGenerationStore is not available, we can't do any\n            // special treatment of fetch, therefore fallback to the original\n            // fetch implementation.\n            if (!staticGenerationStore || isInternal || staticGenerationStore.isDraftMode) {\n                return originFetch(input, init);\n            }\n            let revalidate = undefined;\n            const getNextField = (field)=>{\n                var _init_next, _init_next1, _input_next;\n                return typeof (init == null ? void 0 : (_init_next = init.next) == null ? void 0 : _init_next[field]) !== \"undefined\" ? init == null ? void 0 : (_init_next1 = init.next) == null ? void 0 : _init_next1[field] : isRequestInput ? (_input_next = input.next) == null ? void 0 : _input_next[field] : undefined;\n            };\n            // RequestInit doesn't keep extra fields e.g. next so it's\n            // only available if init is used separate\n            let curRevalidate = getNextField(\"revalidate\");\n            const tags = getNextField(\"tags\") || [];\n            if (Array.isArray(tags)) {\n                if (!staticGenerationStore.tags) {\n                    staticGenerationStore.tags = [];\n                }\n                for (const tag of tags){\n                    if (!staticGenerationStore.tags.includes(tag)) {\n                        staticGenerationStore.tags.push(tag);\n                    }\n                }\n            }\n            const implicitTags = addImplicitTags(staticGenerationStore);\n            for (const tag of implicitTags || []){\n                if (!tags.includes(tag)) {\n                    tags.push(tag);\n                }\n            }\n            const isOnlyCache = staticGenerationStore.fetchCache === \"only-cache\";\n            const isForceCache = staticGenerationStore.fetchCache === \"force-cache\";\n            const isDefaultCache = staticGenerationStore.fetchCache === \"default-cache\";\n            const isDefaultNoStore = staticGenerationStore.fetchCache === \"default-no-store\";\n            const isOnlyNoStore = staticGenerationStore.fetchCache === \"only-no-store\";\n            const isForceNoStore = staticGenerationStore.fetchCache === \"force-no-store\";\n            let _cache = getRequestMeta(\"cache\");\n            let cacheReason = \"\";\n            if (typeof _cache === \"string\" && typeof curRevalidate !== \"undefined\") {\n                console.warn(`Warning: fetch for ${fetchUrl} on ${staticGenerationStore.pathname} specified \"cache: ${_cache}\" and \"revalidate: ${curRevalidate}\", only one should be specified.`);\n                _cache = undefined;\n            }\n            if (_cache === \"force-cache\") {\n                curRevalidate = false;\n            }\n            if ([\n                \"no-cache\",\n                \"no-store\"\n            ].includes(_cache || \"\")) {\n                curRevalidate = 0;\n                cacheReason = `cache: ${_cache}`;\n            }\n            if (typeof curRevalidate === \"number\" || curRevalidate === false) {\n                revalidate = curRevalidate;\n            }\n            const _headers = getRequestMeta(\"headers\");\n            const initHeaders = typeof (_headers == null ? void 0 : _headers.get) === \"function\" ? _headers : new Headers(_headers || {});\n            const hasUnCacheableHeader = initHeaders.get(\"authorization\") || initHeaders.get(\"cookie\");\n            const isUnCacheableMethod = ![\n                \"get\",\n                \"head\"\n            ].includes(((_getRequestMeta = getRequestMeta(\"method\")) == null ? void 0 : _getRequestMeta.toLowerCase()) || \"get\");\n            // if there are authorized headers or a POST method and\n            // dynamic data usage was present above the tree we bail\n            // e.g. if cookies() is used before an authed/POST fetch\n            const autoNoCache = (hasUnCacheableHeader || isUnCacheableMethod) && staticGenerationStore.revalidate === 0;\n            if (isForceNoStore) {\n                revalidate = 0;\n                cacheReason = \"fetchCache = force-no-store\";\n            }\n            if (isOnlyNoStore) {\n                if (_cache === \"force-cache\" || revalidate === 0) {\n                    throw new Error(`cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`);\n                }\n                revalidate = 0;\n                cacheReason = \"fetchCache = only-no-store\";\n            }\n            if (isOnlyCache && _cache === \"no-store\") {\n                throw new Error(`cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`);\n            }\n            if (isForceCache && (typeof curRevalidate === \"undefined\" || curRevalidate === 0)) {\n                cacheReason = \"fetchCache = force-cache\";\n                revalidate = false;\n            }\n            if (typeof revalidate === \"undefined\") {\n                if (isDefaultCache) {\n                    revalidate = false;\n                    cacheReason = \"fetchCache = default-cache\";\n                } else if (autoNoCache) {\n                    revalidate = 0;\n                    cacheReason = \"auto no cache\";\n                } else if (isDefaultNoStore) {\n                    revalidate = 0;\n                    cacheReason = \"fetchCache = default-no-store\";\n                } else {\n                    cacheReason = \"auto cache\";\n                    revalidate = typeof staticGenerationStore.revalidate === \"boolean\" || typeof staticGenerationStore.revalidate === \"undefined\" ? false : staticGenerationStore.revalidate;\n                }\n            } else if (!cacheReason) {\n                cacheReason = `revalidate: ${revalidate}`;\n            }\n            if (// revalidate although if it occurs during build we do\n            !autoNoCache && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof revalidate === \"number\" && (staticGenerationStore.revalidate === false || typeof staticGenerationStore.revalidate === \"number\" && revalidate < staticGenerationStore.revalidate))) {\n                staticGenerationStore.revalidate = revalidate;\n            }\n            const isCacheableRevalidate = typeof revalidate === \"number\" && revalidate > 0 || revalidate === false;\n            let cacheKey;\n            if (staticGenerationStore.incrementalCache && isCacheableRevalidate) {\n                try {\n                    cacheKey = await staticGenerationStore.incrementalCache.fetchCacheKey(fetchUrl, isRequestInput ? input : init);\n                } catch (err) {\n                    console.error(`Failed to generate cache key for`, input);\n                }\n            }\n            const requestInputFields = [\n                \"cache\",\n                \"credentials\",\n                \"headers\",\n                \"integrity\",\n                \"keepalive\",\n                \"method\",\n                \"mode\",\n                \"redirect\",\n                \"referrer\",\n                \"referrerPolicy\",\n                \"signal\",\n                \"window\",\n                \"duplex\"\n            ];\n            if (isRequestInput) {\n                const reqInput = input;\n                const reqOptions = {\n                    body: reqInput._ogBody || reqInput.body\n                };\n                for (const field of requestInputFields){\n                    // @ts-expect-error custom fields\n                    reqOptions[field] = reqInput[field];\n                }\n                input = new Request(reqInput.url, reqOptions);\n            } else if (init) {\n                const initialInit = init;\n                init = {\n                    body: init._ogBody || init.body\n                };\n                for (const field of requestInputFields){\n                    // @ts-expect-error custom fields\n                    init[field] = initialInit[field];\n                }\n            }\n            const fetchIdx = staticGenerationStore.nextFetchId ?? 1;\n            staticGenerationStore.nextFetchId = fetchIdx + 1;\n            const normalizedRevalidate = typeof revalidate !== \"number\" ? _constants1.CACHE_ONE_YEAR : revalidate;\n            const doOriginalFetch = async (isStale, cacheReasonOverride)=>{\n                // add metadata to init without editing the original\n                const clonedInit = {\n                    ...init,\n                    next: {\n                        ...init == null ? void 0 : init.next,\n                        fetchType: \"origin\",\n                        fetchIdx\n                    }\n                };\n                return originFetch(input, clonedInit).then(async (res)=>{\n                    if (!isStale) {\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason: cacheReasonOverride || cacheReason,\n                            cacheStatus: revalidate === 0 || cacheReasonOverride ? \"skip\" : \"miss\",\n                            status: res.status,\n                            method: clonedInit.method || \"GET\"\n                        });\n                    }\n                    if (res.status === 200 && staticGenerationStore.incrementalCache && cacheKey && isCacheableRevalidate) {\n                        const bodyBuffer = Buffer.from(await res.arrayBuffer());\n                        try {\n                            await staticGenerationStore.incrementalCache.set(cacheKey, {\n                                kind: \"FETCH\",\n                                data: {\n                                    headers: Object.fromEntries(res.headers.entries()),\n                                    body: bodyBuffer.toString(\"base64\"),\n                                    status: res.status,\n                                    tags,\n                                    url: res.url\n                                },\n                                revalidate: normalizedRevalidate\n                            }, revalidate, true, fetchUrl, fetchIdx);\n                        } catch (err) {\n                            console.warn(`Failed to set fetch cache`, input, err);\n                        }\n                        const response = new Response(bodyBuffer, {\n                            headers: new Headers(res.headers),\n                            status: res.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: res.url\n                        });\n                        return response;\n                    }\n                    return res;\n                });\n            };\n            let handleUnlock = ()=>Promise.resolve();\n            let cacheReasonOverride;\n            if (cacheKey && staticGenerationStore.incrementalCache) {\n                handleUnlock = await staticGenerationStore.incrementalCache.lock(cacheKey);\n                const entry = staticGenerationStore.isOnDemandRevalidate ? null : await staticGenerationStore.incrementalCache.get(cacheKey, true, revalidate, fetchUrl, fetchIdx);\n                if (entry) {\n                    await handleUnlock();\n                } else {\n                    // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n                    cacheReasonOverride = \"cache-control: no-cache (hard refresh)\";\n                }\n                if ((entry == null ? void 0 : entry.value) && entry.value.kind === \"FETCH\") {\n                    const currentTags = entry.value.data.tags;\n                    // when stale and is revalidating we wait for fresh data\n                    // so the revalidated entry has the updated data\n                    if (!(staticGenerationStore.isRevalidate && entry.isStale)) {\n                        if (entry.isStale) {\n                            if (!staticGenerationStore.pendingRevalidates) {\n                                staticGenerationStore.pendingRevalidates = [];\n                            }\n                            staticGenerationStore.pendingRevalidates.push(doOriginalFetch(true).catch(console.error));\n                        } else if (tags && !tags.every((tag)=>{\n                            return currentTags == null ? void 0 : currentTags.includes(tag);\n                        })) {\n                            var _staticGenerationStore_incrementalCache;\n                            // if new tags are being added we need to set even if\n                            // the data isn't stale\n                            if (!entry.value.data.tags) {\n                                entry.value.data.tags = [];\n                            }\n                            for (const tag of tags){\n                                if (!entry.value.data.tags.includes(tag)) {\n                                    entry.value.data.tags.push(tag);\n                                }\n                            }\n                            (_staticGenerationStore_incrementalCache = staticGenerationStore.incrementalCache) == null ? void 0 : _staticGenerationStore_incrementalCache.set(cacheKey, entry.value, revalidate, true, fetchUrl, fetchIdx);\n                        }\n                        const resData = entry.value.data;\n                        let decodedBody;\n                        if (false) {} else {\n                            decodedBody = Buffer.from(resData.body, \"base64\").subarray();\n                        }\n                        trackFetchMetric(staticGenerationStore, {\n                            start: fetchStart,\n                            url: fetchUrl,\n                            cacheReason,\n                            cacheStatus: \"hit\",\n                            status: resData.status || 200,\n                            method: (init == null ? void 0 : init.method) || \"GET\"\n                        });\n                        const response = new Response(decodedBody, {\n                            headers: resData.headers,\n                            status: resData.status\n                        });\n                        Object.defineProperty(response, \"url\", {\n                            value: entry.value.data.url\n                        });\n                        return response;\n                    }\n                }\n            }\n            if (staticGenerationStore.isStaticGeneration) {\n                if (init && typeof init === \"object\") {\n                    const cache = init.cache;\n                    // Delete `cache` property as Cloudflare Workers will throw an error\n                    if (isEdgeRuntime) {\n                        delete init.cache;\n                    }\n                    if (cache === \"no-store\") {\n                        staticGenerationStore.revalidate = 0;\n                        const dynamicUsageReason = `no-store fetch ${input}${staticGenerationStore.pathname ? ` ${staticGenerationStore.pathname}` : \"\"}`;\n                        const err = new DynamicServerError(dynamicUsageReason);\n                        staticGenerationStore.dynamicUsageErr = err;\n                        staticGenerationStore.dynamicUsageStack = err.stack;\n                        staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                    }\n                    const hasNextConfig = \"next\" in init;\n                    const next = init.next || {};\n                    if (typeof next.revalidate === \"number\" && (typeof staticGenerationStore.revalidate === \"undefined\" || typeof staticGenerationStore.revalidate === \"number\" && next.revalidate < staticGenerationStore.revalidate)) {\n                        const forceDynamic = staticGenerationStore.forceDynamic;\n                        if (!forceDynamic || next.revalidate !== 0) {\n                            staticGenerationStore.revalidate = next.revalidate;\n                        }\n                        if (!forceDynamic && next.revalidate === 0) {\n                            const dynamicUsageReason = `revalidate: ${next.revalidate} fetch ${input}${staticGenerationStore.pathname ? ` ${staticGenerationStore.pathname}` : \"\"}`;\n                            const err = new DynamicServerError(dynamicUsageReason);\n                            staticGenerationStore.dynamicUsageErr = err;\n                            staticGenerationStore.dynamicUsageStack = err.stack;\n                            staticGenerationStore.dynamicUsageDescription = dynamicUsageReason;\n                        }\n                    }\n                    if (hasNextConfig) delete init.next;\n                }\n            }\n            return doOriginalFetch(false, cacheReasonOverride).finally(handleUnlock);\n        });\n    };\n    globalThis.fetch.__nextGetStaticStore = ()=>{\n        return staticGenerationAsyncStorage;\n    };\n    globalThis.fetch.__nextPatched = true;\n} //# sourceMappingURL=patch-fetch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/trace/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/constants.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/ // eslint typescript has a bug with TS enums\n/* eslint-disable no-shadow */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    NextVanillaSpanAllowlist: function() {\n        return NextVanillaSpanAllowlist;\n    },\n    BaseServerSpan: function() {\n        return BaseServerSpan;\n    },\n    LoadComponentsSpan: function() {\n        return LoadComponentsSpan;\n    },\n    NextServerSpan: function() {\n        return NextServerSpan;\n    },\n    NextNodeServerSpan: function() {\n        return NextNodeServerSpan;\n    },\n    StartServerSpan: function() {\n        return StartServerSpan;\n    },\n    RenderSpan: function() {\n        return RenderSpan;\n    },\n    RouterSpan: function() {\n        return RouterSpan;\n    },\n    AppRenderSpan: function() {\n        return AppRenderSpan;\n    },\n    NodeSpan: function() {\n        return NodeSpan;\n    },\n    AppRouteRouteHandlersSpan: function() {\n        return AppRouteRouteHandlersSpan;\n    },\n    ResolveMetadataSpan: function() {\n        return ResolveMetadataSpan;\n    }\n});\nvar BaseServerSpan;\n(function(BaseServerSpan) {\n    BaseServerSpan[\"handleRequest\"] = \"BaseServer.handleRequest\";\n    BaseServerSpan[\"run\"] = \"BaseServer.run\";\n    BaseServerSpan[\"pipe\"] = \"BaseServer.pipe\";\n    BaseServerSpan[\"getStaticHTML\"] = \"BaseServer.getStaticHTML\";\n    BaseServerSpan[\"render\"] = \"BaseServer.render\";\n    BaseServerSpan[\"renderToResponseWithComponents\"] = \"BaseServer.renderToResponseWithComponents\";\n    BaseServerSpan[\"renderToResponse\"] = \"BaseServer.renderToResponse\";\n    BaseServerSpan[\"renderToHTML\"] = \"BaseServer.renderToHTML\";\n    BaseServerSpan[\"renderError\"] = \"BaseServer.renderError\";\n    BaseServerSpan[\"renderErrorToResponse\"] = \"BaseServer.renderErrorToResponse\";\n    BaseServerSpan[\"renderErrorToHTML\"] = \"BaseServer.renderErrorToHTML\";\n    BaseServerSpan[\"render404\"] = \"BaseServer.render404\";\n})(BaseServerSpan || (BaseServerSpan = {}));\nvar LoadComponentsSpan;\n(function(LoadComponentsSpan) {\n    LoadComponentsSpan[\"loadDefaultErrorComponents\"] = \"LoadComponents.loadDefaultErrorComponents\";\n    LoadComponentsSpan[\"loadComponents\"] = \"LoadComponents.loadComponents\";\n})(LoadComponentsSpan || (LoadComponentsSpan = {}));\nvar NextServerSpan;\n(function(NextServerSpan) {\n    NextServerSpan[\"getRequestHandler\"] = \"NextServer.getRequestHandler\";\n    NextServerSpan[\"getServer\"] = \"NextServer.getServer\";\n    NextServerSpan[\"getServerRequestHandler\"] = \"NextServer.getServerRequestHandler\";\n    NextServerSpan[\"createServer\"] = \"createServer.createServer\";\n})(NextServerSpan || (NextServerSpan = {}));\nvar NextNodeServerSpan;\n(function(NextNodeServerSpan) {\n    NextNodeServerSpan[\"compression\"] = \"NextNodeServer.compression\";\n    NextNodeServerSpan[\"getBuildId\"] = \"NextNodeServer.getBuildId\";\n    NextNodeServerSpan[\"generateStaticRoutes\"] = \"NextNodeServer.generateStaticRoutes\";\n    NextNodeServerSpan[\"generateFsStaticRoutes\"] = \"NextNodeServer.generateFsStaticRoutes\";\n    NextNodeServerSpan[\"generatePublicRoutes\"] = \"NextNodeServer.generatePublicRoutes\";\n    NextNodeServerSpan[\"generateImageRoutes\"] = \"NextNodeServer.generateImageRoutes.route\";\n    NextNodeServerSpan[\"sendRenderResult\"] = \"NextNodeServer.sendRenderResult\";\n    NextNodeServerSpan[\"sendStatic\"] = \"NextNodeServer.sendStatic\";\n    NextNodeServerSpan[\"proxyRequest\"] = \"NextNodeServer.proxyRequest\";\n    NextNodeServerSpan[\"runApi\"] = \"NextNodeServer.runApi\";\n    NextNodeServerSpan[\"render\"] = \"NextNodeServer.render\";\n    NextNodeServerSpan[\"renderHTML\"] = \"NextNodeServer.renderHTML\";\n    NextNodeServerSpan[\"imageOptimizer\"] = \"NextNodeServer.imageOptimizer\";\n    NextNodeServerSpan[\"getPagePath\"] = \"NextNodeServer.getPagePath\";\n    NextNodeServerSpan[\"getRoutesManifest\"] = \"NextNodeServer.getRoutesManifest\";\n    NextNodeServerSpan[\"findPageComponents\"] = \"NextNodeServer.findPageComponents\";\n    NextNodeServerSpan[\"getFontManifest\"] = \"NextNodeServer.getFontManifest\";\n    NextNodeServerSpan[\"getServerComponentManifest\"] = \"NextNodeServer.getServerComponentManifest\";\n    NextNodeServerSpan[\"getRequestHandler\"] = \"NextNodeServer.getRequestHandler\";\n    NextNodeServerSpan[\"renderToHTML\"] = \"NextNodeServer.renderToHTML\";\n    NextNodeServerSpan[\"renderError\"] = \"NextNodeServer.renderError\";\n    NextNodeServerSpan[\"renderErrorToHTML\"] = \"NextNodeServer.renderErrorToHTML\";\n    NextNodeServerSpan[\"render404\"] = \"NextNodeServer.render404\";\n    NextNodeServerSpan[\"route\"] = \"route\";\n    NextNodeServerSpan[\"onProxyReq\"] = \"onProxyReq\";\n    NextNodeServerSpan[\"apiResolver\"] = \"apiResolver\";\n    NextNodeServerSpan[\"internalFetch\"] = \"internalFetch\";\n})(NextNodeServerSpan || (NextNodeServerSpan = {}));\nvar StartServerSpan;\n(function(StartServerSpan) {\n    StartServerSpan[\"startServer\"] = \"startServer.startServer\";\n})(StartServerSpan || (StartServerSpan = {}));\nvar RenderSpan;\n(function(RenderSpan) {\n    RenderSpan[\"getServerSideProps\"] = \"Render.getServerSideProps\";\n    RenderSpan[\"getStaticProps\"] = \"Render.getStaticProps\";\n    RenderSpan[\"renderToString\"] = \"Render.renderToString\";\n    RenderSpan[\"renderDocument\"] = \"Render.renderDocument\";\n    RenderSpan[\"createBodyResult\"] = \"Render.createBodyResult\";\n})(RenderSpan || (RenderSpan = {}));\nvar AppRenderSpan;\n(function(AppRenderSpan) {\n    AppRenderSpan[\"renderToString\"] = \"AppRender.renderToString\";\n    AppRenderSpan[\"renderToReadableStream\"] = \"AppRender.renderToReadableStream\";\n    AppRenderSpan[\"getBodyResult\"] = \"AppRender.getBodyResult\";\n    AppRenderSpan[\"fetch\"] = \"AppRender.fetch\";\n})(AppRenderSpan || (AppRenderSpan = {}));\nvar RouterSpan;\n(function(RouterSpan) {\n    RouterSpan[\"executeRoute\"] = \"Router.executeRoute\";\n})(RouterSpan || (RouterSpan = {}));\nvar NodeSpan;\n(function(NodeSpan) {\n    NodeSpan[\"runHandler\"] = \"Node.runHandler\";\n})(NodeSpan || (NodeSpan = {}));\nvar AppRouteRouteHandlersSpan;\n(function(AppRouteRouteHandlersSpan) {\n    AppRouteRouteHandlersSpan[\"runHandler\"] = \"AppRouteRouteHandlers.runHandler\";\n})(AppRouteRouteHandlersSpan || (AppRouteRouteHandlersSpan = {}));\nvar ResolveMetadataSpan;\n(function(ResolveMetadataSpan) {\n    ResolveMetadataSpan[\"generateMetadata\"] = \"ResolveMetadata.generateMetadata\";\n})(ResolveMetadataSpan || (ResolveMetadataSpan = {}));\nconst NextVanillaSpanAllowlist = [\n    \"BaseServer.handleRequest\",\n    \"Render.getServerSideProps\",\n    \"Render.getStaticProps\",\n    \"AppRender.fetch\",\n    \"AppRender.getBodyResult\",\n    \"Render.renderDocument\",\n    \"Node.runHandler\",\n    \"AppRouteRouteHandlers.runHandler\",\n    \"ResolveMetadata.generateMetadata\"\n]; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/server/lib/trace/tracer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getTracer: function() {\n        return getTracer;\n    },\n    SpanStatusCode: function() {\n        return SpanStatusCode;\n    },\n    SpanKind: function() {\n        return SpanKind;\n    }\n});\nconst _constants = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\nlet api;\n// we want to allow users to use their own version of @opentelemetry/api if they\n// want to, so we try to require it first, and if it fails we fall back to the\n// version that is bundled with Next.js\n// this is because @opentelemetry/api has to be synced with the version of\n// @opentelemetry/tracing that is used, and we don't want to force users to use\n// the version that is bundled with Next.js.\n// the API is ~stable, so this should be fine\nif (false) {} else {\n    try {\n        api = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    } catch (err) {\n        api = __webpack_require__(/*! next/dist/compiled/@opentelemetry/api */ \"(rsc)/./node_modules/next/dist/compiled/@opentelemetry/api/index.js\");\n    }\n}\nconst { context, trace, SpanStatusCode, SpanKind } = api;\nconst isPromise = (p)=>{\n    return p !== null && typeof p === \"object\" && typeof p.then === \"function\";\n};\nconst closeSpanWithError = (span, error)=>{\n    if (error) {\n        span.recordException(error);\n    }\n    span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: error == null ? void 0 : error.message\n    });\n    span.end();\n};\n/** we use this map to propagate attributes from nested spans to the top span */ const rootSpanAttributesStore = new Map();\nconst rootSpanIdKey = api.createContextKey(\"next.rootSpanId\");\nlet lastSpanId = 0;\nconst getSpanId = ()=>lastSpanId++;\nclass NextTracerImpl {\n    /**\n   * Returns an instance to the trace with configured name.\n   * Since wrap / trace can be defined in any place prior to actual trace subscriber initialization,\n   * This should be lazily evaluated.\n   */ getTracerInstance() {\n        return trace.getTracer(\"next.js\", \"0.0.1\");\n    }\n    getContext() {\n        return context;\n    }\n    getActiveScopeSpan() {\n        return trace.getSpan(context == null ? void 0 : context.active());\n    }\n    trace(...args) {\n        const [type, fnOrOptions, fnOrEmpty] = args;\n        // coerce options form overload\n        const { fn, options } = typeof fnOrOptions === \"function\" ? {\n            fn: fnOrOptions,\n            options: {}\n        } : {\n            fn: fnOrEmpty,\n            options: {\n                ...fnOrOptions\n            }\n        };\n        if (!_constants.NextVanillaSpanAllowlist.includes(type) && process.env.NEXT_OTEL_VERBOSE !== \"1\" || options.hideSpan) {\n            return fn();\n        }\n        const spanName = options.spanName ?? type;\n        // Trying to get active scoped span to assign parent. If option specifies parent span manually, will try to use it.\n        let spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        let isRootSpan = false;\n        if (!spanContext) {\n            spanContext = api.ROOT_CONTEXT;\n            isRootSpan = true;\n        }\n        const spanId = getSpanId();\n        options.attributes = {\n            \"next.span_name\": spanName,\n            \"next.span_type\": type,\n            ...options.attributes\n        };\n        return api.context.with(spanContext.setValue(rootSpanIdKey, spanId), ()=>this.getTracerInstance().startActiveSpan(spanName, options, (span)=>{\n                const onCleanup = ()=>{\n                    rootSpanAttributesStore.delete(spanId);\n                };\n                if (isRootSpan) {\n                    rootSpanAttributesStore.set(spanId, new Map(Object.entries(options.attributes ?? {})));\n                }\n                try {\n                    if (fn.length > 1) {\n                        return fn(span, (err)=>closeSpanWithError(span, err));\n                    }\n                    const result = fn(span);\n                    if (isPromise(result)) {\n                        result.then(()=>span.end(), (err)=>closeSpanWithError(span, err)).finally(onCleanup);\n                    } else {\n                        span.end();\n                        onCleanup();\n                    }\n                    return result;\n                } catch (err) {\n                    closeSpanWithError(span, err);\n                    onCleanup();\n                    throw err;\n                }\n            }));\n    }\n    wrap(...args) {\n        const tracer = this;\n        const [name, options, fn] = args.length === 3 ? args : [\n            args[0],\n            {},\n            args[1]\n        ];\n        if (!_constants.NextVanillaSpanAllowlist.includes(name) && process.env.NEXT_OTEL_VERBOSE !== \"1\") {\n            return fn;\n        }\n        return function() {\n            let optionsObj = options;\n            if (typeof optionsObj === \"function\" && typeof fn === \"function\") {\n                optionsObj = optionsObj.apply(this, arguments);\n            }\n            const lastArgId = arguments.length - 1;\n            const cb = arguments[lastArgId];\n            if (typeof cb === \"function\") {\n                const scopeBoundCb = tracer.getContext().bind(context.active(), cb);\n                return tracer.trace(name, optionsObj, (_span, done)=>{\n                    arguments[lastArgId] = function(err) {\n                        done == null ? void 0 : done(err);\n                        return scopeBoundCb.apply(this, arguments);\n                    };\n                    return fn.apply(this, arguments);\n                });\n            } else {\n                return tracer.trace(name, optionsObj, ()=>fn.apply(this, arguments));\n            }\n        };\n    }\n    startSpan(...args) {\n        const [type, options] = args;\n        const spanContext = this.getSpanContext((options == null ? void 0 : options.parentSpan) ?? this.getActiveScopeSpan());\n        return this.getTracerInstance().startSpan(type, options, spanContext);\n    }\n    getSpanContext(parentSpan) {\n        const spanContext = parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined;\n        return spanContext;\n    }\n    getRootSpanAttributes() {\n        const spanId = context.active().getValue(rootSpanIdKey);\n        return rootSpanAttributesStore.get(spanId);\n    }\n}\nconst getTracer = (()=>{\n    const tracer = new NextTracerImpl();\n    return ()=>tracer;\n})(); //# sourceMappingURL=tracer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/node-polyfill-headers.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/server/node-polyfill-headers.js ***!
  \****************************************************************/
/***/ (() => {

eval("/**\n * Polyfills the `Headers.getAll(name)` method so it'll work in the edge\n * runtime.\n */ \nif (!(\"getAll\" in Headers.prototype)) {\n    // @ts-expect-error - this is polyfilling this method so it doesn't exist yet\n    Headers.prototype.getAll = function(name) {\n        name = name.toLowerCase();\n        if (name !== \"set-cookie\") throw new Error(\"Headers.getAll is only supported for Set-Cookie header\");\n        const headers = [\n            ...this.entries()\n        ].filter(([key])=>key === name);\n        return headers.map(([, value])=>value);\n    };\n} //# sourceMappingURL=node-polyfill-headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci9ub2RlLXBvbHlmaWxsLWhlYWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7OztDQUdDLEdBQWdCO0FBQ2pCLElBQUksQ0FBRSxhQUFZQSxRQUFRQyxTQUFTLEdBQUc7SUFDbEMsNkVBQTZFO0lBQzdFRCxRQUFRQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQyxJQUFJO1FBQ3BDQSxPQUFPQSxLQUFLQyxXQUFXO1FBQ3ZCLElBQUlELFNBQVMsY0FBYyxNQUFNLElBQUlFLE1BQU07UUFDM0MsTUFBTUMsVUFBVTtlQUNULElBQUksQ0FBQ0MsT0FBTztTQUNsQixDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDQyxJQUFJLEdBQUdBLFFBQVFOO1FBQzFCLE9BQU9HLFFBQVFJLEdBQUcsQ0FBQyxDQUFDLEdBQUdDLE1BQU0sR0FBR0E7SUFDcEM7QUFDSixFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL25vZGUtcG9seWZpbGwtaGVhZGVycy5qcz85NWI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9seWZpbGxzIHRoZSBgSGVhZGVycy5nZXRBbGwobmFtZSlgIG1ldGhvZCBzbyBpdCdsbCB3b3JrIGluIHRoZSBlZGdlXG4gKiBydW50aW1lLlxuICovIFwidXNlIHN0cmljdFwiO1xuaWYgKCEoXCJnZXRBbGxcIiBpbiBIZWFkZXJzLnByb3RvdHlwZSkpIHtcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gdGhpcyBpcyBwb2x5ZmlsbGluZyB0aGlzIG1ldGhvZCBzbyBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgIEhlYWRlcnMucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKG5hbWUgIT09IFwic2V0LWNvb2tpZVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJIZWFkZXJzLmdldEFsbCBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgU2V0LUNvb2tpZSBoZWFkZXJcIik7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXG4gICAgICAgICAgICAuLi50aGlzLmVudHJpZXMoKVxuICAgICAgICBdLmZpbHRlcigoW2tleV0pPT5rZXkgPT09IG5hbWUpO1xuICAgICAgICByZXR1cm4gaGVhZGVycy5tYXAoKFssIHZhbHVlXSk9PnZhbHVlKTtcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlLXBvbHlmaWxsLWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIkhlYWRlcnMiLCJwcm90b3R5cGUiLCJnZXRBbGwiLCJuYW1lIiwidG9Mb3dlckNhc2UiLCJFcnJvciIsImhlYWRlcnMiLCJlbnRyaWVzIiwiZmlsdGVyIiwia2V5IiwibWFwIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/node-polyfill-headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/exports/next-response.js":
/*!********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/exports/next-response.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// This file is for modularized imports for next/server to get fully-treeshaking.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _response.NextResponse;\n    }\n}));\nconst _response = __webpack_require__(/*! ../spec-extension/response */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js\"); //# sourceMappingURL=next-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvZXhwb3J0cy9uZXh0LXJlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlGQUFpRjtBQUNwRTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsMkNBQTBDO0lBQ3RDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQyxVQUFVQyxZQUFZO0lBQ2pDO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUQsWUFBWUUsbUJBQU9BLENBQUMsd0dBQTRCLEdBRXRELHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2VydmVyL3dlYi9leHBvcnRzL25leHQtcmVzcG9uc2UuanM/ODhhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZm9yIG1vZHVsYXJpemVkIGltcG9ydHMgZm9yIG5leHQvc2VydmVyIHRvIGdldCBmdWxseS10cmVlc2hha2luZy5cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3Jlc3BvbnNlLk5leHRSZXNwb25zZTtcbiAgICB9XG59KTtcbmNvbnN0IF9yZXNwb25zZSA9IHJlcXVpcmUoXCIuLi9zcGVjLWV4dGVuc2lvbi9yZXNwb25zZVwiKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV4dC1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX3Jlc3BvbnNlIiwiTmV4dFJlc3BvbnNlIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/http.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/server/web/http.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * List of valid HTTP methods that can be implemented by Next.js's Custom App\n * Routes.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    HTTP_METHODS: function() {\n        return HTTP_METHODS;\n    },\n    isHTTPMethod: function() {\n        return isHTTPMethod;\n    }\n});\nconst HTTP_METHODS = [\n    \"GET\",\n    \"HEAD\",\n    \"OPTIONS\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"PATCH\"\n];\nfunction isHTTPMethod(maybeMethod) {\n    return HTTP_METHODS.includes(maybeMethod);\n} //# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvaHR0cC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7O0NBR0MsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGLEtBQU1DLENBQUFBLENBR047QUFDQSxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLEdBQUc7SUFDeEIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVk7UUFDWkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtJQUNBQyxjQUFjO1FBQ1YsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTUQsZUFBZTtJQUNqQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNIO0FBQ0QsU0FBU0MsYUFBYU8sV0FBVztJQUM3QixPQUFPUixhQUFhUyxRQUFRLENBQUNEO0FBQ2pDLEVBRUEsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL2h0dHAuanM/ZTBjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExpc3Qgb2YgdmFsaWQgSFRUUCBtZXRob2RzIHRoYXQgY2FuIGJlIGltcGxlbWVudGVkIGJ5IE5leHQuanMncyBDdXN0b20gQXBwXG4gKiBSb3V0ZXMuXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBIVFRQX01FVEhPRFM6IG51bGwsXG4gICAgaXNIVFRQTWV0aG9kOiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIEhUVFBfTUVUSE9EUzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBIVFRQX01FVEhPRFM7XG4gICAgfSxcbiAgICBpc0hUVFBNZXRob2Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNIVFRQTWV0aG9kO1xuICAgIH1cbn0pO1xuY29uc3QgSFRUUF9NRVRIT0RTID0gW1xuICAgIFwiR0VUXCIsXG4gICAgXCJIRUFEXCIsXG4gICAgXCJPUFRJT05TXCIsXG4gICAgXCJQT1NUXCIsXG4gICAgXCJQVVRcIixcbiAgICBcIkRFTEVURVwiLFxuICAgIFwiUEFUQ0hcIlxuXTtcbmZ1bmN0aW9uIGlzSFRUUE1ldGhvZChtYXliZU1ldGhvZCkge1xuICAgIHJldHVybiBIVFRQX01FVEhPRFMuaW5jbHVkZXMobWF5YmVNZXRob2QpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIkhUVFBfTUVUSE9EUyIsImlzSFRUUE1ldGhvZCIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsIm1heWJlTWV0aG9kIiwiaW5jbHVkZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/next-url.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/server/web/next-url.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextURL\", ({\n    enumerable: true,\n    get: function() {\n        return NextURL;\n    }\n}));\nconst _detectdomainlocale = __webpack_require__(/*! ../../shared/lib/i18n/detect-domain-locale */ \"(rsc)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\");\nconst _formatnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/format-next-pathname-info */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\nconst _gethostname = __webpack_require__(/*! ../../shared/lib/get-hostname */ \"(rsc)/./node_modules/next/dist/shared/lib/get-hostname.js\");\nconst _getnextpathnameinfo = __webpack_require__(/*! ../../shared/lib/router/utils/get-next-pathname-info */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\nconst REGEX_LOCALHOST_HOSTNAME = /(?!^https?:\\/\\/)(127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|\\[::1\\]|localhost)/;\nfunction parseURL(url, base) {\n    return new URL(String(url).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"), base && String(base).replace(REGEX_LOCALHOST_HOSTNAME, \"localhost\"));\n}\nconst Internal = Symbol(\"NextURLInternal\");\nclass NextURL {\n    constructor(input, baseOrOpts, opts){\n        let base;\n        let options;\n        if (typeof baseOrOpts === \"object\" && \"pathname\" in baseOrOpts || typeof baseOrOpts === \"string\") {\n            base = baseOrOpts;\n            options = opts || {};\n        } else {\n            options = opts || baseOrOpts || {};\n        }\n        this[Internal] = {\n            url: parseURL(input, base ?? options.base),\n            options: options,\n            basePath: \"\"\n        };\n        this.analyze();\n    }\n    analyze() {\n        var _this_Internal_options_nextConfig, _this_Internal_options_nextConfig_i18n, _this_Internal_domainLocale, _this_Internal_options_nextConfig1, _this_Internal_options_nextConfig_i18n1;\n        const info = (0, _getnextpathnameinfo.getNextPathnameInfo)(this[Internal].url.pathname, {\n            nextConfig: this[Internal].options.nextConfig,\n            parseData: !undefined,\n            i18nProvider: this[Internal].options.i18nProvider\n        });\n        const hostname = (0, _gethostname.getHostname)(this[Internal].url, this[Internal].options.headers);\n        this[Internal].domainLocale = this[Internal].options.i18nProvider ? this[Internal].options.i18nProvider.detectDomainLocale(hostname) : (0, _detectdomainlocale.detectDomainLocale)((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.domains, hostname);\n        const defaultLocale = ((_this_Internal_domainLocale = this[Internal].domainLocale) == null ? void 0 : _this_Internal_domainLocale.defaultLocale) || ((_this_Internal_options_nextConfig1 = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n1 = _this_Internal_options_nextConfig1.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n1.defaultLocale);\n        this[Internal].url.pathname = info.pathname;\n        this[Internal].defaultLocale = defaultLocale;\n        this[Internal].basePath = info.basePath ?? \"\";\n        this[Internal].buildId = info.buildId;\n        this[Internal].locale = info.locale ?? defaultLocale;\n        this[Internal].trailingSlash = info.trailingSlash;\n    }\n    formatPathname() {\n        return (0, _formatnextpathnameinfo.formatNextPathnameInfo)({\n            basePath: this[Internal].basePath,\n            buildId: this[Internal].buildId,\n            defaultLocale: !this[Internal].options.forceLocale ? this[Internal].defaultLocale : undefined,\n            locale: this[Internal].locale,\n            pathname: this[Internal].url.pathname,\n            trailingSlash: this[Internal].trailingSlash\n        });\n    }\n    formatSearch() {\n        return this[Internal].url.search;\n    }\n    get buildId() {\n        return this[Internal].buildId;\n    }\n    set buildId(buildId) {\n        this[Internal].buildId = buildId;\n    }\n    get locale() {\n        return this[Internal].locale ?? \"\";\n    }\n    set locale(locale) {\n        var _this_Internal_options_nextConfig, _this_Internal_options_nextConfig_i18n;\n        if (!this[Internal].locale || !((_this_Internal_options_nextConfig = this[Internal].options.nextConfig) == null ? void 0 : (_this_Internal_options_nextConfig_i18n = _this_Internal_options_nextConfig.i18n) == null ? void 0 : _this_Internal_options_nextConfig_i18n.locales.includes(locale))) {\n            throw new TypeError(`The NextURL configuration includes no locale \"${locale}\"`);\n        }\n        this[Internal].locale = locale;\n    }\n    get defaultLocale() {\n        return this[Internal].defaultLocale;\n    }\n    get domainLocale() {\n        return this[Internal].domainLocale;\n    }\n    get searchParams() {\n        return this[Internal].url.searchParams;\n    }\n    get host() {\n        return this[Internal].url.host;\n    }\n    set host(value) {\n        this[Internal].url.host = value;\n    }\n    get hostname() {\n        return this[Internal].url.hostname;\n    }\n    set hostname(value) {\n        this[Internal].url.hostname = value;\n    }\n    get port() {\n        return this[Internal].url.port;\n    }\n    set port(value) {\n        this[Internal].url.port = value;\n    }\n    get protocol() {\n        return this[Internal].url.protocol;\n    }\n    set protocol(value) {\n        this[Internal].url.protocol = value;\n    }\n    get href() {\n        const pathname = this.formatPathname();\n        const search = this.formatSearch();\n        return `${this.protocol}//${this.host}${pathname}${search}${this.hash}`;\n    }\n    set href(url) {\n        this[Internal].url = parseURL(url);\n        this.analyze();\n    }\n    get origin() {\n        return this[Internal].url.origin;\n    }\n    get pathname() {\n        return this[Internal].url.pathname;\n    }\n    set pathname(value) {\n        this[Internal].url.pathname = value;\n    }\n    get hash() {\n        return this[Internal].url.hash;\n    }\n    set hash(value) {\n        this[Internal].url.hash = value;\n    }\n    get search() {\n        return this[Internal].url.search;\n    }\n    set search(value) {\n        this[Internal].url.search = value;\n    }\n    get password() {\n        return this[Internal].url.password;\n    }\n    set password(value) {\n        this[Internal].url.password = value;\n    }\n    get username() {\n        return this[Internal].url.username;\n    }\n    set username(value) {\n        this[Internal].url.username = value;\n    }\n    get basePath() {\n        return this[Internal].basePath;\n    }\n    set basePath(value) {\n        this[Internal].basePath = value.startsWith(\"/\") ? value : `/${value}`;\n    }\n    toString() {\n        return this.href;\n    }\n    toJSON() {\n        return this.href;\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            href: this.href,\n            origin: this.origin,\n            protocol: this.protocol,\n            username: this.username,\n            password: this.password,\n            host: this.host,\n            hostname: this.hostname,\n            port: this.port,\n            pathname: this.pathname,\n            search: this.search,\n            searchParams: this.searchParams,\n            hash: this.hash\n        };\n    }\n    clone() {\n        return new NextURL(String(this), this[Internal].options);\n    }\n} //# sourceMappingURL=next-url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/next-url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/headers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyHeadersError: function() {\n        return ReadonlyHeadersError;\n    },\n    HeadersAdapter: function() {\n        return HeadersAdapter;\n    }\n});\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyHeadersError extends Error {\n    constructor(){\n        super(\"Headers cannot be modified. Read more: https://nextjs.org/docs/app/api-reference/functions/headers\");\n    }\n    static callable() {\n        throw new ReadonlyHeadersError();\n    }\n}\nclass HeadersAdapter extends Headers {\n    constructor(headers){\n        // We've already overridden the methods that would be called, so we're just\n        // calling the super constructor to ensure that the instanceof check works.\n        super();\n        this.headers = new Proxy(headers, {\n            get (target, prop, receiver) {\n                // Because this is just an object, we expect that all \"get\" operations\n                // are for properties. If it's a \"get\" for a symbol, we'll just return\n                // the symbol.\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return undefined.\n                if (typeof original === \"undefined\") return;\n                // If the original casing exists, return the value.\n                return _reflect.ReflectAdapter.get(target, original, receiver);\n            },\n            set (target, prop, value, receiver) {\n                if (typeof prop === \"symbol\") {\n                    return _reflect.ReflectAdapter.set(target, prop, value, receiver);\n                }\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, use the prop as the key.\n                return _reflect.ReflectAdapter.set(target, original ?? prop, value, receiver);\n            },\n            has (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.has(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return false.\n                if (typeof original === \"undefined\") return false;\n                // If the original casing exists, return true.\n                return _reflect.ReflectAdapter.has(target, original);\n            },\n            deleteProperty (target, prop) {\n                if (typeof prop === \"symbol\") return _reflect.ReflectAdapter.deleteProperty(target, prop);\n                const lowercased = prop.toLowerCase();\n                // Let's find the original casing of the key. This assumes that there is\n                // no mixed case keys (e.g. \"Content-Type\" and \"content-type\") in the\n                // headers object.\n                const original = Object.keys(headers).find((o)=>o.toLowerCase() === lowercased);\n                // If the original casing doesn't exist, return true.\n                if (typeof original === \"undefined\") return true;\n                // If the original casing exists, delete the property.\n                return _reflect.ReflectAdapter.deleteProperty(target, original);\n            }\n        });\n    }\n    /**\n   * Seals a Headers instance to prevent modification by throwing an error when\n   * any mutating method is called.\n   */ static seal(headers) {\n        return new Proxy(headers, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"append\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyHeadersError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n    /**\n   * Merges a header value into a string. This stores multiple values as an\n   * array, so we need to merge them into a string.\n   *\n   * @param value a header value\n   * @returns a merged header value (a string)\n   */ merge(value) {\n        if (Array.isArray(value)) return value.join(\", \");\n        return value;\n    }\n    /**\n   * Creates a Headers instance from a plain object or a Headers instance.\n   *\n   * @param headers a plain object or a Headers instance\n   * @returns a headers instance\n   */ static from(headers) {\n        if (headers instanceof Headers) return headers;\n        return new HeadersAdapter(headers);\n    }\n    append(name, value) {\n        const existing = this.headers[name];\n        if (typeof existing === \"string\") {\n            this.headers[name] = [\n                existing,\n                value\n            ];\n        } else if (Array.isArray(existing)) {\n            existing.push(value);\n        } else {\n            this.headers[name] = value;\n        }\n    }\n    delete(name) {\n        delete this.headers[name];\n    }\n    get(name) {\n        const value = this.headers[name];\n        if (typeof value !== \"undefined\") return this.merge(value);\n        return null;\n    }\n    has(name) {\n        return typeof this.headers[name] !== \"undefined\";\n    }\n    set(name, value) {\n        this.headers[name] = value;\n    }\n    forEach(callbackfn, thisArg) {\n        for (const [name, value] of this.entries()){\n            callbackfn.call(thisArg, value, name, this);\n        }\n    }\n    *entries() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(name);\n            yield [\n                name,\n                value\n            ];\n        }\n    }\n    *keys() {\n        for (const key of Object.keys(this.headers)){\n            const name = key.toLowerCase();\n            yield name;\n        }\n    }\n    *values() {\n        for (const key of Object.keys(this.headers)){\n            // We assert here that this is a string because we got it from the\n            // Object.keys() call above.\n            const value = this.get(key);\n            yield value;\n        }\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/headers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"ReflectAdapter\", ({\n    enumerable: true,\n    get: function() {\n        return ReflectAdapter;\n    }\n}));\nclass ReflectAdapter {\n    static get(target, prop, receiver) {\n        const value = Reflect.get(target, prop, receiver);\n        if (typeof value === \"function\") {\n            return value.bind(target);\n        }\n        return value;\n    }\n    static set(target, prop, value, receiver) {\n        return Reflect.set(target, prop, value, receiver);\n    }\n    static has(target, prop) {\n        return Reflect.has(target, prop);\n    }\n    static deleteProperty(target, prop) {\n        return Reflect.deleteProperty(target, prop);\n    }\n} //# sourceMappingURL=reflect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVmbGVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsa0RBQWlEO0lBQzdDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUE7SUFDRixPQUFPRCxJQUFJRSxNQUFNLEVBQUVDLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQy9CLE1BQU1OLFFBQVFPLFFBQVFMLEdBQUcsQ0FBQ0UsUUFBUUMsTUFBTUM7UUFDeEMsSUFBSSxPQUFPTixVQUFVLFlBQVk7WUFDN0IsT0FBT0EsTUFBTVEsSUFBSSxDQUFDSjtRQUN0QjtRQUNBLE9BQU9KO0lBQ1g7SUFDQSxPQUFPUyxJQUFJTCxNQUFNLEVBQUVDLElBQUksRUFBRUwsS0FBSyxFQUFFTSxRQUFRLEVBQUU7UUFDdEMsT0FBT0MsUUFBUUUsR0FBRyxDQUFDTCxRQUFRQyxNQUFNTCxPQUFPTTtJQUM1QztJQUNBLE9BQU9JLElBQUlOLE1BQU0sRUFBRUMsSUFBSSxFQUFFO1FBQ3JCLE9BQU9FLFFBQVFHLEdBQUcsQ0FBQ04sUUFBUUM7SUFDL0I7SUFDQSxPQUFPTSxlQUFlUCxNQUFNLEVBQUVDLElBQUksRUFBRTtRQUNoQyxPQUFPRSxRQUFRSSxjQUFjLENBQUNQLFFBQVFDO0lBQzFDO0FBQ0osRUFFQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVmbGVjdC5qcz80Y2MxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVmbGVjdEFkYXB0ZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3RBZGFwdGVyO1xuICAgIH1cbn0pO1xuY2xhc3MgUmVmbGVjdEFkYXB0ZXIge1xuICAgIHN0YXRpYyBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5iaW5kKHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzdGF0aWMgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3AsIHZhbHVlLCByZWNlaXZlcik7XG4gICAgfVxuICAgIHN0YXRpYyBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3ApO1xuICAgIH1cbiAgICBzdGF0aWMgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZsZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJSZWZsZWN0QWRhcHRlciIsInRhcmdldCIsInByb3AiLCJyZWNlaXZlciIsIlJlZmxlY3QiLCJiaW5kIiwic2V0IiwiaGFzIiwiZGVsZXRlUHJvcGVydHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    ReadonlyRequestCookiesError: function() {\n        return ReadonlyRequestCookiesError;\n    },\n    RequestCookiesAdapter: function() {\n        return RequestCookiesAdapter;\n    },\n    getModifiedCookieValues: function() {\n        return getModifiedCookieValues;\n    },\n    appendMutableCookies: function() {\n        return appendMutableCookies;\n    },\n    MutableRequestCookiesAdapter: function() {\n        return MutableRequestCookiesAdapter;\n    }\n});\nconst _cookies = __webpack_require__(/*! ../cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst _reflect = __webpack_require__(/*! ./reflect */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/reflect.js\");\nclass ReadonlyRequestCookiesError extends Error {\n    constructor(){\n        super(\"Cookies can only be modified in a Server Action or Route Handler. Read more: https://nextjs.org/docs/app/api-reference/functions/cookies#cookiessetname-value-options\");\n    }\n    static callable() {\n        throw new ReadonlyRequestCookiesError();\n    }\n}\nclass RequestCookiesAdapter {\n    static seal(cookies) {\n        return new Proxy(cookies, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    case \"clear\":\n                    case \"delete\":\n                    case \"set\":\n                        return ReadonlyRequestCookiesError.callable;\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n}\nconst SYMBOL_MODIFY_COOKIE_VALUES = Symbol.for(\"next.mutated.cookies\");\nfunction getModifiedCookieValues(cookies) {\n    const modified = cookies[SYMBOL_MODIFY_COOKIE_VALUES];\n    if (!modified || !Array.isArray(modified) || modified.length === 0) {\n        return [];\n    }\n    return modified;\n}\nfunction appendMutableCookies(headers, mutableCookies) {\n    const modifiedCookieValues = getModifiedCookieValues(mutableCookies);\n    if (modifiedCookieValues.length === 0) {\n        return false;\n    }\n    // Return a new response that extends the response with\n    // the modified cookies as fallbacks. `res`' cookies\n    // will still take precedence.\n    const resCookies = new _cookies.ResponseCookies(headers);\n    const returnedCookies = resCookies.getAll();\n    // Set the modified cookies as fallbacks.\n    for (const cookie of modifiedCookieValues){\n        resCookies.set(cookie);\n    }\n    // Set the original cookies as the final values.\n    for (const cookie of returnedCookies){\n        resCookies.set(cookie);\n    }\n    return true;\n}\nclass MutableRequestCookiesAdapter {\n    static wrap(cookies, onUpdateCookies) {\n        const responseCookes = new _cookies.ResponseCookies(new Headers());\n        for (const cookie of cookies.getAll()){\n            responseCookes.set(cookie);\n        }\n        let modifiedValues = [];\n        const modifiedCookies = new Set();\n        const updateResponseCookies = ()=>{\n            var _fetch___nextGetStaticStore;\n            // TODO-APP: change method of getting staticGenerationAsyncStore\n            const staticGenerationAsyncStore = fetch.__nextGetStaticStore == null ? void 0 : (_fetch___nextGetStaticStore = fetch.__nextGetStaticStore()) == null ? void 0 : _fetch___nextGetStaticStore.getStore();\n            if (staticGenerationAsyncStore) {\n                staticGenerationAsyncStore.pathWasRevalidated = true;\n            }\n            const allCookies = responseCookes.getAll();\n            modifiedValues = allCookies.filter((c)=>modifiedCookies.has(c.name));\n            if (onUpdateCookies) {\n                const serializedCookies = [];\n                for (const cookie of modifiedValues){\n                    const tempCookies = new _cookies.ResponseCookies(new Headers());\n                    tempCookies.set(cookie);\n                    serializedCookies.push(tempCookies.toString());\n                }\n                onUpdateCookies(serializedCookies);\n            }\n        };\n        return new Proxy(responseCookes, {\n            get (target, prop, receiver) {\n                switch(prop){\n                    // A special symbol to get the modified cookie values\n                    case SYMBOL_MODIFY_COOKIE_VALUES:\n                        return modifiedValues;\n                    // TODO: Throw error if trying to set a cookie after the response\n                    // headers have been set.\n                    case \"delete\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                target.delete(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    case \"set\":\n                        return function(...args) {\n                            modifiedCookies.add(typeof args[0] === \"string\" ? args[0] : args[0].name);\n                            try {\n                                return target.set(...args);\n                            } finally{\n                                updateResponseCookies();\n                            }\n                        };\n                    default:\n                        return _reflect.ReflectAdapter.get(target, prop, receiver);\n                }\n            }\n        });\n    }\n} //# sourceMappingURL=request-cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js":
/*!*********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/cookies.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    RequestCookies: function() {\n        return _cookies.RequestCookies;\n    },\n    ResponseCookies: function() {\n        return _cookies.ResponseCookies;\n    }\n});\nconst _cookies = __webpack_require__(/*! next/dist/compiled/@edge-runtime/cookies */ \"(rsc)/./node_modules/next/dist/compiled/@edge-runtime/cookies/index.js\"); //# sourceMappingURL=cookies.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vY29va2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcsZ0JBQWdCO1FBQ1osT0FBT1EsU0FBU1IsY0FBYztJQUNsQztJQUNBQyxpQkFBaUI7UUFDYixPQUFPTyxTQUFTUCxlQUFlO0lBQ25DO0FBQ0o7QUFDQSxNQUFNTyxXQUFXQyxtQkFBT0EsQ0FBQyx3SEFBMEMsR0FFbkUsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2Nvb2tpZXMuanM/MTQyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFJlcXVlc3RDb29raWVzOiBudWxsLFxuICAgIFJlc3BvbnNlQ29va2llczogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICBSZXF1ZXN0Q29va2llczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29va2llcy5SZXF1ZXN0Q29va2llcztcbiAgICB9LFxuICAgIFJlc3BvbnNlQ29va2llczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29va2llcy5SZXNwb25zZUNvb2tpZXM7XG4gICAgfVxufSk7XG5jb25zdCBfY29va2llcyA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvQGVkZ2UtcnVudGltZS9jb29raWVzXCIpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb29raWVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIlJlcXVlc3RDb29raWVzIiwiUmVzcG9uc2VDb29raWVzIiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX2Nvb2tpZXMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/server/web/spec-extension/response.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"NextResponse\", ({\n    enumerable: true,\n    get: function() {\n        return NextResponse;\n    }\n}));\nconst _nexturl = __webpack_require__(/*! ../next-url */ \"(rsc)/./node_modules/next/dist/server/web/next-url.js\");\nconst _utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\nconst _cookies = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/cookies.js\");\nconst INTERNALS = Symbol(\"internal response\");\nconst REDIRECTS = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nfunction handleMiddlewareField(init, headers) {\n    var _init_request;\n    if (init == null ? void 0 : (_init_request = init.request) == null ? void 0 : _init_request.headers) {\n        if (!(init.request.headers instanceof Headers)) {\n            throw new Error(\"request.headers must be an instance of Headers\");\n        }\n        const keys = [];\n        for (const [key, value] of init.request.headers){\n            headers.set(\"x-middleware-request-\" + key, value);\n            keys.push(key);\n        }\n        headers.set(\"x-middleware-override-headers\", keys.join(\",\"));\n    }\n}\nclass NextResponse extends Response {\n    constructor(body, init = {}){\n        super(body, init);\n        this[INTERNALS] = {\n            cookies: new _cookies.ResponseCookies(this.headers),\n            url: init.url ? new _nexturl.NextURL(init.url, {\n                headers: (0, _utils.toNodeOutgoingHttpHeaders)(this.headers),\n                nextConfig: init.nextConfig\n            }) : undefined\n        };\n    }\n    [Symbol.for(\"edge-runtime.inspect.custom\")]() {\n        return {\n            cookies: this.cookies,\n            url: this.url,\n            // rest of props come from Response\n            body: this.body,\n            bodyUsed: this.bodyUsed,\n            headers: Object.fromEntries(this.headers),\n            ok: this.ok,\n            redirected: this.redirected,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type\n        };\n    }\n    get cookies() {\n        return this[INTERNALS].cookies;\n    }\n    static json(body, init) {\n        // @ts-expect-error This is not in lib/dom right now, and we can't augment it.\n        const response = Response.json(body, init);\n        return new NextResponse(response.body, response);\n    }\n    static redirect(url, init) {\n        const status = typeof init === \"number\" ? init : (init == null ? void 0 : init.status) ?? 307;\n        if (!REDIRECTS.has(status)) {\n            throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        const initObj = typeof init === \"object\" ? init : {};\n        const headers = new Headers(initObj == null ? void 0 : initObj.headers);\n        headers.set(\"Location\", (0, _utils.validateURL)(url));\n        return new NextResponse(null, {\n            ...initObj,\n            headers,\n            status\n        });\n    }\n    static rewrite(destination, init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-rewrite\", (0, _utils.validateURL)(destination));\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n    static next(init) {\n        const headers = new Headers(init == null ? void 0 : init.headers);\n        headers.set(\"x-middleware-next\", \"1\");\n        handleMiddlewareField(init, headers);\n        return new NextResponse(null, {\n            ...init,\n            headers\n        });\n    }\n} //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/server/web/utils.js":
/*!****************************************************!*\
  !*** ./node_modules/next/dist/server/web/utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    fromNodeOutgoingHttpHeaders: function() {\n        return fromNodeOutgoingHttpHeaders;\n    },\n    splitCookiesString: function() {\n        return splitCookiesString;\n    },\n    toNodeOutgoingHttpHeaders: function() {\n        return toNodeOutgoingHttpHeaders;\n    },\n    validateURL: function() {\n        return validateURL;\n    }\n});\nfunction fromNodeOutgoingHttpHeaders(nodeHeaders) {\n    const headers = new Headers();\n    for (let [key, value] of Object.entries(nodeHeaders)){\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (let v of values){\n            if (typeof v === \"undefined\") continue;\n            if (typeof v === \"number\") {\n                v = v.toString();\n            }\n            headers.append(key, v);\n        }\n    }\n    return headers;\n}\nfunction splitCookiesString(cookiesString) {\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nfunction toNodeOutgoingHttpHeaders(headers) {\n    const nodeHeaders = {};\n    const cookies = [];\n    if (headers) {\n        for (const [key, value] of headers.entries()){\n            if (key.toLowerCase() === \"set-cookie\") {\n                // We may have gotten a comma joined string of cookies, or multiple\n                // set-cookie headers. We need to merge them into one header array\n                // to represent all the cookies.\n                cookies.push(...splitCookiesString(value));\n                nodeHeaders[key] = cookies.length === 1 ? cookies[0] : cookies;\n            } else {\n                nodeHeaders[key] = value;\n            }\n        }\n    }\n    return nodeHeaders;\n}\nfunction validateURL(url) {\n    try {\n        return String(new URL(String(url)));\n    } catch (error) {\n        throw new Error(`URL is malformed \"${String(url)}\". Please use only absolute URLs - https://nextjs.org/docs/messages/middleware-relative-urls`, {\n            cause: error\n        });\n    }\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/server/web/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/get-hostname.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/get-hostname.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getHostname\", ({\n    enumerable: true,\n    get: function() {\n        return getHostname;\n    }\n}));\nfunction getHostname(parsed, headers) {\n    // Get the hostname from the headers if it exists, otherwise use the parsed\n    // hostname.\n    let hostname;\n    if ((headers == null ? void 0 : headers.host) && !Array.isArray(headers.host)) {\n        hostname = headers.host.toString().split(\":\")[0];\n    } else if (parsed.hostname) {\n        hostname = parsed.hostname;\n    } else return;\n    return hostname.toLowerCase();\n} //# sourceMappingURL=get-hostname.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvZ2V0LWhvc3RuYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCwrQ0FBOEM7SUFDMUNJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxZQUFZQyxNQUFNLEVBQUVDLE9BQU87SUFDaEMsMkVBQTJFO0lBQzNFLFlBQVk7SUFDWixJQUFJQztJQUNKLElBQUksQ0FBQ0QsV0FBVyxPQUFPLEtBQUssSUFBSUEsUUFBUUUsSUFBSSxLQUFLLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUUUsSUFBSSxHQUFHO1FBQzNFRCxXQUFXRCxRQUFRRSxJQUFJLENBQUNHLFFBQVEsR0FBR0MsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBQ3BELE9BQU8sSUFBSVAsT0FBT0UsUUFBUSxFQUFFO1FBQ3hCQSxXQUFXRixPQUFPRSxRQUFRO0lBQzlCLE9BQU87SUFDUCxPQUFPQSxTQUFTTSxXQUFXO0FBQy9CLEVBRUEsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2dldC1ob3N0bmFtZS5qcz80Y2Y5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0SG9zdG5hbWVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEhvc3RuYW1lO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gZ2V0SG9zdG5hbWUocGFyc2VkLCBoZWFkZXJzKSB7XG4gICAgLy8gR2V0IHRoZSBob3N0bmFtZSBmcm9tIHRoZSBoZWFkZXJzIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIHVzZSB0aGUgcGFyc2VkXG4gICAgLy8gaG9zdG5hbWUuXG4gICAgbGV0IGhvc3RuYW1lO1xuICAgIGlmICgoaGVhZGVycyA9PSBudWxsID8gdm9pZCAwIDogaGVhZGVycy5ob3N0KSAmJiAhQXJyYXkuaXNBcnJheShoZWFkZXJzLmhvc3QpKSB7XG4gICAgICAgIGhvc3RuYW1lID0gaGVhZGVycy5ob3N0LnRvU3RyaW5nKCkuc3BsaXQoXCI6XCIpWzBdO1xuICAgIH0gZWxzZSBpZiAocGFyc2VkLmhvc3RuYW1lKSB7XG4gICAgICAgIGhvc3RuYW1lID0gcGFyc2VkLmhvc3RuYW1lO1xuICAgIH0gZWxzZSByZXR1cm47XG4gICAgcmV0dXJuIGhvc3RuYW1lLnRvTG93ZXJDYXNlKCk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1ob3N0bmFtZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2V0SG9zdG5hbWUiLCJwYXJzZWQiLCJoZWFkZXJzIiwiaG9zdG5hbWUiLCJob3N0IiwiQXJyYXkiLCJpc0FycmF5IiwidG9TdHJpbmciLCJzcGxpdCIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/get-hostname.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"detectDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return detectDomainLocale;\n    }\n}));\nfunction detectDomainLocale(domainItems, hostname, detectedLocale) {\n    if (!domainItems) return;\n    if (detectedLocale) {\n        detectedLocale = detectedLocale.toLowerCase();\n    }\n    for (const item of domainItems){\n        var _item_domain, _item_locales;\n        // remove port if present\n        const domainHostname = (_item_domain = item.domain) == null ? void 0 : _item_domain.split(\":\")[0].toLowerCase();\n        if (hostname === domainHostname || detectedLocale === item.defaultLocale.toLowerCase() || ((_item_locales = item.locales) == null ? void 0 : _item_locales.some((locale)=>locale.toLowerCase() === detectedLocale))) {\n            return item;\n        }\n    }\n} //# sourceMappingURL=detect-domain-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9kZXRlY3QtZG9tYWluLWxvY2FsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsc0RBQXFEO0lBQ2pESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsU0FBU0EsbUJBQW1CQyxXQUFXLEVBQUVDLFFBQVEsRUFBRUMsY0FBYztJQUM3RCxJQUFJLENBQUNGLGFBQWE7SUFDbEIsSUFBSUUsZ0JBQWdCO1FBQ2hCQSxpQkFBaUJBLGVBQWVDLFdBQVc7SUFDL0M7SUFDQSxLQUFLLE1BQU1DLFFBQVFKLFlBQVk7UUFDM0IsSUFBSUssY0FBY0M7UUFDbEIseUJBQXlCO1FBQ3pCLE1BQU1DLGlCQUFpQixDQUFDRixlQUFlRCxLQUFLSSxNQUFNLEtBQUssT0FBTyxLQUFLLElBQUlILGFBQWFJLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDTixXQUFXO1FBQzdHLElBQUlGLGFBQWFNLGtCQUFrQkwsbUJBQW1CRSxLQUFLTSxhQUFhLENBQUNQLFdBQVcsTUFBTyxFQUFDRyxnQkFBZ0JGLEtBQUtPLE9BQU8sS0FBSyxPQUFPLEtBQUssSUFBSUwsY0FBY00sSUFBSSxDQUFDLENBQUNDLFNBQVNBLE9BQU9WLFdBQVcsT0FBT0QsZUFBYyxHQUFJO1lBQ2pOLE9BQU9FO1FBQ1g7SUFDSjtBQUNKLEVBRUEsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2kxOG4vZGV0ZWN0LWRvbWFpbi1sb2NhbGUuanM/NzhkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRldGVjdERvbWFpbkxvY2FsZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgIH1cbn0pO1xuZnVuY3Rpb24gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkl0ZW1zLCBob3N0bmFtZSwgZGV0ZWN0ZWRMb2NhbGUpIHtcbiAgICBpZiAoIWRvbWFpbkl0ZW1zKSByZXR1cm47XG4gICAgaWYgKGRldGVjdGVkTG9jYWxlKSB7XG4gICAgICAgIGRldGVjdGVkTG9jYWxlID0gZGV0ZWN0ZWRMb2NhbGUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRvbWFpbkl0ZW1zKXtcbiAgICAgICAgdmFyIF9pdGVtX2RvbWFpbiwgX2l0ZW1fbG9jYWxlcztcbiAgICAgICAgLy8gcmVtb3ZlIHBvcnQgaWYgcHJlc2VudFxuICAgICAgICBjb25zdCBkb21haW5Ib3N0bmFtZSA9IChfaXRlbV9kb21haW4gPSBpdGVtLmRvbWFpbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9pdGVtX2RvbWFpbi5zcGxpdChcIjpcIilbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKGhvc3RuYW1lID09PSBkb21haW5Ib3N0bmFtZSB8fCBkZXRlY3RlZExvY2FsZSA9PT0gaXRlbS5kZWZhdWx0TG9jYWxlLnRvTG93ZXJDYXNlKCkgfHwgKChfaXRlbV9sb2NhbGVzID0gaXRlbS5sb2NhbGVzKSA9PSBudWxsID8gdm9pZCAwIDogX2l0ZW1fbG9jYWxlcy5zb21lKChsb2NhbGUpPT5sb2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gZGV0ZWN0ZWRMb2NhbGUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldGVjdC1kb21haW4tbG9jYWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJkb21haW5JdGVtcyIsImhvc3RuYW1lIiwiZGV0ZWN0ZWRMb2NhbGUiLCJ0b0xvd2VyQ2FzZSIsIml0ZW0iLCJfaXRlbV9kb21haW4iLCJfaXRlbV9sb2NhbGVzIiwiZG9tYWluSG9zdG5hbWUiLCJkb21haW4iLCJzcGxpdCIsImRlZmF1bHRMb2NhbGUiLCJsb2NhbGVzIiwic29tZSIsImxvY2FsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/i18n/detect-domain-locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"normalizeLocalePath\", ({\n    enumerable: true,\n    get: function() {\n        return normalizeLocalePath;\n    }\n}));\nfunction normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split(\"/\");\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join(\"/\") || \"/\";\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n} //# sourceMappingURL=normalize-locale-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9ub3JtYWxpemUtbG9jYWxlLXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLFNBQVNBLG9CQUFvQkMsUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlDO0lBQ0osK0RBQStEO0lBQy9ELE1BQU1DLGdCQUFnQkgsU0FBU0ksS0FBSyxDQUFDO0lBQ3BDSCxDQUFBQSxXQUFXLEVBQUUsRUFBRUksSUFBSSxDQUFDLENBQUNDO1FBQ2xCLElBQUlILGFBQWEsQ0FBQyxFQUFFLElBQUlBLGFBQWEsQ0FBQyxFQUFFLENBQUNJLFdBQVcsT0FBT0QsT0FBT0MsV0FBVyxJQUFJO1lBQzdFTCxpQkFBaUJJO1lBQ2pCSCxjQUFjSyxNQUFNLENBQUMsR0FBRztZQUN4QlIsV0FBV0csY0FBY00sSUFBSSxDQUFDLFFBQVE7WUFDdEMsT0FBTztRQUNYO1FBQ0EsT0FBTztJQUNYO0lBQ0EsT0FBTztRQUNIVDtRQUNBRTtJQUNKO0FBQ0osRUFFQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvaTE4bi9ub3JtYWxpemUtbG9jYWxlLXBhdGguanM/MDQzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5vcm1hbGl6ZUxvY2FsZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZUxvY2FsZVBhdGg7XG4gICAgfVxufSk7XG5mdW5jdGlvbiBub3JtYWxpemVMb2NhbGVQYXRoKHBhdGhuYW1lLCBsb2NhbGVzKSB7XG4gICAgbGV0IGRldGVjdGVkTG9jYWxlO1xuICAgIC8vIGZpcnN0IGl0ZW0gd2lsbCBiZSBlbXB0eSBzdHJpbmcgZnJvbSBzcGxpdHRpbmcgYXQgZmlyc3QgY2hhclxuICAgIGNvbnN0IHBhdGhuYW1lUGFydHMgPSBwYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgKGxvY2FsZXMgfHwgW10pLnNvbWUoKGxvY2FsZSk9PntcbiAgICAgICAgaWYgKHBhdGhuYW1lUGFydHNbMV0gJiYgcGF0aG5hbWVQYXJ0c1sxXS50b0xvd2VyQ2FzZSgpID09PSBsb2NhbGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgZGV0ZWN0ZWRMb2NhbGUgPSBsb2NhbGU7XG4gICAgICAgICAgICBwYXRobmFtZVBhcnRzLnNwbGljZSgxLCAxKTtcbiAgICAgICAgICAgIHBhdGhuYW1lID0gcGF0aG5hbWVQYXJ0cy5qb2luKFwiL1wiKSB8fCBcIi9cIjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgZGV0ZWN0ZWRMb2NhbGVcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemUtbG9jYWxlLXBhdGguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIm5vcm1hbGl6ZUxvY2FsZVBhdGgiLCJwYXRobmFtZSIsImxvY2FsZXMiLCJkZXRlY3RlZExvY2FsZSIsInBhdGhuYW1lUGFydHMiLCJzcGxpdCIsInNvbWUiLCJsb2NhbGUiLCJ0b0xvd2VyQ2FzZSIsInNwbGljZSIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-locale.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addLocale\", ({\n    enumerable: true,\n    get: function() {\n        return addLocale;\n    }\n}));\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction addLocale(path, locale, defaultLocale, ignorePrefix) {\n    // If no locale was given or the locale is the default locale, we don't need\n    // to prefix the path.\n    if (!locale || locale === defaultLocale) return path;\n    const lower = path.toLowerCase();\n    // If the path is an API path or the path already has the locale prefix, we\n    // don't need to prefix the path.\n    if (!ignorePrefix) {\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/api\")) return path;\n        if ((0, _pathhasprefix.pathHasPrefix)(lower, \"/\" + locale.toLowerCase())) return path;\n    }\n    // Add the locale prefix to the path.\n    return (0, _addpathprefix.addPathPrefix)(path, \"/\" + locale);\n} //# sourceMappingURL=add-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1sb2NhbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGlCQUFpQkMsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELFNBQVNGLFVBQVVJLElBQUksRUFBRUMsTUFBTSxFQUFFQyxhQUFhLEVBQUVDLFlBQVk7SUFDeEQsNEVBQTRFO0lBQzVFLHNCQUFzQjtJQUN0QixJQUFJLENBQUNGLFVBQVVBLFdBQVdDLGVBQWUsT0FBT0Y7SUFDaEQsTUFBTUksUUFBUUosS0FBS0ssV0FBVztJQUM5QiwyRUFBMkU7SUFDM0UsaUNBQWlDO0lBQ2pDLElBQUksQ0FBQ0YsY0FBYztRQUNmLElBQUksQ0FBQyxHQUFHSixlQUFlTyxhQUFhLEVBQUVGLE9BQU8sU0FBUyxPQUFPSjtRQUM3RCxJQUFJLENBQUMsR0FBR0QsZUFBZU8sYUFBYSxFQUFFRixPQUFPLE1BQU1ILE9BQU9JLFdBQVcsS0FBSyxPQUFPTDtJQUNyRjtJQUNBLHFDQUFxQztJQUNyQyxPQUFPLENBQUMsR0FBR0gsZUFBZVUsYUFBYSxFQUFFUCxNQUFNLE1BQU1DO0FBQ3pELEVBRUEsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci91dGlscy9hZGQtbG9jYWxlLmpzPzAyMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRMb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFkZExvY2FsZTtcbiAgICB9XG59KTtcbmNvbnN0IF9hZGRwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vYWRkLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBhZGRMb2NhbGUocGF0aCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlLCBpZ25vcmVQcmVmaXgpIHtcbiAgICAvLyBJZiBubyBsb2NhbGUgd2FzIGdpdmVuIG9yIHRoZSBsb2NhbGUgaXMgdGhlIGRlZmF1bHQgbG9jYWxlLCB3ZSBkb24ndCBuZWVkXG4gICAgLy8gdG8gcHJlZml4IHRoZSBwYXRoLlxuICAgIGlmICghbG9jYWxlIHx8IGxvY2FsZSA9PT0gZGVmYXVsdExvY2FsZSkgcmV0dXJuIHBhdGg7XG4gICAgY29uc3QgbG93ZXIgPSBwYXRoLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gSWYgdGhlIHBhdGggaXMgYW4gQVBJIHBhdGggb3IgdGhlIHBhdGggYWxyZWFkeSBoYXMgdGhlIGxvY2FsZSBwcmVmaXgsIHdlXG4gICAgLy8gZG9uJ3QgbmVlZCB0byBwcmVmaXggdGhlIHBhdGguXG4gICAgaWYgKCFpZ25vcmVQcmVmaXgpIHtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvYXBpXCIpKSByZXR1cm4gcGF0aDtcbiAgICAgICAgaWYgKCgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShsb3dlciwgXCIvXCIgKyBsb2NhbGUudG9Mb3dlckNhc2UoKSkpIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGxvY2FsZSBwcmVmaXggdG8gdGhlIHBhdGguXG4gICAgcmV0dXJuICgwLCBfYWRkcGF0aHByZWZpeC5hZGRQYXRoUHJlZml4KShwYXRoLCBcIi9cIiArIGxvY2FsZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZC1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFkZExvY2FsZSIsIl9hZGRwYXRocHJlZml4IiwicmVxdWlyZSIsIl9wYXRoaGFzcHJlZml4IiwicGF0aCIsImxvY2FsZSIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJsb3dlciIsInRvTG93ZXJDYXNlIiwicGF0aEhhc1ByZWZpeCIsImFkZFBhdGhQcmVmaXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathPrefix(path, prefix) {\n    if (!path.startsWith(\"/\") || !prefix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + prefix + pathname + query + hash;\n} //# sourceMappingURL=add-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsMEZBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsUUFBUTtRQUNsQyxPQUFPRDtJQUNYO0lBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUcsQ0FBQyxHQUFHUCxXQUFXUSxTQUFTLEVBQUVOO0lBQy9ELE9BQU8sS0FBS0MsU0FBU0UsV0FBV0MsUUFBUUM7QUFDNUMsRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXByZWZpeC5qcz9jMTI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUGF0aFByZWZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkUGF0aFByZWZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXJzZXBhdGggPSByZXF1aXJlKFwiLi9wYXJzZS1wYXRoXCIpO1xuZnVuY3Rpb24gYWRkUGF0aFByZWZpeChwYXRoLCBwcmVmaXgpIHtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcIi9cIikgfHwgIXByZWZpeCkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBwYXRobmFtZSArIHF1ZXJ5ICsgaGFzaDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLXBhdGgtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRQYXRoUHJlZml4IiwiX3BhcnNlcGF0aCIsInJlcXVpcmUiLCJwYXRoIiwicHJlZml4Iiwic3RhcnRzV2l0aCIsInBhdGhuYW1lIiwicXVlcnkiLCJoYXNoIiwicGFyc2VQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addPathSuffix\", ({\n    enumerable: true,\n    get: function() {\n        return addPathSuffix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction addPathSuffix(path, suffix) {\n    if (!path.startsWith(\"/\") || !suffix) {\n        return path;\n    }\n    const { pathname, query, hash } = (0, _parsepath.parsePath)(path);\n    return \"\" + pathname + suffix + query + hash;\n} //# sourceMappingURL=add-path-suffix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXN1ZmZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsMEZBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksQ0FBQ0QsS0FBS0UsVUFBVSxDQUFDLFFBQVEsQ0FBQ0QsUUFBUTtRQUNsQyxPQUFPRDtJQUNYO0lBQ0EsTUFBTSxFQUFFRyxRQUFRLEVBQUdDLEtBQUssRUFBR0MsSUFBSSxFQUFHLEdBQUcsQ0FBQyxHQUFHUCxXQUFXUSxTQUFTLEVBQUVOO0lBQy9ELE9BQU8sS0FBS0csV0FBV0YsU0FBU0csUUFBUUM7QUFDNUMsRUFFQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1wYXRoLXN1ZmZpeC5qcz83YjM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUGF0aFN1ZmZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYWRkUGF0aFN1ZmZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXJzZXBhdGggPSByZXF1aXJlKFwiLi9wYXJzZS1wYXRoXCIpO1xuZnVuY3Rpb24gYWRkUGF0aFN1ZmZpeChwYXRoLCBzdWZmaXgpIHtcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcIi9cIikgfHwgIXN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgcmV0dXJuIFwiXCIgKyBwYXRobmFtZSArIHN1ZmZpeCArIHF1ZXJ5ICsgaGFzaDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLXBhdGgtc3VmZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRQYXRoU3VmZml4IiwiX3BhcnNlcGF0aCIsInJlcXVpcmUiLCJwYXRoIiwic3VmZml4Iiwic3RhcnRzV2l0aCIsInBhdGhuYW1lIiwicXVlcnkiLCJoYXNoIiwicGFyc2VQYXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"formatNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return formatNextPathnameInfo;\n    }\n}));\nconst _removetrailingslash = __webpack_require__(/*! ./remove-trailing-slash */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\nconst _addpathprefix = __webpack_require__(/*! ./add-path-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-prefix.js\");\nconst _addpathsuffix = __webpack_require__(/*! ./add-path-suffix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-path-suffix.js\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/add-locale.js\");\nfunction formatNextPathnameInfo(info) {\n    let pathname = (0, _addlocale.addLocale)(info.pathname, info.locale, info.buildId ? undefined : info.defaultLocale, info.ignorePrefix);\n    if (info.buildId || !info.trailingSlash) {\n        pathname = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n    }\n    if (info.buildId) {\n        pathname = (0, _addpathsuffix.addPathSuffix)((0, _addpathprefix.addPathPrefix)(pathname, \"/_next/data/\" + info.buildId), info.pathname === \"/\" ? \"index.json\" : \".json\");\n    }\n    pathname = (0, _addpathprefix.addPathPrefix)(pathname, info.basePath);\n    return !info.buildId && info.trailingSlash ? !pathname.endsWith(\"/\") ? (0, _addpathsuffix.addPathSuffix)(pathname, \"/\") : pathname : (0, _removetrailingslash.removeTrailingSlash)(pathname);\n} //# sourceMappingURL=format-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2Zvcm1hdC1uZXh0LXBhdGhuYW1lLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDBEQUF5RDtJQUNyREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHVCQUF1QkMsbUJBQU9BLENBQUMsZ0hBQXlCO0FBQzlELE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELE1BQU1FLGlCQUFpQkYsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELE1BQU1HLGFBQWFILG1CQUFPQSxDQUFDLDBGQUFjO0FBQ3pDLFNBQVNGLHVCQUF1Qk0sSUFBSTtJQUNoQyxJQUFJQyxXQUFXLENBQUMsR0FBR0YsV0FBV0csU0FBUyxFQUFFRixLQUFLQyxRQUFRLEVBQUVELEtBQUtHLE1BQU0sRUFBRUgsS0FBS0ksT0FBTyxHQUFHQyxZQUFZTCxLQUFLTSxhQUFhLEVBQUVOLEtBQUtPLFlBQVk7SUFDckksSUFBSVAsS0FBS0ksT0FBTyxJQUFJLENBQUNKLEtBQUtRLGFBQWEsRUFBRTtRQUNyQ1AsV0FBVyxDQUFDLEdBQUdOLHFCQUFxQmMsbUJBQW1CLEVBQUVSO0lBQzdEO0lBQ0EsSUFBSUQsS0FBS0ksT0FBTyxFQUFFO1FBQ2RILFdBQVcsQ0FBQyxHQUFHSCxlQUFlWSxhQUFhLEVBQUUsQ0FBQyxHQUFHYixlQUFlYyxhQUFhLEVBQUVWLFVBQVUsaUJBQWlCRCxLQUFLSSxPQUFPLEdBQUdKLEtBQUtDLFFBQVEsS0FBSyxNQUFNLGVBQWU7SUFDcEs7SUFDQUEsV0FBVyxDQUFDLEdBQUdKLGVBQWVjLGFBQWEsRUFBRVYsVUFBVUQsS0FBS1ksUUFBUTtJQUNwRSxPQUFPLENBQUNaLEtBQUtJLE9BQU8sSUFBSUosS0FBS1EsYUFBYSxHQUFHLENBQUNQLFNBQVNZLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBR2YsZUFBZVksYUFBYSxFQUFFVCxVQUFVLE9BQU9BLFdBQVcsQ0FBQyxHQUFHTixxQkFBcUJjLG1CQUFtQixFQUFFUjtBQUN2TCxFQUVBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvZm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mby5qcz9iMTQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mb1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZm9ybWF0TmV4dFBhdGhuYW1lSW5mbztcbiAgICB9XG59KTtcbmNvbnN0IF9yZW1vdmV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4vcmVtb3ZlLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgX2FkZHBhdGhwcmVmaXggPSByZXF1aXJlKFwiLi9hZGQtcGF0aC1wcmVmaXhcIik7XG5jb25zdCBfYWRkcGF0aHN1ZmZpeCA9IHJlcXVpcmUoXCIuL2FkZC1wYXRoLXN1ZmZpeFwiKTtcbmNvbnN0IF9hZGRsb2NhbGUgPSByZXF1aXJlKFwiLi9hZGQtbG9jYWxlXCIpO1xuZnVuY3Rpb24gZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyhpbmZvKSB7XG4gICAgbGV0IHBhdGhuYW1lID0gKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShpbmZvLnBhdGhuYW1lLCBpbmZvLmxvY2FsZSwgaW5mby5idWlsZElkID8gdW5kZWZpbmVkIDogaW5mby5kZWZhdWx0TG9jYWxlLCBpbmZvLmlnbm9yZVByZWZpeCk7XG4gICAgaWYgKGluZm8uYnVpbGRJZCB8fCAhaW5mby50cmFpbGluZ1NsYXNoKSB7XG4gICAgICAgIHBhdGhuYW1lID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbiAgICB9XG4gICAgaWYgKGluZm8uYnVpbGRJZCkge1xuICAgICAgICBwYXRobmFtZSA9ICgwLCBfYWRkcGF0aHN1ZmZpeC5hZGRQYXRoU3VmZml4KSgoMCwgX2FkZHBhdGhwcmVmaXguYWRkUGF0aFByZWZpeCkocGF0aG5hbWUsIFwiL19uZXh0L2RhdGEvXCIgKyBpbmZvLmJ1aWxkSWQpLCBpbmZvLnBhdGhuYW1lID09PSBcIi9cIiA/IFwiaW5kZXguanNvblwiIDogXCIuanNvblwiKTtcbiAgICB9XG4gICAgcGF0aG5hbWUgPSAoMCwgX2FkZHBhdGhwcmVmaXguYWRkUGF0aFByZWZpeCkocGF0aG5hbWUsIGluZm8uYmFzZVBhdGgpO1xuICAgIHJldHVybiAhaW5mby5idWlsZElkICYmIGluZm8udHJhaWxpbmdTbGFzaCA/ICFwYXRobmFtZS5lbmRzV2l0aChcIi9cIikgPyAoMCwgX2FkZHBhdGhzdWZmaXguYWRkUGF0aFN1ZmZpeCkocGF0aG5hbWUsIFwiL1wiKSA6IHBhdGhuYW1lIDogKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKHBhdGhuYW1lKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mby5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyIsIl9yZW1vdmV0cmFpbGluZ3NsYXNoIiwicmVxdWlyZSIsIl9hZGRwYXRocHJlZml4IiwiX2FkZHBhdGhzdWZmaXgiLCJfYWRkbG9jYWxlIiwiaW5mbyIsInBhdGhuYW1lIiwiYWRkTG9jYWxlIiwibG9jYWxlIiwiYnVpbGRJZCIsInVuZGVmaW5lZCIsImRlZmF1bHRMb2NhbGUiLCJpZ25vcmVQcmVmaXgiLCJ0cmFpbGluZ1NsYXNoIiwicmVtb3ZlVHJhaWxpbmdTbGFzaCIsImFkZFBhdGhTdWZmaXgiLCJhZGRQYXRoUHJlZml4IiwiYmFzZVBhdGgiLCJlbmRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getNextPathnameInfo\", ({\n    enumerable: true,\n    get: function() {\n        return getNextPathnameInfo;\n    }\n}));\nconst _normalizelocalepath = __webpack_require__(/*! ../../i18n/normalize-locale-path */ \"(rsc)/./node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\nconst _removepathprefix = __webpack_require__(/*! ./remove-path-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\");\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction getNextPathnameInfo(pathname, options) {\n    var _options_nextConfig;\n    const { basePath, i18n, trailingSlash } = (_options_nextConfig = options.nextConfig) != null ? _options_nextConfig : {};\n    const info = {\n        pathname: pathname,\n        trailingSlash: pathname !== \"/\" ? pathname.endsWith(\"/\") : trailingSlash\n    };\n    if (basePath && (0, _pathhasprefix.pathHasPrefix)(info.pathname, basePath)) {\n        info.pathname = (0, _removepathprefix.removePathPrefix)(info.pathname, basePath);\n        info.basePath = basePath;\n    }\n    if (options.parseData === true && info.pathname.startsWith(\"/_next/data/\") && info.pathname.endsWith(\".json\")) {\n        const paths = info.pathname.replace(/^\\/_next\\/data\\//, \"\").replace(/\\.json$/, \"\").split(\"/\");\n        const buildId = paths[0];\n        info.pathname = paths[1] !== \"index\" ? \"/\" + paths.slice(1).join(\"/\") : \"/\";\n        info.buildId = buildId;\n    }\n    // If provided, use the locale route normalizer to detect the locale instead\n    // of the function below.\n    if (options.i18nProvider) {\n        const result = options.i18nProvider.analyze(info.pathname);\n        info.locale = result.detectedLocale;\n        var _result_pathname;\n        info.pathname = (_result_pathname = result.pathname) != null ? _result_pathname : info.pathname;\n    } else if (i18n) {\n        const pathLocale = (0, _normalizelocalepath.normalizeLocalePath)(info.pathname, i18n.locales);\n        info.locale = pathLocale.detectedLocale;\n        var _pathLocale_pathname;\n        info.pathname = (_pathLocale_pathname = pathLocale.pathname) != null ? _pathLocale_pathname : info.pathname;\n    }\n    return info;\n} //# sourceMappingURL=get-next-pathname-info.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2dldC1uZXh0LXBhdGhuYW1lLWluZm8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILHVEQUFzRDtJQUNsREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHVCQUF1QkMsbUJBQU9BLENBQUMsaUhBQWtDO0FBQ3ZFLE1BQU1DLG9CQUFvQkQsbUJBQU9BLENBQUMsMEdBQXNCO0FBQ3hELE1BQU1FLGlCQUFpQkYsbUJBQU9BLENBQUMsb0dBQW1CO0FBQ2xELFNBQVNGLG9CQUFvQkssUUFBUSxFQUFFQyxPQUFPO0lBQzFDLElBQUlDO0lBQ0osTUFBTSxFQUFFQyxRQUFRLEVBQUdDLElBQUksRUFBR0MsYUFBYSxFQUFHLEdBQUcsQ0FBQ0gsc0JBQXNCRCxRQUFRSyxVQUFVLEtBQUssT0FBT0osc0JBQXNCLENBQUM7SUFDekgsTUFBTUssT0FBTztRQUNUUCxVQUFVQTtRQUNWSyxlQUFlTCxhQUFhLE1BQU1BLFNBQVNRLFFBQVEsQ0FBQyxPQUFPSDtJQUMvRDtJQUNBLElBQUlGLFlBQVksQ0FBQyxHQUFHSixlQUFlVSxhQUFhLEVBQUVGLEtBQUtQLFFBQVEsRUFBRUcsV0FBVztRQUN4RUksS0FBS1AsUUFBUSxHQUFHLENBQUMsR0FBR0Ysa0JBQWtCWSxnQkFBZ0IsRUFBRUgsS0FBS1AsUUFBUSxFQUFFRztRQUN2RUksS0FBS0osUUFBUSxHQUFHQTtJQUNwQjtJQUNBLElBQUlGLFFBQVFVLFNBQVMsS0FBSyxRQUFRSixLQUFLUCxRQUFRLENBQUNZLFVBQVUsQ0FBQyxtQkFBbUJMLEtBQUtQLFFBQVEsQ0FBQ1EsUUFBUSxDQUFDLFVBQVU7UUFDM0csTUFBTUssUUFBUU4sS0FBS1AsUUFBUSxDQUFDYyxPQUFPLENBQUMsb0JBQW9CLElBQUlBLE9BQU8sQ0FBQyxXQUFXLElBQUlDLEtBQUssQ0FBQztRQUN6RixNQUFNQyxVQUFVSCxLQUFLLENBQUMsRUFBRTtRQUN4Qk4sS0FBS1AsUUFBUSxHQUFHYSxLQUFLLENBQUMsRUFBRSxLQUFLLFVBQVUsTUFBTUEsTUFBTUksS0FBSyxDQUFDLEdBQUdDLElBQUksQ0FBQyxPQUFPO1FBQ3hFWCxLQUFLUyxPQUFPLEdBQUdBO0lBQ25CO0lBQ0EsNEVBQTRFO0lBQzVFLHlCQUF5QjtJQUN6QixJQUFJZixRQUFRa0IsWUFBWSxFQUFFO1FBQ3RCLE1BQU1DLFNBQVNuQixRQUFRa0IsWUFBWSxDQUFDRSxPQUFPLENBQUNkLEtBQUtQLFFBQVE7UUFDekRPLEtBQUtlLE1BQU0sR0FBR0YsT0FBT0csY0FBYztRQUNuQyxJQUFJQztRQUNKakIsS0FBS1AsUUFBUSxHQUFHLENBQUN3QixtQkFBbUJKLE9BQU9wQixRQUFRLEtBQUssT0FBT3dCLG1CQUFtQmpCLEtBQUtQLFFBQVE7SUFDbkcsT0FBTyxJQUFJSSxNQUFNO1FBQ2IsTUFBTXFCLGFBQWEsQ0FBQyxHQUFHN0IscUJBQXFCOEIsbUJBQW1CLEVBQUVuQixLQUFLUCxRQUFRLEVBQUVJLEtBQUt1QixPQUFPO1FBQzVGcEIsS0FBS2UsTUFBTSxHQUFHRyxXQUFXRixjQUFjO1FBQ3ZDLElBQUlLO1FBQ0pyQixLQUFLUCxRQUFRLEdBQUcsQ0FBQzRCLHVCQUF1QkgsV0FBV3pCLFFBQVEsS0FBSyxPQUFPNEIsdUJBQXVCckIsS0FBS1AsUUFBUTtJQUMvRztJQUNBLE9BQU9PO0FBQ1gsRUFFQSxrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2dldC1uZXh0LXBhdGhuYW1lLWluZm8uanM/MGQyNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldE5leHRQYXRobmFtZUluZm9cIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5leHRQYXRobmFtZUluZm87XG4gICAgfVxufSk7XG5jb25zdCBfbm9ybWFsaXplbG9jYWxlcGF0aCA9IHJlcXVpcmUoXCIuLi8uLi9pMThuL25vcm1hbGl6ZS1sb2NhbGUtcGF0aFwiKTtcbmNvbnN0IF9yZW1vdmVwYXRocHJlZml4ID0gcmVxdWlyZShcIi4vcmVtb3ZlLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX3BhdGhoYXNwcmVmaXggPSByZXF1aXJlKFwiLi9wYXRoLWhhcy1wcmVmaXhcIik7XG5mdW5jdGlvbiBnZXROZXh0UGF0aG5hbWVJbmZvKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zX25leHRDb25maWc7XG4gICAgY29uc3QgeyBiYXNlUGF0aCAsIGkxOG4gLCB0cmFpbGluZ1NsYXNoICB9ID0gKF9vcHRpb25zX25leHRDb25maWcgPSBvcHRpb25zLm5leHRDb25maWcpICE9IG51bGwgPyBfb3B0aW9uc19uZXh0Q29uZmlnIDoge307XG4gICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgICAgICB0cmFpbGluZ1NsYXNoOiBwYXRobmFtZSAhPT0gXCIvXCIgPyBwYXRobmFtZS5lbmRzV2l0aChcIi9cIikgOiB0cmFpbGluZ1NsYXNoXG4gICAgfTtcbiAgICBpZiAoYmFzZVBhdGggJiYgKDAsIF9wYXRoaGFzcHJlZml4LnBhdGhIYXNQcmVmaXgpKGluZm8ucGF0aG5hbWUsIGJhc2VQYXRoKSkge1xuICAgICAgICBpbmZvLnBhdGhuYW1lID0gKDAsIF9yZW1vdmVwYXRocHJlZml4LnJlbW92ZVBhdGhQcmVmaXgpKGluZm8ucGF0aG5hbWUsIGJhc2VQYXRoKTtcbiAgICAgICAgaW5mby5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5wYXJzZURhdGEgPT09IHRydWUgJiYgaW5mby5wYXRobmFtZS5zdGFydHNXaXRoKFwiL19uZXh0L2RhdGEvXCIpICYmIGluZm8ucGF0aG5hbWUuZW5kc1dpdGgoXCIuanNvblwiKSkge1xuICAgICAgICBjb25zdCBwYXRocyA9IGluZm8ucGF0aG5hbWUucmVwbGFjZSgvXlxcL19uZXh0XFwvZGF0YVxcLy8sIFwiXCIpLnJlcGxhY2UoL1xcLmpzb24kLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgICAgICBjb25zdCBidWlsZElkID0gcGF0aHNbMF07XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSBwYXRoc1sxXSAhPT0gXCJpbmRleFwiID8gXCIvXCIgKyBwYXRocy5zbGljZSgxKS5qb2luKFwiL1wiKSA6IFwiL1wiO1xuICAgICAgICBpbmZvLmJ1aWxkSWQgPSBidWlsZElkO1xuICAgIH1cbiAgICAvLyBJZiBwcm92aWRlZCwgdXNlIHRoZSBsb2NhbGUgcm91dGUgbm9ybWFsaXplciB0byBkZXRlY3QgdGhlIGxvY2FsZSBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIGZ1bmN0aW9uIGJlbG93LlxuICAgIGlmIChvcHRpb25zLmkxOG5Qcm92aWRlcikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb25zLmkxOG5Qcm92aWRlci5hbmFseXplKGluZm8ucGF0aG5hbWUpO1xuICAgICAgICBpbmZvLmxvY2FsZSA9IHJlc3VsdC5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgdmFyIF9yZXN1bHRfcGF0aG5hbWU7XG4gICAgICAgIGluZm8ucGF0aG5hbWUgPSAoX3Jlc3VsdF9wYXRobmFtZSA9IHJlc3VsdC5wYXRobmFtZSkgIT0gbnVsbCA/IF9yZXN1bHRfcGF0aG5hbWUgOiBpbmZvLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAoaTE4bikge1xuICAgICAgICBjb25zdCBwYXRoTG9jYWxlID0gKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKGluZm8ucGF0aG5hbWUsIGkxOG4ubG9jYWxlcyk7XG4gICAgICAgIGluZm8ubG9jYWxlID0gcGF0aExvY2FsZS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgdmFyIF9wYXRoTG9jYWxlX3BhdGhuYW1lO1xuICAgICAgICBpbmZvLnBhdGhuYW1lID0gKF9wYXRoTG9jYWxlX3BhdGhuYW1lID0gcGF0aExvY2FsZS5wYXRobmFtZSkgIT0gbnVsbCA/IF9wYXRoTG9jYWxlX3BhdGhuYW1lIDogaW5mby5wYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1uZXh0LXBhdGhuYW1lLWluZm8uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldE5leHRQYXRobmFtZUluZm8iLCJfbm9ybWFsaXplbG9jYWxlcGF0aCIsInJlcXVpcmUiLCJfcmVtb3ZlcGF0aHByZWZpeCIsIl9wYXRoaGFzcHJlZml4IiwicGF0aG5hbWUiLCJvcHRpb25zIiwiX29wdGlvbnNfbmV4dENvbmZpZyIsImJhc2VQYXRoIiwiaTE4biIsInRyYWlsaW5nU2xhc2giLCJuZXh0Q29uZmlnIiwiaW5mbyIsImVuZHNXaXRoIiwicGF0aEhhc1ByZWZpeCIsInJlbW92ZVBhdGhQcmVmaXgiLCJwYXJzZURhdGEiLCJzdGFydHNXaXRoIiwicGF0aHMiLCJyZXBsYWNlIiwic3BsaXQiLCJidWlsZElkIiwic2xpY2UiLCJqb2luIiwiaTE4blByb3ZpZGVyIiwicmVzdWx0IiwiYW5hbHl6ZSIsImxvY2FsZSIsImRldGVjdGVkTG9jYWxlIiwiX3Jlc3VsdF9wYXRobmFtZSIsInBhdGhMb2NhbGUiLCJub3JtYWxpemVMb2NhbGVQYXRoIiwibG9jYWxlcyIsIl9wYXRoTG9jYWxlX3BhdGhuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js":
/*!**********************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/parse-path.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Given a path this function will find the pathname, query and hash and return\n * them. This is useful to parse full paths on the client side.\n * @param path A path to parse e.g. /foo/bar?id=1#hash\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"parsePath\", ({\n    enumerable: true,\n    get: function() {\n        return parsePath;\n    }\n}));\nfunction parsePath(path) {\n    const hashIndex = path.indexOf(\"#\");\n    const queryIndex = path.indexOf(\"?\");\n    const hasQuery = queryIndex > -1 && (hashIndex < 0 || queryIndex < hashIndex);\n    if (hasQuery || hashIndex > -1) {\n        return {\n            pathname: path.substring(0, hasQuery ? queryIndex : hashIndex),\n            query: hasQuery ? path.substring(queryIndex, hashIndex > -1 ? hashIndex : undefined) : \"\",\n            hash: hashIndex > -1 ? path.slice(hashIndex) : \"\"\n        };\n    }\n    return {\n        pathname: path,\n        query: \"\",\n        hash: \"\"\n    };\n} //# sourceMappingURL=parse-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhcnNlLXBhdGguanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQyxHQUFnQjtBQUNqQkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLFNBQVNBLFVBQVVDLElBQUk7SUFDbkIsTUFBTUMsWUFBWUQsS0FBS0UsT0FBTyxDQUFDO0lBQy9CLE1BQU1DLGFBQWFILEtBQUtFLE9BQU8sQ0FBQztJQUNoQyxNQUFNRSxXQUFXRCxhQUFhLENBQUMsS0FBTUYsQ0FBQUEsWUFBWSxLQUFLRSxhQUFhRixTQUFRO0lBQzNFLElBQUlHLFlBQVlILFlBQVksQ0FBQyxHQUFHO1FBQzVCLE9BQU87WUFDSEksVUFBVUwsS0FBS00sU0FBUyxDQUFDLEdBQUdGLFdBQVdELGFBQWFGO1lBQ3BETSxPQUFPSCxXQUFXSixLQUFLTSxTQUFTLENBQUNILFlBQVlGLFlBQVksQ0FBQyxJQUFJQSxZQUFZTyxhQUFhO1lBQ3ZGQyxNQUFNUixZQUFZLENBQUMsSUFBSUQsS0FBS1UsS0FBSyxDQUFDVCxhQUFhO1FBQ25EO0lBQ0o7SUFDQSxPQUFPO1FBQ0hJLFVBQVVMO1FBQ1ZPLE9BQU87UUFDUEUsTUFBTTtJQUNWO0FBQ0osRUFFQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhcnNlLXBhdGguanM/ZTUyYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEdpdmVuIGEgcGF0aCB0aGlzIGZ1bmN0aW9uIHdpbGwgZmluZCB0aGUgcGF0aG5hbWUsIHF1ZXJ5IGFuZCBoYXNoIGFuZCByZXR1cm5cbiAqIHRoZW0uIFRoaXMgaXMgdXNlZnVsIHRvIHBhcnNlIGZ1bGwgcGF0aHMgb24gdGhlIGNsaWVudCBzaWRlLlxuICogQHBhcmFtIHBhdGggQSBwYXRoIHRvIHBhcnNlIGUuZy4gL2Zvby9iYXI/aWQ9MSNoYXNoXG4gKi8gXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXJzZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlUGF0aDtcbiAgICB9XG59KTtcbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gICAgY29uc3QgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBjb25zdCBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBjb25zdCBoYXNRdWVyeSA9IHF1ZXJ5SW5kZXggPiAtMSAmJiAoaGFzaEluZGV4IDwgMCB8fCBxdWVyeUluZGV4IDwgaGFzaEluZGV4KTtcbiAgICBpZiAoaGFzUXVlcnkgfHwgaGFzaEluZGV4ID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRoLnN1YnN0cmluZygwLCBoYXNRdWVyeSA/IHF1ZXJ5SW5kZXggOiBoYXNoSW5kZXgpLFxuICAgICAgICAgICAgcXVlcnk6IGhhc1F1ZXJ5ID8gcGF0aC5zdWJzdHJpbmcocXVlcnlJbmRleCwgaGFzaEluZGV4ID4gLTEgPyBoYXNoSW5kZXggOiB1bmRlZmluZWQpIDogXCJcIixcbiAgICAgICAgICAgIGhhc2g6IGhhc2hJbmRleCA+IC0xID8gcGF0aC5zbGljZShoYXNoSW5kZXgpIDogXCJcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aCxcbiAgICAgICAgcXVlcnk6IFwiXCIsXG4gICAgICAgIGhhc2g6IFwiXCJcbiAgICB9O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1wYXRoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJwYXJzZVBhdGgiLCJwYXRoIiwiaGFzaEluZGV4IiwiaW5kZXhPZiIsInF1ZXJ5SW5kZXgiLCJoYXNRdWVyeSIsInBhdGhuYW1lIiwic3Vic3RyaW5nIiwicXVlcnkiLCJ1bmRlZmluZWQiLCJoYXNoIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"pathHasPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return pathHasPrefix;\n    }\n}));\nconst _parsepath = __webpack_require__(/*! ./parse-path */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\nfunction pathHasPrefix(path, prefix) {\n    if (typeof path !== \"string\") {\n        return false;\n    }\n    const { pathname } = (0, _parsepath.parsePath)(path);\n    return pathname === prefix || pathname.startsWith(prefix + \"/\");\n} //# sourceMappingURL=path-has-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3BhdGgtaGFzLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsaURBQWdEO0lBQzVDSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsMEZBQWM7QUFDekMsU0FBU0YsY0FBY0csSUFBSSxFQUFFQyxNQUFNO0lBQy9CLElBQUksT0FBT0QsU0FBUyxVQUFVO1FBQzFCLE9BQU87SUFDWDtJQUNBLE1BQU0sRUFBRUUsUUFBUSxFQUFHLEdBQUcsQ0FBQyxHQUFHSixXQUFXSyxTQUFTLEVBQUVIO0lBQ2hELE9BQU9FLGFBQWFELFVBQVVDLFNBQVNFLFVBQVUsQ0FBQ0gsU0FBUztBQUMvRCxFQUVBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcGF0aC1oYXMtcHJlZml4LmpzP2I1MzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYXRoSGFzUHJlZml4XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBwYXRoSGFzUHJlZml4O1xuICAgIH1cbn0pO1xuY29uc3QgX3BhcnNlcGF0aCA9IHJlcXVpcmUoXCIuL3BhcnNlLXBhdGhcIik7XG5mdW5jdGlvbiBwYXRoSGFzUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgcGF0aG5hbWUgIH0gPSAoMCwgX3BhcnNlcGF0aC5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIHJldHVybiBwYXRobmFtZSA9PT0gcHJlZml4IHx8IHBhdGhuYW1lLnN0YXJ0c1dpdGgocHJlZml4ICsgXCIvXCIpO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXRoLWhhcy1wcmVmaXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInBhdGhIYXNQcmVmaXgiLCJfcGFyc2VwYXRoIiwicmVxdWlyZSIsInBhdGgiLCJwcmVmaXgiLCJwYXRobmFtZSIsInBhcnNlUGF0aCIsInN0YXJ0c1dpdGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removePathPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return removePathPrefix;\n    }\n}));\nconst _pathhasprefix = __webpack_require__(/*! ./path-has-prefix */ \"(rsc)/./node_modules/next/dist/shared/lib/router/utils/path-has-prefix.js\");\nfunction removePathPrefix(path, prefix) {\n    // If the path doesn't start with the prefix we can return it as is. This\n    // protects us from situations where the prefix is a substring of the path\n    // prefix such as:\n    //\n    // For prefix: /blog\n    //\n    //   /blog -> true\n    //   /blog/ -> true\n    //   /blog/1 -> true\n    //   /blogging -> false\n    //   /blogging/ -> false\n    //   /blogging/1 -> false\n    if (!(0, _pathhasprefix.pathHasPrefix)(path, prefix)) {\n        return path;\n    }\n    // Remove the prefix from the path via slicing.\n    const withoutPrefix = path.slice(prefix.length);\n    // If the path without the prefix starts with a `/` we can return it as is.\n    if (withoutPrefix.startsWith(\"/\")) {\n        return withoutPrefix;\n    }\n    // If the path without the prefix doesn't start with a `/` we need to add it\n    // back to the path to make sure it's a valid path.\n    return \"/\" + withoutPrefix;\n} //# sourceMappingURL=remove-path-prefix.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS1wYXRoLXByZWZpeC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsb0RBQW1EO0lBQy9DSSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsaUJBQWlCQyxtQkFBT0EsQ0FBQyxvR0FBbUI7QUFDbEQsU0FBU0YsaUJBQWlCRyxJQUFJLEVBQUVDLE1BQU07SUFDbEMseUVBQXlFO0lBQ3pFLDBFQUEwRTtJQUMxRSxrQkFBa0I7SUFDbEIsRUFBRTtJQUNGLG9CQUFvQjtJQUNwQixFQUFFO0lBQ0Ysa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixvQkFBb0I7SUFDcEIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4Qix5QkFBeUI7SUFDekIsSUFBSSxDQUFDLENBQUMsR0FBR0gsZUFBZUksYUFBYSxFQUFFRixNQUFNQyxTQUFTO1FBQ2xELE9BQU9EO0lBQ1g7SUFDQSwrQ0FBK0M7SUFDL0MsTUFBTUcsZ0JBQWdCSCxLQUFLSSxLQUFLLENBQUNILE9BQU9JLE1BQU07SUFDOUMsMkVBQTJFO0lBQzNFLElBQUlGLGNBQWNHLFVBQVUsQ0FBQyxNQUFNO1FBQy9CLE9BQU9IO0lBQ1g7SUFDQSw0RUFBNEU7SUFDNUUsbURBQW1EO0lBQ25ELE9BQU8sTUFBTUE7QUFDakIsRUFFQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS1wYXRoLXByZWZpeC5qcz82MTQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlUGF0aFByZWZpeFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlUGF0aFByZWZpeDtcbiAgICB9XG59KTtcbmNvbnN0IF9wYXRoaGFzcHJlZml4ID0gcmVxdWlyZShcIi4vcGF0aC1oYXMtcHJlZml4XCIpO1xuZnVuY3Rpb24gcmVtb3ZlUGF0aFByZWZpeChwYXRoLCBwcmVmaXgpIHtcbiAgICAvLyBJZiB0aGUgcGF0aCBkb2Vzbid0IHN0YXJ0IHdpdGggdGhlIHByZWZpeCB3ZSBjYW4gcmV0dXJuIGl0IGFzIGlzLiBUaGlzXG4gICAgLy8gcHJvdGVjdHMgdXMgZnJvbSBzaXR1YXRpb25zIHdoZXJlIHRoZSBwcmVmaXggaXMgYSBzdWJzdHJpbmcgb2YgdGhlIHBhdGhcbiAgICAvLyBwcmVmaXggc3VjaCBhczpcbiAgICAvL1xuICAgIC8vIEZvciBwcmVmaXg6IC9ibG9nXG4gICAgLy9cbiAgICAvLyAgIC9ibG9nIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nLyAtPiB0cnVlXG4gICAgLy8gICAvYmxvZy8xIC0+IHRydWVcbiAgICAvLyAgIC9ibG9nZ2luZyAtPiBmYWxzZVxuICAgIC8vICAgL2Jsb2dnaW5nLyAtPiBmYWxzZVxuICAgIC8vICAgL2Jsb2dnaW5nLzEgLT4gZmFsc2VcbiAgICBpZiAoISgwLCBfcGF0aGhhc3ByZWZpeC5wYXRoSGFzUHJlZml4KShwYXRoLCBwcmVmaXgpKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgdGhlIHByZWZpeCBmcm9tIHRoZSBwYXRoIHZpYSBzbGljaW5nLlxuICAgIGNvbnN0IHdpdGhvdXRQcmVmaXggPSBwYXRoLnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgIC8vIElmIHRoZSBwYXRoIHdpdGhvdXQgdGhlIHByZWZpeCBzdGFydHMgd2l0aCBhIGAvYCB3ZSBjYW4gcmV0dXJuIGl0IGFzIGlzLlxuICAgIGlmICh3aXRob3V0UHJlZml4LnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0UHJlZml4O1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcGF0aCB3aXRob3V0IHRoZSBwcmVmaXggZG9lc24ndCBzdGFydCB3aXRoIGEgYC9gIHdlIG5lZWQgdG8gYWRkIGl0XG4gICAgLy8gYmFjayB0byB0aGUgcGF0aCB0byBtYWtlIHN1cmUgaXQncyBhIHZhbGlkIHBhdGguXG4gICAgcmV0dXJuIFwiL1wiICsgd2l0aG91dFByZWZpeDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLXBhdGgtcHJlZml4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZW1vdmVQYXRoUHJlZml4IiwiX3BhdGhoYXNwcmVmaXgiLCJyZXF1aXJlIiwicGF0aCIsInByZWZpeCIsInBhdGhIYXNQcmVmaXgiLCJ3aXRob3V0UHJlZml4Iiwic2xpY2UiLCJsZW5ndGgiLCJzdGFydHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-path-prefix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Removes the trailing slash for a given route or page path. Preserves the\n * root page. Examples:\n *   - `/foo/bar/` -> `/foo/bar`\n *   - `/foo/bar` -> `/foo/bar`\n *   - `/` -> `/`\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"removeTrailingSlash\", ({\n    enumerable: true,\n    get: function() {\n        return removeTrailingSlash;\n    }\n}));\nfunction removeTrailingSlash(route) {\n    return route.replace(/\\/$/, \"\") || \"/\";\n} //# sourceMappingURL=remove-trailing-slash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL3JlbW92ZS10cmFpbGluZy1zbGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0NBTUMsR0FBZ0I7QUFDakJBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCx1REFBc0Q7SUFDbERJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixTQUFTQSxvQkFBb0JDLEtBQUs7SUFDOUIsT0FBT0EsTUFBTUMsT0FBTyxDQUFDLE9BQU8sT0FBTztBQUN2QyxFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVtb3ZlLXRyYWlsaW5nLXNsYXNoLmpzP2VjMDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZW1vdmVzIHRoZSB0cmFpbGluZyBzbGFzaCBmb3IgYSBnaXZlbiByb3V0ZSBvciBwYWdlIHBhdGguIFByZXNlcnZlcyB0aGVcbiAqIHJvb3QgcGFnZS4gRXhhbXBsZXM6XG4gKiAgIC0gYC9mb28vYmFyL2AgLT4gYC9mb28vYmFyYFxuICogICAtIGAvZm9vL2JhcmAgLT4gYC9mb28vYmFyYFxuICogICAtIGAvYCAtPiBgL2BcbiAqLyBcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVRyYWlsaW5nU2xhc2hcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZVRyYWlsaW5nU2xhc2g7XG4gICAgfVxufSk7XG5mdW5jdGlvbiByZW1vdmVUcmFpbGluZ1NsYXNoKHJvdXRlKSB7XG4gICAgcmV0dXJuIHJvdXRlLnJlcGxhY2UoL1xcLyQvLCBcIlwiKSB8fCBcIi9cIjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVtb3ZlLXRyYWlsaW5nLXNsYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJyZW1vdmVUcmFpbGluZ1NsYXNoIiwicm91dGUiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/addressparser/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/addressparser/index.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n/**\n * Converts tokens for a single address into an address object\n *\n * @param {Array} tokens Tokens object\n * @return {Object} Address object\n */ function _handleAddress(tokens) {\n    let token;\n    let isGroup = false;\n    let state = \"text\";\n    let address;\n    let addresses = [];\n    let data = {\n        address: [],\n        comment: [],\n        group: [],\n        text: []\n    };\n    let i;\n    let len;\n    // Filter out <addresses>, (comments) and regular text\n    for(i = 0, len = tokens.length; i < len; i++){\n        token = tokens[i];\n        if (token.type === \"operator\") {\n            switch(token.value){\n                case \"<\":\n                    state = \"address\";\n                    break;\n                case \"(\":\n                    state = \"comment\";\n                    break;\n                case \":\":\n                    state = \"group\";\n                    isGroup = true;\n                    break;\n                default:\n                    state = \"text\";\n            }\n        } else if (token.value) {\n            if (state === \"address\") {\n                // handle use case where unquoted name includes a \"<\"\n                // Apple Mail truncates everything between an unexpected < and an address\n                // and so will we\n                token.value = token.value.replace(/^[^<]*<\\s*/, \"\");\n            }\n            data[state].push(token.value);\n        }\n    }\n    // If there is no text but a comment, replace the two\n    if (!data.text.length && data.comment.length) {\n        data.text = data.comment;\n        data.comment = [];\n    }\n    if (isGroup) {\n        // http://tools.ietf.org/html/rfc2822#appendix-A.1.3\n        data.text = data.text.join(\" \");\n        addresses.push({\n            name: data.text || address && address.name,\n            group: data.group.length ? addressparser(data.group.join(\",\")) : []\n        });\n    } else {\n        // If no address was found, try to detect one from regular text\n        if (!data.address.length && data.text.length) {\n            for(i = data.text.length - 1; i >= 0; i--){\n                if (data.text[i].match(/^[^@\\s]+@[^@\\s]+$/)) {\n                    data.address = data.text.splice(i, 1);\n                    break;\n                }\n            }\n            let _regexHandler = function(address) {\n                if (!data.address.length) {\n                    data.address = [\n                        address.trim()\n                    ];\n                    return \" \";\n                } else {\n                    return address;\n                }\n            };\n            // still no address\n            if (!data.address.length) {\n                for(i = data.text.length - 1; i >= 0; i--){\n                    // fixed the regex to parse email address correctly when email address has more than one @\n                    data.text[i] = data.text[i].replace(/\\s*\\b[^@\\s]+@[^\\s]+\\b\\s*/, _regexHandler).trim();\n                    if (data.address.length) {\n                        break;\n                    }\n                }\n            }\n        }\n        // If there's still is no text but a comment exixts, replace the two\n        if (!data.text.length && data.comment.length) {\n            data.text = data.comment;\n            data.comment = [];\n        }\n        // Keep only the first address occurence, push others to regular text\n        if (data.address.length > 1) {\n            data.text = data.text.concat(data.address.splice(1));\n        }\n        // Join values with spaces\n        data.text = data.text.join(\" \");\n        data.address = data.address.join(\" \");\n        if (!data.address && isGroup) {\n            return [];\n        } else {\n            address = {\n                address: data.address || data.text || \"\",\n                name: data.text || data.address || \"\"\n            };\n            if (address.address === address.name) {\n                if ((address.address || \"\").match(/@/)) {\n                    address.name = \"\";\n                } else {\n                    address.address = \"\";\n                }\n            }\n            addresses.push(address);\n        }\n    }\n    return addresses;\n}\n/**\n * Creates a Tokenizer object for tokenizing address field strings\n *\n * @constructor\n * @param {String} str Address field string\n */ class Tokenizer {\n    constructor(str){\n        this.str = (str || \"\").toString();\n        this.operatorCurrent = \"\";\n        this.operatorExpecting = \"\";\n        this.node = null;\n        this.escaped = false;\n        this.list = [];\n        /**\n         * Operator tokens and which tokens are expected to end the sequence\n         */ this.operators = {\n            '\"': '\"',\n            \"(\": \")\",\n            \"<\": \">\",\n            \",\": \"\",\n            \":\": \";\",\n            // Semicolons are not a legal delimiter per the RFC2822 grammar other\n            // than for terminating a group, but they are also not valid for any\n            // other use in this context.  Given that some mail clients have\n            // historically allowed the semicolon as a delimiter equivalent to the\n            // comma in their UI, it makes sense to treat them the same as a comma\n            // when used outside of a group.\n            \";\": \"\"\n        };\n    }\n    /**\n     * Tokenizes the original input string\n     *\n     * @return {Array} An array of operator|text tokens\n     */ tokenize() {\n        let chr, list = [];\n        for(let i = 0, len = this.str.length; i < len; i++){\n            chr = this.str.charAt(i);\n            this.checkChar(chr);\n        }\n        this.list.forEach((node)=>{\n            node.value = (node.value || \"\").toString().trim();\n            if (node.value) {\n                list.push(node);\n            }\n        });\n        return list;\n    }\n    /**\n     * Checks if a character is an operator or text and acts accordingly\n     *\n     * @param {String} chr Character from the address field\n     */ checkChar(chr) {\n        if (this.escaped) {\n        // ignore next condition blocks\n        } else if (chr === this.operatorExpecting) {\n            this.node = {\n                type: \"operator\",\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = \"\";\n            this.escaped = false;\n            return;\n        } else if (!this.operatorExpecting && chr in this.operators) {\n            this.node = {\n                type: \"operator\",\n                value: chr\n            };\n            this.list.push(this.node);\n            this.node = null;\n            this.operatorExpecting = this.operators[chr];\n            this.escaped = false;\n            return;\n        } else if ([\n            '\"',\n            \"'\"\n        ].includes(this.operatorExpecting) && chr === \"\\\\\") {\n            this.escaped = true;\n            return;\n        }\n        if (!this.node) {\n            this.node = {\n                type: \"text\",\n                value: \"\"\n            };\n            this.list.push(this.node);\n        }\n        if (chr === \"\\n\") {\n            // Convert newlines to spaces. Carriage return is ignored as \\r and \\n usually\n            // go together anyway and there already is a WS for \\n. Lone \\r means something is fishy.\n            chr = \" \";\n        }\n        if (chr.charCodeAt(0) >= 0x21 || [\n            \" \",\n            \"\t\"\n        ].includes(chr)) {\n            // skip command bytes\n            this.node.value += chr;\n        }\n        this.escaped = false;\n    }\n}\n/**\n * Parses structured e-mail addresses from an address field\n *\n * Example:\n *\n *    'Name <address@domain>'\n *\n * will be converted to\n *\n *     [{name: 'Name', address: 'address@domain'}]\n *\n * @param {String} str Address field\n * @return {Array} An array of address objects\n */ function addressparser(str, options) {\n    options = options || {};\n    let tokenizer = new Tokenizer(str);\n    let tokens = tokenizer.tokenize();\n    let addresses = [];\n    let address = [];\n    let parsedAddresses = [];\n    tokens.forEach((token)=>{\n        if (token.type === \"operator\" && (token.value === \",\" || token.value === \";\")) {\n            if (address.length) {\n                addresses.push(address);\n            }\n            address = [];\n        } else {\n            address.push(token);\n        }\n    });\n    if (address.length) {\n        addresses.push(address);\n    }\n    addresses.forEach((address)=>{\n        address = _handleAddress(address);\n        if (address.length) {\n            parsedAddresses = parsedAddresses.concat(address);\n        }\n    });\n    if (options.flatten) {\n        let addresses = [];\n        let walkAddressList = (list)=>{\n            list.forEach((address)=>{\n                if (address.group) {\n                    return walkAddressList(address.group);\n                } else {\n                    addresses.push(address);\n                }\n            });\n        };\n        walkAddressList(parsedAddresses);\n        return addresses;\n    }\n    return parsedAddresses;\n}\n// expose to the world\nmodule.exports = addressparser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/base64/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/base64/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * Encodes a Buffer into a base64 encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} base64 encoded string\n */ function encode(buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer, \"utf-8\");\n    }\n    return buffer.toString(\"base64\");\n}\n/**\n * Adds soft line breaks to a base64 string\n *\n * @param {String} str base64 encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped base64 encoded string\n */ function wrap(str, lineLength) {\n    str = (str || \"\").toString();\n    lineLength = lineLength || 76;\n    if (str.length <= lineLength) {\n        return str;\n    }\n    let result = [];\n    let pos = 0;\n    let chunkLength = lineLength * 1024;\n    while(pos < str.length){\n        let wrappedLines = str.substr(pos, chunkLength).replace(new RegExp(\".{\" + lineLength + \"}\", \"g\"), \"$&\\r\\n\").trim();\n        result.push(wrappedLines);\n        pos += chunkLength;\n    }\n    return result.join(\"\\r\\n\").trim();\n}\n/**\n * Creates a transform stream for encoding data to base64 encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */ class Encoder extends Transform {\n    constructor(options){\n        super();\n        // init Transform\n        this.options = options || {};\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n        this._curLine = \"\";\n        this._remainingBytes = false;\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n    _transform(chunk, encoding, done) {\n        if (encoding !== \"buffer\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (!chunk || !chunk.length) {\n            return setImmediate(done);\n        }\n        this.inputBytes += chunk.length;\n        if (this._remainingBytes && this._remainingBytes.length) {\n            chunk = Buffer.concat([\n                this._remainingBytes,\n                chunk\n            ], this._remainingBytes.length + chunk.length);\n            this._remainingBytes = false;\n        }\n        if (chunk.length % 3) {\n            this._remainingBytes = chunk.slice(chunk.length - chunk.length % 3);\n            chunk = chunk.slice(0, chunk.length - chunk.length % 3);\n        } else {\n            this._remainingBytes = false;\n        }\n        let b64 = this._curLine + encode(chunk);\n        if (this.options.lineLength) {\n            b64 = wrap(b64, this.options.lineLength);\n            // remove last line as it is still most probably incomplete\n            let lastLF = b64.lastIndexOf(\"\\n\");\n            if (lastLF < 0) {\n                this._curLine = b64;\n                b64 = \"\";\n            } else if (lastLF === b64.length - 1) {\n                this._curLine = \"\";\n            } else {\n                this._curLine = b64.substr(lastLF + 1);\n                b64 = b64.substr(0, lastLF + 1);\n            }\n        }\n        if (b64) {\n            this.outputBytes += b64.length;\n            this.push(Buffer.from(b64, \"ascii\"));\n        }\n        setImmediate(done);\n    }\n    _flush(done) {\n        if (this._remainingBytes && this._remainingBytes.length) {\n            this._curLine += encode(this._remainingBytes);\n        }\n        if (this._curLine) {\n            this._curLine = wrap(this._curLine, this.options.lineLength);\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, \"ascii\");\n            this._curLine = \"\";\n        }\n        done();\n    }\n}\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/base64/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/index.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// FIXME:\n// replace this Transform mess with a method that pipes input argument to output argument\nconst MessageParser = __webpack_require__(/*! ./message-parser */ \"(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\");\nconst RelaxedBody = __webpack_require__(/*! ./relaxed-body */ \"(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\");\nconst sign = __webpack_require__(/*! ./sign */ \"(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst DKIM_ALGO = \"sha256\";\nconst MAX_MESSAGE_SIZE = 128 * 1024; // buffer messages larger than this to disk\n/*\n// Usage:\n\nlet dkim = new DKIM({\n    domainName: 'example.com',\n    keySelector: 'key-selector',\n    privateKey,\n    cacheDir: '/tmp'\n});\ndkim.sign(input).pipe(process.stdout);\n\n// Where inputStream is a rfc822 message (either a stream, string or Buffer)\n// and outputStream is a DKIM signed rfc822 message\n*/ class DKIMSigner {\n    constructor(options, keys, input, output){\n        this.options = options || {};\n        this.keys = keys;\n        this.cacheTreshold = Number(this.options.cacheTreshold) || MAX_MESSAGE_SIZE;\n        this.hashAlgo = this.options.hashAlgo || DKIM_ALGO;\n        this.cacheDir = this.options.cacheDir || false;\n        this.chunks = [];\n        this.chunklen = 0;\n        this.readPos = 0;\n        this.cachePath = this.cacheDir ? path.join(this.cacheDir, \"message.\" + Date.now() + \"-\" + crypto.randomBytes(14).toString(\"hex\")) : false;\n        this.cache = false;\n        this.headers = false;\n        this.bodyHash = false;\n        this.parser = false;\n        this.relaxedBody = false;\n        this.input = input;\n        this.output = output;\n        this.output.usingCache = false;\n        this.hasErrored = false;\n        this.input.on(\"error\", (err)=>{\n            this.hasErrored = true;\n            this.cleanup();\n            output.emit(\"error\", err);\n        });\n    }\n    cleanup() {\n        if (!this.cache || !this.cachePath) {\n            return;\n        }\n        fs.unlink(this.cachePath, ()=>false);\n    }\n    createReadCache() {\n        // pipe remainings to cache file\n        this.cache = fs.createReadStream(this.cachePath);\n        this.cache.once(\"error\", (err)=>{\n            this.cleanup();\n            this.output.emit(\"error\", err);\n        });\n        this.cache.once(\"close\", ()=>{\n            this.cleanup();\n        });\n        this.cache.pipe(this.output);\n    }\n    sendNextChunk() {\n        if (this.hasErrored) {\n            return;\n        }\n        if (this.readPos >= this.chunks.length) {\n            if (!this.cache) {\n                return this.output.end();\n            }\n            return this.createReadCache();\n        }\n        let chunk = this.chunks[this.readPos++];\n        if (this.output.write(chunk) === false) {\n            return this.output.once(\"drain\", ()=>{\n                this.sendNextChunk();\n            });\n        }\n        setImmediate(()=>this.sendNextChunk());\n    }\n    sendSignedOutput() {\n        let keyPos = 0;\n        let signNextKey = ()=>{\n            if (keyPos >= this.keys.length) {\n                this.output.write(this.parser.rawHeaders);\n                return setImmediate(()=>this.sendNextChunk());\n            }\n            let key = this.keys[keyPos++];\n            let dkimField = sign(this.headers, this.hashAlgo, this.bodyHash, {\n                domainName: key.domainName,\n                keySelector: key.keySelector,\n                privateKey: key.privateKey,\n                headerFieldNames: this.options.headerFieldNames,\n                skipFields: this.options.skipFields\n            });\n            if (dkimField) {\n                this.output.write(Buffer.from(dkimField + \"\\r\\n\"));\n            }\n            return setImmediate(signNextKey);\n        };\n        if (this.bodyHash && this.headers) {\n            return signNextKey();\n        }\n        this.output.write(this.parser.rawHeaders);\n        this.sendNextChunk();\n    }\n    createWriteCache() {\n        this.output.usingCache = true;\n        // pipe remainings to cache file\n        this.cache = fs.createWriteStream(this.cachePath);\n        this.cache.once(\"error\", (err)=>{\n            this.cleanup();\n            // drain input\n            this.relaxedBody.unpipe(this.cache);\n            this.relaxedBody.on(\"readable\", ()=>{\n                while(this.relaxedBody.read() !== null){\n                // do nothing\n                }\n            });\n            this.hasErrored = true;\n            // emit error\n            this.output.emit(\"error\", err);\n        });\n        this.cache.once(\"close\", ()=>{\n            this.sendSignedOutput();\n        });\n        this.relaxedBody.removeAllListeners(\"readable\");\n        this.relaxedBody.pipe(this.cache);\n    }\n    signStream() {\n        this.parser = new MessageParser();\n        this.relaxedBody = new RelaxedBody({\n            hashAlgo: this.hashAlgo\n        });\n        this.parser.on(\"headers\", (value)=>{\n            this.headers = value;\n        });\n        this.relaxedBody.on(\"hash\", (value)=>{\n            this.bodyHash = value;\n        });\n        this.relaxedBody.on(\"readable\", ()=>{\n            let chunk;\n            if (this.cache) {\n                return;\n            }\n            while((chunk = this.relaxedBody.read()) !== null){\n                this.chunks.push(chunk);\n                this.chunklen += chunk.length;\n                if (this.chunklen >= this.cacheTreshold && this.cachePath) {\n                    return this.createWriteCache();\n                }\n            }\n        });\n        this.relaxedBody.on(\"end\", ()=>{\n            if (this.cache) {\n                return;\n            }\n            this.sendSignedOutput();\n        });\n        this.parser.pipe(this.relaxedBody);\n        setImmediate(()=>this.input.pipe(this.parser));\n    }\n}\nclass DKIM {\n    constructor(options){\n        this.options = options || {};\n        this.keys = [].concat(this.options.keys || {\n            domainName: options.domainName,\n            keySelector: options.keySelector,\n            privateKey: options.privateKey\n        });\n    }\n    sign(input, extraOptions) {\n        let output = new PassThrough();\n        let inputStream = input;\n        let writeValue = false;\n        if (Buffer.isBuffer(input)) {\n            writeValue = input;\n            inputStream = new PassThrough();\n        } else if (typeof input === \"string\") {\n            writeValue = Buffer.from(input);\n            inputStream = new PassThrough();\n        }\n        let options = this.options;\n        if (extraOptions && Object.keys(extraOptions).length) {\n            options = {};\n            Object.keys(this.options || {}).forEach((key)=>{\n                options[key] = this.options[key];\n            });\n            Object.keys(extraOptions || {}).forEach((key)=>{\n                if (!(key in options)) {\n                    options[key] = extraOptions[key];\n                }\n            });\n        }\n        let signer = new DKIMSigner(options, this.keys, inputStream, output);\n        setImmediate(()=>{\n            signer.signStream();\n            if (writeValue) {\n                setImmediate(()=>{\n                    inputStream.end(writeValue);\n                });\n            }\n        });\n        return output;\n    }\n}\nmodule.exports = DKIM;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/message-parser.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * MessageParser instance is a transform stream that separates message headers\n * from the rest of the body. Headers are emitted with the 'headers' event. Message\n * body is passed on as the resulting stream.\n */ class MessageParser extends Transform {\n    constructor(options){\n        super(options);\n        this.lastBytes = Buffer.alloc(4);\n        this.headersParsed = false;\n        this.headerBytes = 0;\n        this.headerChunks = [];\n        this.rawHeaders = false;\n        this.bodySize = 0;\n    }\n    /**\n     * Keeps count of the last 4 bytes in order to detect line breaks on chunk boundaries\n     *\n     * @param {Buffer} data Next data chunk from the stream\n     */ updateLastBytes(data) {\n        let lblen = this.lastBytes.length;\n        let nblen = Math.min(data.length, lblen);\n        // shift existing bytes\n        for(let i = 0, len = lblen - nblen; i < len; i++){\n            this.lastBytes[i] = this.lastBytes[i + nblen];\n        }\n        // add new bytes\n        for(let i = 1; i <= nblen; i++){\n            this.lastBytes[lblen - i] = data[data.length - i];\n        }\n    }\n    /**\n     * Finds and removes message headers from the remaining body. We want to keep\n     * headers separated until final delivery to be able to modify these\n     *\n     * @param {Buffer} data Next chunk of data\n     * @return {Boolean} Returns true if headers are already found or false otherwise\n     */ checkHeaders(data) {\n        if (this.headersParsed) {\n            return true;\n        }\n        let lblen = this.lastBytes.length;\n        let headerPos = 0;\n        this.curLinePos = 0;\n        for(let i = 0, len = this.lastBytes.length + data.length; i < len; i++){\n            let chr;\n            if (i < lblen) {\n                chr = this.lastBytes[i];\n            } else {\n                chr = data[i - lblen];\n            }\n            if (chr === 0x0a && i) {\n                let pr1 = i - 1 < lblen ? this.lastBytes[i - 1] : data[i - 1 - lblen];\n                let pr2 = i > 1 ? i - 2 < lblen ? this.lastBytes[i - 2] : data[i - 2 - lblen] : false;\n                if (pr1 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                } else if (pr1 === 0x0d && pr2 === 0x0a) {\n                    this.headersParsed = true;\n                    headerPos = i - lblen + 1;\n                    this.headerBytes += headerPos;\n                    break;\n                }\n            }\n        }\n        if (this.headersParsed) {\n            this.headerChunks.push(data.slice(0, headerPos));\n            this.rawHeaders = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.headerChunks = null;\n            this.emit(\"headers\", this.parseHeaders());\n            if (data.length - 1 > headerPos) {\n                let chunk = data.slice(headerPos);\n                this.bodySize += chunk.length;\n                // this would be the first chunk of data sent downstream\n                setImmediate(()=>this.push(chunk));\n            }\n            return false;\n        } else {\n            this.headerBytes += data.length;\n            this.headerChunks.push(data);\n        }\n        // store last 4 bytes to catch header break\n        this.updateLastBytes(data);\n        return false;\n    }\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        let headersFound;\n        try {\n            headersFound = this.checkHeaders(chunk);\n        } catch (E) {\n            return callback(E);\n        }\n        if (headersFound) {\n            this.bodySize += chunk.length;\n            this.push(chunk);\n        }\n        setImmediate(callback);\n    }\n    _flush(callback) {\n        if (this.headerChunks) {\n            let chunk = Buffer.concat(this.headerChunks, this.headerBytes);\n            this.bodySize += chunk.length;\n            this.push(chunk);\n            this.headerChunks = null;\n        }\n        callback();\n    }\n    parseHeaders() {\n        let lines = (this.rawHeaders || \"\").toString().split(/\\r?\\n/);\n        for(let i = lines.length - 1; i > 0; i--){\n            if (/^\\s/.test(lines[i])) {\n                lines[i - 1] += \"\\n\" + lines[i];\n                lines.splice(i, 1);\n            }\n        }\n        return lines.filter((line)=>line.trim()).map((line)=>({\n                key: line.substr(0, line.indexOf(\":\")).trim().toLowerCase(),\n                line\n            }));\n    }\n}\nmodule.exports = MessageParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/message-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/relaxed-body.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// streams through a message body and calculates relaxed body hash\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nclass RelaxedBody extends Transform {\n    constructor(options){\n        super();\n        options = options || {};\n        this.chunkBuffer = [];\n        this.chunkBufferLen = 0;\n        this.bodyHash = crypto.createHash(options.hashAlgo || \"sha1\");\n        this.remainder = \"\";\n        this.byteLength = 0;\n        this.debug = options.debug;\n        this._debugBody = options.debug ? [] : false;\n    }\n    updateHash(chunk) {\n        let bodyStr;\n        // find next remainder\n        let nextRemainder = \"\";\n        // This crux finds and removes the spaces from the last line and the newline characters after the last non-empty line\n        // If we get another chunk that does not match this description then we can restore the previously processed data\n        let state = \"file\";\n        for(let i = chunk.length - 1; i >= 0; i--){\n            let c = chunk[i];\n            if (state === \"file\" && (c === 0x0a || c === 0x0d)) {\n            // do nothing, found \\n or \\r at the end of chunk, stil end of file\n            } else if (state === \"file\" && (c === 0x09 || c === 0x20)) {\n                // switch to line ending mode, this is the last non-empty line\n                state = \"line\";\n            } else if (state === \"line\" && (c === 0x09 || c === 0x20)) {\n            // do nothing, found ' ' or \\t at the end of line, keep processing the last non-empty line\n            } else if (state === \"file\" || state === \"line\") {\n                // non line/file ending character found, switch to body mode\n                state = \"body\";\n                if (i === chunk.length - 1) {\n                    break;\n                }\n            }\n            if (i === 0) {\n                // reached to the beginning of the chunk, check if it is still about the ending\n                // and if the remainder also matches\n                if (state === \"file\" && (!this.remainder || /[\\r\\n]$/.test(this.remainder)) || state === \"line\" && (!this.remainder || /[ \\t]$/.test(this.remainder))) {\n                    // keep everything\n                    this.remainder += chunk.toString(\"binary\");\n                    return;\n                } else if (state === \"line\" || state === \"file\") {\n                    // process existing remainder as normal line but store the current chunk\n                    nextRemainder = chunk.toString(\"binary\");\n                    chunk = false;\n                    break;\n                }\n            }\n            if (state !== \"body\") {\n                continue;\n            }\n            // reached first non ending byte\n            nextRemainder = chunk.slice(i + 1).toString(\"binary\");\n            chunk = chunk.slice(0, i + 1);\n            break;\n        }\n        let needsFixing = !!this.remainder;\n        if (chunk && !needsFixing) {\n            // check if we even need to change anything\n            for(let i = 0, len = chunk.length; i < len; i++){\n                if (i && chunk[i] === 0x0a && chunk[i - 1] !== 0x0d) {\n                    // missing \\r before \\n\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x0d && chunk[i - 1] === 0x20) {\n                    // trailing WSP found\n                    needsFixing = true;\n                    break;\n                } else if (i && chunk[i] === 0x20 && chunk[i - 1] === 0x20) {\n                    // multiple spaces found, needs to be replaced with just one\n                    needsFixing = true;\n                    break;\n                } else if (chunk[i] === 0x09) {\n                    // TAB found, needs to be replaced with a space\n                    needsFixing = true;\n                    break;\n                }\n            }\n        }\n        if (needsFixing) {\n            bodyStr = this.remainder + (chunk ? chunk.toString(\"binary\") : \"\");\n            this.remainder = nextRemainder;\n            bodyStr = bodyStr.replace(/\\r?\\n/g, \"\\n\") // use js line endings\n            .replace(/[ \\t]*$/gm, \"\") // remove line endings, rtrim\n            .replace(/[ \\t]+/gm, \" \") // single spaces\n            .replace(/\\n/g, \"\\r\\n\"); // restore rfc822 line endings\n            chunk = Buffer.from(bodyStr, \"binary\");\n        } else if (nextRemainder) {\n            this.remainder = nextRemainder;\n        }\n        if (this.debug) {\n            this._debugBody.push(chunk);\n        }\n        this.bodyHash.update(chunk);\n    }\n    _transform(chunk, encoding, callback) {\n        if (!chunk || !chunk.length) {\n            return callback();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        this.updateHash(chunk);\n        this.byteLength += chunk.length;\n        this.push(chunk);\n        callback();\n    }\n    _flush(callback) {\n        // generate final hash and emit it\n        if (/[\\r\\n]$/.test(this.remainder) && this.byteLength > 2) {\n            // add terminating line end\n            this.bodyHash.update(Buffer.from(\"\\r\\n\"));\n        }\n        if (!this.byteLength) {\n            // emit empty line buffer to keep the stream flowing\n            this.push(Buffer.from(\"\\r\\n\"));\n        // this.bodyHash.update(Buffer.from('\\r\\n'));\n        }\n        this.emit(\"hash\", this.bodyHash.digest(\"base64\"), this.debug ? Buffer.concat(this._debugBody) : false);\n        callback();\n    }\n}\nmodule.exports = RelaxedBody;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/relaxed-body.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/dkim/sign.js":
/*!**************************************************!*\
  !*** ./node_modules/nodemailer/lib/dkim/sign.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Returns DKIM signature header line\n *\n * @param {Object} headers Parsed headers object from MessageParser\n * @param {String} bodyHash Base64 encoded hash of the message\n * @param {Object} options DKIM options\n * @param {String} options.domainName Domain name to be signed for\n * @param {String} options.keySelector DKIM key selector to use\n * @param {String} options.privateKey DKIM private key to use\n * @return {String} Complete header line\n */ module.exports = (headers, hashAlgo, bodyHash, options)=>{\n    options = options || {};\n    // all listed fields from RFC4871 #5.5\n    let defaultFieldNames = \"From:Sender:Reply-To:Subject:Date:Message-ID:To:\" + \"Cc:MIME-Version:Content-Type:Content-Transfer-Encoding:Content-ID:\" + \"Content-Description:Resent-Date:Resent-From:Resent-Sender:\" + \"Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:\" + \"List-Id:List-Help:List-Unsubscribe:List-Subscribe:List-Post:\" + \"List-Owner:List-Archive\";\n    let fieldNames = options.headerFieldNames || defaultFieldNames;\n    let canonicalizedHeaderData = relaxedHeaders(headers, fieldNames, options.skipFields);\n    let dkimHeader = generateDKIMHeader(options.domainName, options.keySelector, canonicalizedHeaderData.fieldNames, hashAlgo, bodyHash);\n    let signer, signature;\n    canonicalizedHeaderData.headers += \"dkim-signature:\" + relaxedHeaderLine(dkimHeader);\n    signer = crypto.createSign((\"rsa-\" + hashAlgo).toUpperCase());\n    signer.update(canonicalizedHeaderData.headers);\n    try {\n        signature = signer.sign(options.privateKey, \"base64\");\n    } catch (E) {\n        return false;\n    }\n    return dkimHeader + signature.replace(/(^.{73}|.{75}(?!\\r?\\n|\\r))/g, \"$&\\r\\n \").trim();\n};\nmodule.exports.relaxedHeaders = relaxedHeaders;\nfunction generateDKIMHeader(domainName, keySelector, fieldNames, hashAlgo, bodyHash) {\n    let dkim = [\n        \"v=1\",\n        \"a=rsa-\" + hashAlgo,\n        \"c=relaxed/relaxed\",\n        \"d=\" + punycode.toASCII(domainName),\n        \"q=dns/txt\",\n        \"s=\" + keySelector,\n        \"bh=\" + bodyHash,\n        \"h=\" + fieldNames\n    ].join(\"; \");\n    return mimeFuncs.foldLines(\"DKIM-Signature: \" + dkim, 76) + \";\\r\\n b=\";\n}\nfunction relaxedHeaders(headers, fieldNames, skipFields) {\n    let includedFields = new Set();\n    let skip = new Set();\n    let headerFields = new Map();\n    (skipFields || \"\").toLowerCase().split(\":\").forEach((field)=>{\n        skip.add(field.trim());\n    });\n    (fieldNames || \"\").toLowerCase().split(\":\").filter((field)=>!skip.has(field.trim())).forEach((field)=>{\n        includedFields.add(field.trim());\n    });\n    for(let i = headers.length - 1; i >= 0; i--){\n        let line = headers[i];\n        // only include the first value from bottom to top\n        if (includedFields.has(line.key) && !headerFields.has(line.key)) {\n            headerFields.set(line.key, relaxedHeaderLine(line.line));\n        }\n    }\n    let headersList = [];\n    let fields = [];\n    includedFields.forEach((field)=>{\n        if (headerFields.has(field)) {\n            fields.push(field);\n            headersList.push(field + \":\" + headerFields.get(field));\n        }\n    });\n    return {\n        headers: headersList.join(\"\\r\\n\") + \"\\r\\n\",\n        fieldNames: fields.join(\":\")\n    };\n}\nfunction relaxedHeaderLine(line) {\n    return line.substr(line.indexOf(\":\") + 1).replace(/\\r?\\n/g, \"\").replace(/\\s+/g, \" \").trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/dkim/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/cookies.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// module to handle cookies\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst SESSION_TIMEOUT = 1800; // 30 min\n/**\n * Creates a biskviit cookie jar for managing cookie values in memory\n *\n * @constructor\n * @param {Object} [options] Optional options object\n */ class Cookies {\n    constructor(options){\n        this.options = options || {};\n        this.cookies = [];\n    }\n    /**\n     * Stores a cookie string to the cookie storage\n     *\n     * @param {String} cookieStr Value from the 'Set-Cookie:' header\n     * @param {String} url Current URL\n     */ set(cookieStr, url) {\n        let urlparts = urllib.parse(url || \"\");\n        let cookie = this.parse(cookieStr);\n        let domain;\n        if (cookie.domain) {\n            domain = cookie.domain.replace(/^\\./, \"\");\n            // do not allow cross origin cookies\n            if (// can't be valid if the requested domain is shorter than current hostname\n            urlparts.hostname.length < domain.length || // prefix domains with dot to be sure that partial matches are not used\n            (\".\" + urlparts.hostname).substr(-domain.length + 1) !== \".\" + domain) {\n                cookie.domain = urlparts.hostname;\n            }\n        } else {\n            cookie.domain = urlparts.hostname;\n        }\n        if (!cookie.path) {\n            cookie.path = this.getPath(urlparts.pathname);\n        }\n        // if no expire date, then use sessionTimeout value\n        if (!cookie.expires) {\n            cookie.expires = new Date(Date.now() + (Number(this.options.sessionTimeout || SESSION_TIMEOUT) || SESSION_TIMEOUT) * 1000);\n        }\n        return this.add(cookie);\n    }\n    /**\n     * Returns cookie string for the 'Cookie:' header.\n     *\n     * @param {String} url URL to check for\n     * @returns {String} Cookie header or empty string if no matches were found\n     */ get(url) {\n        return this.list(url).map((cookie)=>cookie.name + \"=\" + cookie.value).join(\"; \");\n    }\n    /**\n     * Lists all valied cookie objects for the specified URL\n     *\n     * @param {String} url URL to check for\n     * @returns {Array} An array of cookie objects\n     */ list(url) {\n        let result = [];\n        let i;\n        let cookie;\n        for(i = this.cookies.length - 1; i >= 0; i--){\n            cookie = this.cookies[i];\n            if (this.isExpired(cookie)) {\n                this.cookies.splice(i, i);\n                continue;\n            }\n            if (this.match(cookie, url)) {\n                result.unshift(cookie);\n            }\n        }\n        return result;\n    }\n    /**\n     * Parses cookie string from the 'Set-Cookie:' header\n     *\n     * @param {String} cookieStr String from the 'Set-Cookie:' header\n     * @returns {Object} Cookie object\n     */ parse(cookieStr) {\n        let cookie = {};\n        (cookieStr || \"\").toString().split(\";\").forEach((cookiePart)=>{\n            let valueParts = cookiePart.split(\"=\");\n            let key = valueParts.shift().trim().toLowerCase();\n            let value = valueParts.join(\"=\").trim();\n            let domain;\n            if (!key) {\n                // skip empty parts\n                return;\n            }\n            switch(key){\n                case \"expires\":\n                    value = new Date(value);\n                    // ignore date if can not parse it\n                    if (value.toString() !== \"Invalid Date\") {\n                        cookie.expires = value;\n                    }\n                    break;\n                case \"path\":\n                    cookie.path = value;\n                    break;\n                case \"domain\":\n                    domain = value.toLowerCase();\n                    if (domain.length && domain.charAt(0) !== \".\") {\n                        domain = \".\" + domain; // ensure preceeding dot for user set domains\n                    }\n                    cookie.domain = domain;\n                    break;\n                case \"max-age\":\n                    cookie.expires = new Date(Date.now() + (Number(value) || 0) * 1000);\n                    break;\n                case \"secure\":\n                    cookie.secure = true;\n                    break;\n                case \"httponly\":\n                    cookie.httponly = true;\n                    break;\n                default:\n                    if (!cookie.name) {\n                        cookie.name = key;\n                        cookie.value = value;\n                    }\n            }\n        });\n        return cookie;\n    }\n    /**\n     * Checks if a cookie object is valid for a specified URL\n     *\n     * @param {Object} cookie Cookie object\n     * @param {String} url URL to check for\n     * @returns {Boolean} true if cookie is valid for specifiec URL\n     */ match(cookie, url) {\n        let urlparts = urllib.parse(url || \"\");\n        // check if hostname matches\n        // .foo.com also matches subdomains, foo.com does not\n        if (urlparts.hostname !== cookie.domain && (cookie.domain.charAt(0) !== \".\" || (\".\" + urlparts.hostname).substr(-cookie.domain.length) !== cookie.domain)) {\n            return false;\n        }\n        // check if path matches\n        let path = this.getPath(urlparts.pathname);\n        if (path.substr(0, cookie.path.length) !== cookie.path) {\n            return false;\n        }\n        // check secure argument\n        if (cookie.secure && urlparts.protocol !== \"https:\") {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Adds (or updates/removes if needed) a cookie object to the cookie storage\n     *\n     * @param {Object} cookie Cookie value to be stored\n     */ add(cookie) {\n        let i;\n        let len;\n        // nothing to do here\n        if (!cookie || !cookie.name) {\n            return false;\n        }\n        // overwrite if has same params\n        for(i = 0, len = this.cookies.length; i < len; i++){\n            if (this.compare(this.cookies[i], cookie)) {\n                // check if the cookie needs to be removed instead\n                if (this.isExpired(cookie)) {\n                    this.cookies.splice(i, 1); // remove expired/unset cookie\n                    return false;\n                }\n                this.cookies[i] = cookie;\n                return true;\n            }\n        }\n        // add as new if not already expired\n        if (!this.isExpired(cookie)) {\n            this.cookies.push(cookie);\n        }\n        return true;\n    }\n    /**\n     * Checks if two cookie objects are the same\n     *\n     * @param {Object} a Cookie to check against\n     * @param {Object} b Cookie to check against\n     * @returns {Boolean} True, if the cookies are the same\n     */ compare(a, b) {\n        return a.name === b.name && a.path === b.path && a.domain === b.domain && a.secure === b.secure && a.httponly === a.httponly;\n    }\n    /**\n     * Checks if a cookie is expired\n     *\n     * @param {Object} cookie Cookie object to check against\n     * @returns {Boolean} True, if the cookie is expired\n     */ isExpired(cookie) {\n        return cookie.expires && cookie.expires < new Date() || !cookie.value;\n    }\n    /**\n     * Returns normalized cookie path for an URL path argument\n     *\n     * @param {String} pathname\n     * @returns {String} Normalized path\n     */ getPath(pathname) {\n        let path = (pathname || \"/\").split(\"/\");\n        path.pop(); // remove filename part\n        path = path.join(\"/\").trim();\n        // ensure path prefix /\n        if (path.charAt(0) !== \"/\") {\n            path = \"/\" + path;\n        }\n        // ensure path suffix /\n        if (path.substr(-1) !== \"/\") {\n            path += \"/\";\n        }\n        return path;\n    }\n}\nmodule.exports = Cookies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/fetch/index.js":
/*!****************************************************!*\
  !*** ./node_modules/nodemailer/lib/fetch/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst Cookies = __webpack_require__(/*! ./cookies */ \"(rsc)/./node_modules/nodemailer/lib/fetch/cookies.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst MAX_REDIRECTS = 5;\nmodule.exports = function(url, options) {\n    return nmfetch(url, options);\n};\nmodule.exports.Cookies = Cookies;\nfunction nmfetch(url, options) {\n    options = options || {};\n    options.fetchRes = options.fetchRes || new PassThrough();\n    options.cookies = options.cookies || new Cookies();\n    options.redirects = options.redirects || 0;\n    options.maxRedirects = isNaN(options.maxRedirects) ? MAX_REDIRECTS : options.maxRedirects;\n    if (options.cookie) {\n        [].concat(options.cookie || []).forEach((cookie)=>{\n            options.cookies.set(cookie, url);\n        });\n        options.cookie = false;\n    }\n    let fetchRes = options.fetchRes;\n    let parsed = urllib.parse(url);\n    let method = (options.method || \"\").toString().trim().toUpperCase() || \"GET\";\n    let finished = false;\n    let cookies;\n    let body;\n    let handler = parsed.protocol === \"https:\" ? https : http;\n    let headers = {\n        \"accept-encoding\": \"gzip,deflate\",\n        \"user-agent\": \"nodemailer/\" + packageData.version\n    };\n    Object.keys(options.headers || {}).forEach((key)=>{\n        headers[key.toLowerCase().trim()] = options.headers[key];\n    });\n    if (options.userAgent) {\n        headers[\"user-agent\"] = options.userAgent;\n    }\n    if (parsed.auth) {\n        headers.Authorization = \"Basic \" + Buffer.from(parsed.auth).toString(\"base64\");\n    }\n    if (cookies = options.cookies.get(url)) {\n        headers.cookie = cookies;\n    }\n    if (options.body) {\n        if (options.contentType !== false) {\n            headers[\"Content-Type\"] = options.contentType || \"application/x-www-form-urlencoded\";\n        }\n        if (typeof options.body.pipe === \"function\") {\n            // it's a stream\n            headers[\"Transfer-Encoding\"] = \"chunked\";\n            body = options.body;\n            body.on(\"error\", (err)=>{\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n            });\n        } else {\n            if (options.body instanceof Buffer) {\n                body = options.body;\n            } else if (typeof options.body === \"object\") {\n                try {\n                    // encodeURIComponent can fail on invalid input (partial emoji etc.)\n                    body = Buffer.from(Object.keys(options.body).map((key)=>{\n                        let value = options.body[key].toString().trim();\n                        return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n                    }).join(\"&\"));\n                } catch (E) {\n                    if (finished) {\n                        return;\n                    }\n                    finished = true;\n                    E.type = \"FETCH\";\n                    E.sourceUrl = url;\n                    fetchRes.emit(\"error\", E);\n                    return;\n                }\n            } else {\n                body = Buffer.from(options.body.toString().trim());\n            }\n            headers[\"Content-Type\"] = options.contentType || \"application/x-www-form-urlencoded\";\n            headers[\"Content-Length\"] = body.length;\n        }\n        // if method is not provided, use POST instead of GET\n        method = (options.method || \"\").toString().trim().toUpperCase() || \"POST\";\n    }\n    let req;\n    let reqOptions = {\n        method,\n        host: parsed.hostname,\n        path: parsed.path,\n        port: parsed.port ? parsed.port : parsed.protocol === \"https:\" ? 443 : 80,\n        headers,\n        rejectUnauthorized: false,\n        agent: false\n    };\n    if (options.tls) {\n        Object.keys(options.tls).forEach((key)=>{\n            reqOptions[key] = options.tls[key];\n        });\n    }\n    if (parsed.protocol === \"https:\" && parsed.hostname && parsed.hostname !== reqOptions.host && !net.isIP(parsed.hostname) && !reqOptions.servername) {\n        reqOptions.servername = parsed.hostname;\n    }\n    try {\n        req = handler.request(reqOptions);\n    } catch (E) {\n        finished = true;\n        setImmediate(()=>{\n            E.type = \"FETCH\";\n            E.sourceUrl = url;\n            fetchRes.emit(\"error\", E);\n        });\n        return fetchRes;\n    }\n    if (options.timeout) {\n        req.setTimeout(options.timeout, ()=>{\n            if (finished) {\n                return;\n            }\n            finished = true;\n            req.abort();\n            let err = new Error(\"Request Timeout\");\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n        });\n    }\n    req.on(\"error\", (err)=>{\n        if (finished) {\n            return;\n        }\n        finished = true;\n        err.type = \"FETCH\";\n        err.sourceUrl = url;\n        fetchRes.emit(\"error\", err);\n    });\n    req.on(\"response\", (res)=>{\n        let inflate;\n        if (finished) {\n            return;\n        }\n        switch(res.headers[\"content-encoding\"]){\n            case \"gzip\":\n            case \"deflate\":\n                inflate = zlib.createUnzip();\n                break;\n        }\n        if (res.headers[\"set-cookie\"]) {\n            [].concat(res.headers[\"set-cookie\"] || []).forEach((cookie)=>{\n                options.cookies.set(cookie, url);\n            });\n        }\n        if ([\n            301,\n            302,\n            303,\n            307,\n            308\n        ].includes(res.statusCode) && res.headers.location) {\n            // redirect\n            options.redirects++;\n            if (options.redirects > options.maxRedirects) {\n                finished = true;\n                let err = new Error(\"Maximum redirect count exceeded\");\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                req.abort();\n                return;\n            }\n            // redirect does not include POST body\n            options.method = \"GET\";\n            options.body = false;\n            return nmfetch(urllib.resolve(url, res.headers.location), options);\n        }\n        fetchRes.statusCode = res.statusCode;\n        fetchRes.headers = res.headers;\n        if (res.statusCode >= 300 && !options.allowErrorResponse) {\n            finished = true;\n            let err = new Error(\"Invalid status code \" + res.statusCode);\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n            req.abort();\n            return;\n        }\n        res.on(\"error\", (err)=>{\n            if (finished) {\n                return;\n            }\n            finished = true;\n            err.type = \"FETCH\";\n            err.sourceUrl = url;\n            fetchRes.emit(\"error\", err);\n            req.abort();\n        });\n        if (inflate) {\n            res.pipe(inflate).pipe(fetchRes);\n            inflate.on(\"error\", (err)=>{\n                if (finished) {\n                    return;\n                }\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                req.abort();\n            });\n        } else {\n            res.pipe(fetchRes);\n        }\n    });\n    setImmediate(()=>{\n        if (body) {\n            try {\n                if (typeof body.pipe === \"function\") {\n                    return body.pipe(req);\n                } else {\n                    req.write(body);\n                }\n            } catch (err) {\n                finished = true;\n                err.type = \"FETCH\";\n                err.sourceUrl = url;\n                fetchRes.emit(\"error\", err);\n                return;\n            }\n        }\n        req.end();\n    });\n    return fetchRes;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/fetch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/json-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/json-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object to generate JSON output\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class JSONTransport {\n    constructor(options){\n        options = options || {};\n        this.options = options || {};\n        this.name = \"JSONTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"json-transport\"\n        });\n    }\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Composing JSON structure of %s to <%s>\", messageId, recipients.join(\", \"));\n        setImmediate(()=>{\n            mail.normalize((err, data)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed building JSON structure for %s. %s\", messageId, err.message);\n                    return done(err);\n                }\n                delete data.envelope;\n                delete data.normalizedHeaders;\n                return done(null, {\n                    envelope,\n                    messageId,\n                    message: this.options.skipEncoding ? data : JSON.stringify(data)\n                });\n            });\n        });\n    }\n}\nmodule.exports = JSONTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvanNvbi10cmFuc3BvcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUM1QixNQUFNQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUV2Qjs7Ozs7Q0FLQyxHQUNELE1BQU1FO0lBQ0ZDLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQkEsVUFBVUEsV0FBVyxDQUFDO1FBRXRCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFFM0IsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNDLE9BQU8sR0FBR1AsWUFBWU8sT0FBTztRQUVsQyxJQUFJLENBQUNDLE1BQU0sR0FBR04sT0FBT08sU0FBUyxDQUFDLElBQUksQ0FBQ0osT0FBTyxFQUFFO1lBQ3pDSyxXQUFXLElBQUksQ0FBQ0wsT0FBTyxDQUFDSyxTQUFTLElBQUk7UUFDekM7SUFDSjtJQUVBOzs7OztLQUtDLEdBQ0RDLEtBQUtDLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ2IsNkNBQTZDO1FBQzdDRCxLQUFLRSxPQUFPLENBQUNDLE9BQU8sR0FBRztRQUV2QixJQUFJQyxXQUFXSixLQUFLSyxJQUFJLENBQUNELFFBQVEsSUFBSUosS0FBS0UsT0FBTyxDQUFDSSxXQUFXO1FBQzdELElBQUlDLFlBQVlQLEtBQUtFLE9BQU8sQ0FBQ0ssU0FBUztRQUV0QyxJQUFJQyxhQUFhLEVBQUUsQ0FBQ0MsTUFBTSxDQUFDTCxTQUFTTSxFQUFFLElBQUksRUFBRTtRQUM1QyxJQUFJRixXQUFXRyxNQUFNLEdBQUcsR0FBRztZQUN2QkgsV0FBV0ksSUFBSSxDQUFDLFlBQVlKLFdBQVdLLE1BQU0sQ0FBQyxHQUFHRixNQUFNLEdBQUc7UUFDOUQ7UUFDQSxJQUFJLENBQUNmLE1BQU0sQ0FBQ2tCLElBQUksQ0FDWjtZQUNJQyxLQUFLO1lBQ0xSO1FBQ0osR0FDQSwwQ0FDQUEsV0FDQUMsV0FBV1EsSUFBSSxDQUFDO1FBR3BCQyxhQUFhO1lBQ1RqQixLQUFLa0IsU0FBUyxDQUFDLENBQUNDLEtBQUtkO2dCQUNqQixJQUFJYyxLQUFLO29CQUNMLElBQUksQ0FBQ3ZCLE1BQU0sQ0FBQ3dCLEtBQUssQ0FDYjt3QkFDSUQ7d0JBQ0FKLEtBQUs7d0JBQ0xSO29CQUNKLEdBQ0EsNkNBQ0FBLFdBQ0FZLElBQUlqQixPQUFPO29CQUVmLE9BQU9ELEtBQUtrQjtnQkFDaEI7Z0JBRUEsT0FBT2QsS0FBS0QsUUFBUTtnQkFDcEIsT0FBT0MsS0FBS2dCLGlCQUFpQjtnQkFFN0IsT0FBT3BCLEtBQUssTUFBTTtvQkFDZEc7b0JBQ0FHO29CQUNBTCxTQUFTLElBQUksQ0FBQ1QsT0FBTyxDQUFDNkIsWUFBWSxHQUFHakIsT0FBT2tCLEtBQUtDLFNBQVMsQ0FBQ25CO2dCQUMvRDtZQUNKO1FBQ0o7SUFDSjtBQUNKO0FBRUFvQixPQUFPQyxPQUFPLEdBQUduQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi9qc29uLXRyYW5zcG9ydC9pbmRleC5qcz82YzUwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFja2FnZURhdGEgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcbmNvbnN0IHNoYXJlZCA9IHJlcXVpcmUoJy4uL3NoYXJlZCcpO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIFRyYW5zcG9ydCBvYmplY3QgdG8gZ2VuZXJhdGUgSlNPTiBvdXRwdXRcbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25hbCBjb25maWcgcGFyYW1ldGVyXG4gKi9cbmNsYXNzIEpTT05UcmFuc3BvcnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB0aGlzLm5hbWUgPSAnSlNPTlRyYW5zcG9ydCc7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHBhY2thZ2VEYXRhLnZlcnNpb247XG5cbiAgICAgICAgdGhpcy5sb2dnZXIgPSBzaGFyZWQuZ2V0TG9nZ2VyKHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgY29tcG9uZW50OiB0aGlzLm9wdGlvbnMuY29tcG9uZW50IHx8ICdqc29uLXRyYW5zcG9ydCdcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPHA+Q29tcGlsZXMgYSBtYWlsY29tcG9zZXIgbWVzc2FnZSBhbmQgZm9yd2FyZHMgaXQgdG8gaGFuZGxlciB0aGF0IHNlbmRzIGl0LjwvcD5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbWFpbE1lc3NhZ2UgTWFpbENvbXBvc2VyIG9iamVjdFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSBzZW5kaW5nIGlzIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIHNlbmQobWFpbCwgZG9uZSkge1xuICAgICAgICAvLyBTZW5kbWFpbCBzdHJpcHMgdGhpcyBoZWFkZXIgbGluZSBieSBpdHNlbGZcbiAgICAgICAgbWFpbC5tZXNzYWdlLmtlZXBCY2MgPSB0cnVlO1xuXG4gICAgICAgIGxldCBlbnZlbG9wZSA9IG1haWwuZGF0YS5lbnZlbG9wZSB8fCBtYWlsLm1lc3NhZ2UuZ2V0RW52ZWxvcGUoKTtcbiAgICAgICAgbGV0IG1lc3NhZ2VJZCA9IG1haWwubWVzc2FnZS5tZXNzYWdlSWQoKTtcblxuICAgICAgICBsZXQgcmVjaXBpZW50cyA9IFtdLmNvbmNhdChlbnZlbG9wZS50byB8fCBbXSk7XG4gICAgICAgIGlmIChyZWNpcGllbnRzLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICAgIHJlY2lwaWVudHMucHVzaCgnLi4uYW5kICcgKyByZWNpcGllbnRzLnNwbGljZSgyKS5sZW5ndGggKyAnIG1vcmUnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ2dlci5pbmZvKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRueDogJ3NlbmQnLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VJZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdDb21wb3NpbmcgSlNPTiBzdHJ1Y3R1cmUgb2YgJXMgdG8gPCVzPicsXG4gICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICByZWNpcGllbnRzLmpvaW4oJywgJylcbiAgICAgICAgKTtcblxuICAgICAgICBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgICAgbWFpbC5ub3JtYWxpemUoKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRueDogJ3NlbmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VJZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdGYWlsZWQgYnVpbGRpbmcgSlNPTiBzdHJ1Y3R1cmUgZm9yICVzLiAlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZShlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLmVudmVsb3BlO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBkYXRhLm5vcm1hbGl6ZWRIZWFkZXJzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUobnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBlbnZlbG9wZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm9wdGlvbnMuc2tpcEVuY29kaW5nID8gZGF0YSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEpTT05UcmFuc3BvcnQ7XG4iXSwibmFtZXMiOlsicGFja2FnZURhdGEiLCJyZXF1aXJlIiwic2hhcmVkIiwiSlNPTlRyYW5zcG9ydCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIm5hbWUiLCJ2ZXJzaW9uIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiY29tcG9uZW50Iiwic2VuZCIsIm1haWwiLCJkb25lIiwibWVzc2FnZSIsImtlZXBCY2MiLCJlbnZlbG9wZSIsImRhdGEiLCJnZXRFbnZlbG9wZSIsIm1lc3NhZ2VJZCIsInJlY2lwaWVudHMiLCJjb25jYXQiLCJ0byIsImxlbmd0aCIsInB1c2giLCJzcGxpY2UiLCJpbmZvIiwidG54Iiwiam9pbiIsInNldEltbWVkaWF0ZSIsIm5vcm1hbGl6ZSIsImVyciIsImVycm9yIiwibm9ybWFsaXplZEhlYWRlcnMiLCJza2lwRW5jb2RpbmciLCJKU09OIiwic3RyaW5naWZ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mail-composer/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0 */ \nconst MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */ class MailComposer {\n    constructor(mail){\n        this.mail = mail || {};\n        this.message = false;\n    }\n    /**\n     * Builds MimeNode instance\n     */ compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter((alternative)=>/^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1;\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode(\"message/rfc822\", {\n                newline: this.mail.newline\n            }).setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n                contentType: \"text/plain\",\n                content: \"\"\n            });\n        }\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n        // Add headers to the root node, always overrides custom headers\n        [\n            \"from\",\n            \"sender\",\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"reply-to\",\n            \"in-reply-to\",\n            \"references\",\n            \"subject\",\n            \"message-id\",\n            \"date\"\n        ].forEach((header)=>{\n            let key = header.replace(/-(\\w)/g, (o, c)=>c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n        // ensure Message-Id value\n        this.message.messageId();\n        return this.message;\n    }\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */ getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i)=>{\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n            data = {\n                contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || \"bin\"),\n                contentDisposition: attachment.contentDisposition || (isMessageNode ? \"inline\" : \"attachment\"),\n                contentTransferEncoding: \"contentTransferEncoding\" in attachment ? attachment.contentTransferEncoding : \"base64\"\n            };\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename = (attachment.path || attachment.href || \"\").split(\"/\").pop().split(\"?\").shift() || \"attachment-\" + (i + 1);\n                if (data.filename.indexOf(\".\") < 0) {\n                    data.filename += \".\" + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href,\n                    httpHeaders: attachment.httpHeaders\n                };\n            } else {\n                data.content = attachment.content || \"\";\n            }\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n            return data;\n        });\n        if (this.mail.icalEvent) {\n            if (typeof this.mail.icalEvent === \"object\" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n            eventObject = {};\n            Object.keys(icalEvent).forEach((key)=>{\n                eventObject[key] = icalEvent[key];\n            });\n            eventObject.contentType = \"application/ics\";\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || \"invite.ics\";\n            eventObject.headers[\"Content-Disposition\"] = \"attachment\";\n            eventObject.headers[\"Content-Transfer-Encoding\"] = \"base64\";\n        }\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter((attachment)=>!attachment.cid).concat(eventObject || []),\n                related: attachments.filter((attachment)=>!!attachment.cid)\n            };\n        }\n    }\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */ getAlternatives() {\n        let alternatives = [], text, html, watchHtml, amp, icalEvent, eventObject;\n        if (this.mail.text) {\n            if (typeof this.mail.text === \"object\" && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = \"text/plain; charset=utf-8\";\n        }\n        if (this.mail.watchHtml) {\n            if (typeof this.mail.watchHtml === \"object\" && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = \"text/watch-html; charset=utf-8\";\n        }\n        if (this.mail.amp) {\n            if (typeof this.mail.amp === \"object\" && (this.mail.amp.content || this.mail.amp.path || this.mail.amp.href || this.mail.amp.raw)) {\n                amp = this.mail.amp;\n            } else {\n                amp = {\n                    content: this.mail.amp\n                };\n            }\n            amp.contentType = \"text/x-amp-html; charset=utf-8\";\n        }\n        // NB! when including attachments with a calendar alternative you might end up in a blank screen on some clients\n        if (this.mail.icalEvent) {\n            if (typeof this.mail.icalEvent === \"object\" && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n            eventObject = {};\n            Object.keys(icalEvent).forEach((key)=>{\n                eventObject[key] = icalEvent[key];\n            });\n            if (eventObject.content && typeof eventObject.content === \"object\") {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n            eventObject.filename = false;\n            eventObject.contentType = \"text/calendar; charset=utf-8; method=\" + (eventObject.method || \"PUBLISH\").toString().trim().toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n        if (this.mail.html) {\n            if (typeof this.mail.html === \"object\" && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = \"text/html; charset=utf-8\";\n        }\n        [].concat(text || []).concat(watchHtml || []).concat(amp || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach((alternative)=>{\n            let data;\n            if (/^data:/i.test(alternative.path || alternative.href)) {\n                alternative = this._processDataUrl(alternative);\n            }\n            data = {\n                contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || \"txt\"),\n                contentTransferEncoding: alternative.contentTransferEncoding\n            };\n            if (alternative.filename) {\n                data.filename = alternative.filename;\n            }\n            if (/^https?:\\/\\//i.test(alternative.path)) {\n                alternative.href = alternative.path;\n                alternative.path = undefined;\n            }\n            if (alternative.raw) {\n                data.raw = alternative.raw;\n            } else if (alternative.path) {\n                data.content = {\n                    path: alternative.path\n                };\n            } else if (alternative.href) {\n                data.content = {\n                    href: alternative.href\n                };\n            } else {\n                data.content = alternative.content || \"\";\n            }\n            if (alternative.encoding) {\n                data.encoding = alternative.encoding;\n            }\n            if (alternative.headers) {\n                data.headers = alternative.headers;\n            }\n            alternatives.push(data);\n        });\n        return alternatives;\n    }\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createMixed(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode(\"multipart/mixed\", {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(\"multipart/mixed\", {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n        [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach((element)=>{\n            // if the element is a html node from related subpart then ignore it\n            if (!this._useRelated || element !== this._htmlNode) {\n                this._createContentNode(node, element);\n            }\n        });\n        return node;\n    }\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createAlternative(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode(\"multipart/alternative\", {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(\"multipart/alternative\", {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        this._alternatives.forEach((alternative)=>{\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n        return node;\n    }\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */ _createRelated(parentNode) {\n        let node;\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        this._createContentNode(node, this._htmlNode);\n        this._attachments.related.forEach((alternative)=>this._createContentNode(node, alternative));\n        return node;\n    }\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */ _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || \"\";\n        let node;\n        let encoding = (element.encoding || \"utf8\").toString().toLowerCase().replace(/[-_\\s]/g, \"\");\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                textEncoding: this.mail.textEncoding,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey,\n                newline: this.mail.newline\n            });\n        }\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n        if (element.cid) {\n            node.setHeader(\"Content-Id\", \"<\" + element.cid.replace(/[<>]/g, \"\") + \">\");\n        }\n        if (element.contentTransferEncoding) {\n            node.setHeader(\"Content-Transfer-Encoding\", element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader(\"Content-Transfer-Encoding\", this.mail.encoding);\n        }\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader(\"Content-Disposition\", element.contentDisposition || (element.cid ? \"inline\" : \"attachment\"));\n        }\n        if (typeof element.content === \"string\" && ![\n            \"utf8\",\n            \"usascii\",\n            \"ascii\"\n        ].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n        return node;\n    }\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */ _processDataUrl(element) {\n        let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n        if (!parts) {\n            return element;\n        }\n        element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], \"base64\") : Buffer.from(decodeURIComponent(parts[2]));\n        if (\"path\" in element) {\n            element.path = false;\n        }\n        if (\"href\" in element) {\n            element.href = false;\n        }\n        parts[1].split(\";\").forEach((item)=>{\n            if (/^\\w+\\/[^/]+$/i.test(item)) {\n                element.contentType = element.contentType || item.toLowerCase();\n            }\n        });\n        return element;\n    }\n}\nmodule.exports = MailComposer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst mimeTypes = __webpack_require__(/*! ../mime-funcs/mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nconst MailComposer = __webpack_require__(/*! ../mail-composer */ \"(rsc)/./node_modules/nodemailer/lib/mail-composer/index.js\");\nconst DKIM = __webpack_require__(/*! ../dkim */ \"(rsc)/./node_modules/nodemailer/lib/dkim/index.js\");\nconst httpProxyClient = __webpack_require__(/*! ../smtp-connection/http-proxy-client */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst MailMessage = __webpack_require__(/*! ./mail-message */ \"(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\n/**\n * Creates an object for exposing the Mail API\n *\n * @constructor\n * @param {Object} transporter Transport object instance to pass the mails to\n */ class Mail extends EventEmitter {\n    constructor(transporter, options, defaults){\n        super();\n        this.options = options || {};\n        this._defaults = defaults || {};\n        this._defaultPlugins = {\n            compile: [\n                (...args)=>this._convertDataImages(...args)\n            ],\n            stream: []\n        };\n        this._userPlugins = {\n            compile: [],\n            stream: []\n        };\n        this.meta = new Map();\n        this.dkim = this.options.dkim ? new DKIM(this.options.dkim) : false;\n        this.transporter = transporter;\n        this.transporter.mailer = this;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"mail\"\n        });\n        this.logger.debug({\n            tnx: \"create\"\n        }, \"Creating transport: %s\", this.getVersionString());\n        // setup emit handlers for the transporter\n        if (typeof this.transporter.on === \"function\") {\n            // deprecated log interface\n            this.transporter.on(\"log\", (log)=>{\n                this.logger.debug({\n                    tnx: \"transport\"\n                }, \"%s: %s\", log.type, log.message);\n            });\n            // transporter errors\n            this.transporter.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"transport\"\n                }, \"Transport Error: %s\", err.message);\n                this.emit(\"error\", err);\n            });\n            // indicates if the sender has became idle\n            this.transporter.on(\"idle\", (...args)=>{\n                this.emit(\"idle\", ...args);\n            });\n        }\n        /**\n         * Optional methods passed to the underlying transport object\n         */ [\n            \"close\",\n            \"isIdle\",\n            \"verify\"\n        ].forEach((method)=>{\n            this[method] = (...args)=>{\n                if (typeof this.transporter[method] === \"function\") {\n                    if (method === \"verify\" && typeof this.getSocket === \"function\") {\n                        this.transporter.getSocket = this.getSocket;\n                        this.getSocket = false;\n                    }\n                    return this.transporter[method](...args);\n                } else {\n                    this.logger.warn({\n                        tnx: \"transport\",\n                        methodName: method\n                    }, \"Non existing method %s called for transport\", method);\n                    return false;\n                }\n            };\n        });\n        // setup proxy handling\n        if (this.options.proxy && typeof this.options.proxy === \"string\") {\n            this.setupProxy(this.options.proxy);\n        }\n    }\n    use(step, plugin) {\n        step = (step || \"\").toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            this._userPlugins[step] = [\n                plugin\n            ];\n        } else {\n            this._userPlugins[step].push(plugin);\n        }\n        return this;\n    }\n    /**\n     * Sends an email using the preselected transport object\n     *\n     * @param {Object} data E-data description\n     * @param {Function?} callback Callback to run once the sending succeeded or failed\n     */ sendMail(data, callback = null) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        if (typeof this.getSocket === \"function\") {\n            this.transporter.getSocket = this.getSocket;\n            this.getSocket = false;\n        }\n        let mail = new MailMessage(this, data);\n        this.logger.debug({\n            tnx: \"transport\",\n            name: this.transporter.name,\n            version: this.transporter.version,\n            action: \"send\"\n        }, \"Sending mail using %s/%s\", this.transporter.name, this.transporter.version);\n        this._processPlugins(\"compile\", mail, (err)=>{\n            if (err) {\n                this.logger.error({\n                    err,\n                    tnx: \"plugin\",\n                    action: \"compile\"\n                }, \"PluginCompile Error: %s\", err.message);\n                return callback(err);\n            }\n            mail.message = new MailComposer(mail.data).compile();\n            mail.setMailerHeader();\n            mail.setPriorityHeaders();\n            mail.setListHeaders();\n            this._processPlugins(\"stream\", mail, (err)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"plugin\",\n                        action: \"stream\"\n                    }, \"PluginStream Error: %s\", err.message);\n                    return callback(err);\n                }\n                if (mail.data.dkim || this.dkim) {\n                    mail.message.processFunc((input)=>{\n                        let dkim = mail.data.dkim ? new DKIM(mail.data.dkim) : this.dkim;\n                        this.logger.debug({\n                            tnx: \"DKIM\",\n                            messageId: mail.message.messageId(),\n                            dkimDomains: dkim.keys.map((key)=>key.keySelector + \".\" + key.domainName).join(\", \")\n                        }, \"Signing outgoing message with %s keys\", dkim.keys.length);\n                        return dkim.sign(input, mail.data._dkim);\n                    });\n                }\n                this.transporter.send(mail, (...args)=>{\n                    if (args[0]) {\n                        this.logger.error({\n                            err: args[0],\n                            tnx: \"transport\",\n                            action: \"send\"\n                        }, \"Send Error: %s\", args[0].message);\n                    }\n                    callback(...args);\n                });\n            });\n        });\n        return promise;\n    }\n    getVersionString() {\n        return util.format(\"%s (%s; +%s; %s/%s)\", packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);\n    }\n    _processPlugins(step, mail, callback) {\n        step = (step || \"\").toString();\n        if (!this._userPlugins.hasOwnProperty(step)) {\n            return callback();\n        }\n        let userPlugins = this._userPlugins[step] || [];\n        let defaultPlugins = this._defaultPlugins[step] || [];\n        if (userPlugins.length) {\n            this.logger.debug({\n                tnx: \"transaction\",\n                pluginCount: userPlugins.length,\n                step\n            }, \"Using %s plugins for %s\", userPlugins.length, step);\n        }\n        if (userPlugins.length + defaultPlugins.length === 0) {\n            return callback();\n        }\n        let pos = 0;\n        let block = \"default\";\n        let processPlugins = ()=>{\n            let curplugins = block === \"default\" ? defaultPlugins : userPlugins;\n            if (pos >= curplugins.length) {\n                if (block === \"default\" && userPlugins.length) {\n                    block = \"user\";\n                    pos = 0;\n                    curplugins = userPlugins;\n                } else {\n                    return callback();\n                }\n            }\n            let plugin = curplugins[pos++];\n            plugin(mail, (err)=>{\n                if (err) {\n                    return callback(err);\n                }\n                processPlugins();\n            });\n        };\n        processPlugins();\n    }\n    /**\n     * Sets up proxy handler for a Nodemailer object\n     *\n     * @param {String} proxyUrl Proxy configuration url\n     */ setupProxy(proxyUrl) {\n        let proxy = urllib.parse(proxyUrl);\n        // setup socket handler for the mailer object\n        this.getSocket = (options, callback)=>{\n            let protocol = proxy.protocol.replace(/:$/, \"\").toLowerCase();\n            if (this.meta.has(\"proxy_handler_\" + protocol)) {\n                return this.meta.get(\"proxy_handler_\" + protocol)(proxy, options, callback);\n            }\n            switch(protocol){\n                // Connect using a HTTP CONNECT method\n                case \"http\":\n                case \"https\":\n                    httpProxyClient(proxy.href, options.port, options.host, (err, socket)=>{\n                        if (err) {\n                            return callback(err);\n                        }\n                        return callback(null, {\n                            connection: socket\n                        });\n                    });\n                    return;\n                case \"socks\":\n                case \"socks5\":\n                case \"socks4\":\n                case \"socks4a\":\n                    {\n                        if (!this.meta.has(\"proxy_socks_module\")) {\n                            return callback(new Error(\"Socks module not loaded\"));\n                        }\n                        let connect = (ipaddress)=>{\n                            let proxyV2 = !!this.meta.get(\"proxy_socks_module\").SocksClient;\n                            let socksClient = proxyV2 ? this.meta.get(\"proxy_socks_module\").SocksClient : this.meta.get(\"proxy_socks_module\");\n                            let proxyType = Number(proxy.protocol.replace(/\\D/g, \"\")) || 5;\n                            let connectionOpts = {\n                                proxy: {\n                                    ipaddress,\n                                    port: Number(proxy.port),\n                                    type: proxyType\n                                },\n                                [proxyV2 ? \"destination\" : \"target\"]: {\n                                    host: options.host,\n                                    port: options.port\n                                },\n                                command: \"connect\"\n                            };\n                            if (proxy.auth) {\n                                let username = decodeURIComponent(proxy.auth.split(\":\").shift());\n                                let password = decodeURIComponent(proxy.auth.split(\":\").pop());\n                                if (proxyV2) {\n                                    connectionOpts.proxy.userId = username;\n                                    connectionOpts.proxy.password = password;\n                                } else if (proxyType === 4) {\n                                    connectionOpts.userid = username;\n                                } else {\n                                    connectionOpts.authentication = {\n                                        username,\n                                        password\n                                    };\n                                }\n                            }\n                            socksClient.createConnection(connectionOpts, (err, info)=>{\n                                if (err) {\n                                    return callback(err);\n                                }\n                                return callback(null, {\n                                    connection: info.socket || info\n                                });\n                            });\n                        };\n                        if (net.isIP(proxy.hostname)) {\n                            return connect(proxy.hostname);\n                        }\n                        return dns.resolve(proxy.hostname, (err, address)=>{\n                            if (err) {\n                                return callback(err);\n                            }\n                            connect(Array.isArray(address) ? address[0] : address);\n                        });\n                    }\n            }\n            callback(new Error(\"Unknown proxy configuration\"));\n        };\n    }\n    _convertDataImages(mail, callback) {\n        if (!this.options.attachDataUrls && !mail.data.attachDataUrls || !mail.data.html) {\n            return callback();\n        }\n        mail.resolveContent(mail.data, \"html\", (err, html)=>{\n            if (err) {\n                return callback(err);\n            }\n            let cidCounter = 0;\n            html = (html || \"\").toString().replace(/(<img\\b[^>]* src\\s*=[\\s\"']*)(data:([^;]+);[^\"'>\\s]+)/gi, (match, prefix, dataUri, mimeType)=>{\n                let cid = crypto.randomBytes(10).toString(\"hex\") + \"@localhost\";\n                if (!mail.data.attachments) {\n                    mail.data.attachments = [];\n                }\n                if (!Array.isArray(mail.data.attachments)) {\n                    mail.data.attachments = [].concat(mail.data.attachments || []);\n                }\n                mail.data.attachments.push({\n                    path: dataUri,\n                    cid,\n                    filename: \"image-\" + ++cidCounter + \".\" + mimeTypes.detectExtension(mimeType)\n                });\n                return prefix + \"cid:\" + cid;\n            });\n            mail.data.html = html;\n            callback();\n        });\n    }\n    set(key, value) {\n        return this.meta.set(key, value);\n    }\n    get(key) {\n        return this.meta.get(key);\n    }\n}\nmodule.exports = Mail;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mailer/mail-message.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst MimeNode = __webpack_require__(/*! ../mime-node */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nclass MailMessage {\n    constructor(mailer, data){\n        this.mailer = mailer;\n        this.data = {};\n        this.message = null;\n        data = data || {};\n        let options = mailer.options || {};\n        let defaults = mailer._defaults || {};\n        Object.keys(data).forEach((key)=>{\n            this.data[key] = data[key];\n        });\n        this.data.headers = this.data.headers || {};\n        // apply defaults\n        Object.keys(defaults).forEach((key)=>{\n            if (!(key in this.data)) {\n                this.data[key] = defaults[key];\n            } else if (key === \"headers\") {\n                // headers is a special case. Allow setting individual default headers\n                Object.keys(defaults.headers).forEach((key)=>{\n                    if (!(key in this.data.headers)) {\n                        this.data.headers[key] = defaults.headers[key];\n                    }\n                });\n            }\n        });\n        // force specific keys from transporter options\n        [\n            \"disableFileAccess\",\n            \"disableUrlAccess\",\n            \"normalizeHeaderKey\"\n        ].forEach((key)=>{\n            if (key in options) {\n                this.data[key] = options[key];\n            }\n        });\n    }\n    resolveContent(...args) {\n        return shared.resolveContent(...args);\n    }\n    resolveAll(callback) {\n        let keys = [\n            [\n                this.data,\n                \"html\"\n            ],\n            [\n                this.data,\n                \"text\"\n            ],\n            [\n                this.data,\n                \"watchHtml\"\n            ],\n            [\n                this.data,\n                \"amp\"\n            ],\n            [\n                this.data,\n                \"icalEvent\"\n            ]\n        ];\n        if (this.data.alternatives && this.data.alternatives.length) {\n            this.data.alternatives.forEach((alternative, i)=>{\n                keys.push([\n                    this.data.alternatives,\n                    i\n                ]);\n            });\n        }\n        if (this.data.attachments && this.data.attachments.length) {\n            this.data.attachments.forEach((attachment, i)=>{\n                if (!attachment.filename) {\n                    attachment.filename = (attachment.path || attachment.href || \"\").split(\"/\").pop().split(\"?\").shift() || \"attachment-\" + (i + 1);\n                    if (attachment.filename.indexOf(\".\") < 0) {\n                        attachment.filename += \".\" + mimeFuncs.detectExtension(attachment.contentType);\n                    }\n                }\n                if (!attachment.contentType) {\n                    attachment.contentType = mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || \"bin\");\n                }\n                keys.push([\n                    this.data.attachments,\n                    i\n                ]);\n            });\n        }\n        let mimeNode = new MimeNode();\n        let addressKeys = [\n            \"from\",\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"sender\",\n            \"replyTo\"\n        ];\n        addressKeys.forEach((address)=>{\n            let value;\n            if (this.message) {\n                value = [].concat(mimeNode._parseAddresses(this.message.getHeader(address === \"replyTo\" ? \"reply-to\" : address)) || []);\n            } else if (this.data[address]) {\n                value = [].concat(mimeNode._parseAddresses(this.data[address]) || []);\n            }\n            if (value && value.length) {\n                this.data[address] = value;\n            } else if (address in this.data) {\n                this.data[address] = null;\n            }\n        });\n        let singleKeys = [\n            \"from\",\n            \"sender\"\n        ];\n        singleKeys.forEach((address)=>{\n            if (this.data[address]) {\n                this.data[address] = this.data[address].shift();\n            }\n        });\n        let pos = 0;\n        let resolveNext = ()=>{\n            if (pos >= keys.length) {\n                return callback(null, this.data);\n            }\n            let args = keys[pos++];\n            if (!args[0] || !args[0][args[1]]) {\n                return resolveNext();\n            }\n            shared.resolveContent(...args, (err, value)=>{\n                if (err) {\n                    return callback(err);\n                }\n                let node = {\n                    content: value\n                };\n                if (args[0][args[1]] && typeof args[0][args[1]] === \"object\" && !Buffer.isBuffer(args[0][args[1]])) {\n                    Object.keys(args[0][args[1]]).forEach((key)=>{\n                        if (!(key in node) && ![\n                            \"content\",\n                            \"path\",\n                            \"href\",\n                            \"raw\"\n                        ].includes(key)) {\n                            node[key] = args[0][args[1]][key];\n                        }\n                    });\n                }\n                args[0][args[1]] = node;\n                resolveNext();\n            });\n        };\n        setImmediate(()=>resolveNext());\n    }\n    normalize(callback) {\n        let envelope = this.data.envelope || this.message.getEnvelope();\n        let messageId = this.message.messageId();\n        this.resolveAll((err, data)=>{\n            if (err) {\n                return callback(err);\n            }\n            data.envelope = envelope;\n            data.messageId = messageId;\n            [\n                \"html\",\n                \"text\",\n                \"watchHtml\",\n                \"amp\"\n            ].forEach((key)=>{\n                if (data[key] && data[key].content) {\n                    if (typeof data[key].content === \"string\") {\n                        data[key] = data[key].content;\n                    } else if (Buffer.isBuffer(data[key].content)) {\n                        data[key] = data[key].content.toString();\n                    }\n                }\n            });\n            if (data.icalEvent && Buffer.isBuffer(data.icalEvent.content)) {\n                data.icalEvent.content = data.icalEvent.content.toString(\"base64\");\n                data.icalEvent.encoding = \"base64\";\n            }\n            if (data.alternatives && data.alternatives.length) {\n                data.alternatives.forEach((alternative)=>{\n                    if (alternative && alternative.content && Buffer.isBuffer(alternative.content)) {\n                        alternative.content = alternative.content.toString(\"base64\");\n                        alternative.encoding = \"base64\";\n                    }\n                });\n            }\n            if (data.attachments && data.attachments.length) {\n                data.attachments.forEach((attachment)=>{\n                    if (attachment && attachment.content && Buffer.isBuffer(attachment.content)) {\n                        attachment.content = attachment.content.toString(\"base64\");\n                        attachment.encoding = \"base64\";\n                    }\n                });\n            }\n            data.normalizedHeaders = {};\n            Object.keys(data.headers || {}).forEach((key)=>{\n                let value = [].concat(data.headers[key] || []).shift();\n                value = value && value.value || value;\n                if (value) {\n                    if ([\n                        \"references\",\n                        \"in-reply-to\",\n                        \"message-id\",\n                        \"content-id\"\n                    ].includes(key)) {\n                        value = this.message._encodeHeaderValue(key, value);\n                    }\n                    data.normalizedHeaders[key] = value;\n                }\n            });\n            if (data.list && typeof data.list === \"object\") {\n                let listHeaders = this._getListHeaders(data.list);\n                listHeaders.forEach((entry)=>{\n                    data.normalizedHeaders[entry.key] = entry.value.map((val)=>val && val.value || val).join(\", \");\n                });\n            }\n            if (data.references) {\n                data.normalizedHeaders.references = this.message._encodeHeaderValue(\"references\", data.references);\n            }\n            if (data.inReplyTo) {\n                data.normalizedHeaders[\"in-reply-to\"] = this.message._encodeHeaderValue(\"in-reply-to\", data.inReplyTo);\n            }\n            return callback(null, data);\n        });\n    }\n    setMailerHeader() {\n        if (!this.message || !this.data.xMailer) {\n            return;\n        }\n        this.message.setHeader(\"X-Mailer\", this.data.xMailer);\n    }\n    setPriorityHeaders() {\n        if (!this.message || !this.data.priority) {\n            return;\n        }\n        switch((this.data.priority || \"\").toString().toLowerCase()){\n            case \"high\":\n                this.message.setHeader(\"X-Priority\", \"1 (Highest)\");\n                this.message.setHeader(\"X-MSMail-Priority\", \"High\");\n                this.message.setHeader(\"Importance\", \"High\");\n                break;\n            case \"low\":\n                this.message.setHeader(\"X-Priority\", \"5 (Lowest)\");\n                this.message.setHeader(\"X-MSMail-Priority\", \"Low\");\n                this.message.setHeader(\"Importance\", \"Low\");\n                break;\n            default:\n        }\n    }\n    setListHeaders() {\n        if (!this.message || !this.data.list || typeof this.data.list !== \"object\") {\n            return;\n        }\n        // add optional List-* headers\n        if (this.data.list && typeof this.data.list === \"object\") {\n            this._getListHeaders(this.data.list).forEach((listHeader)=>{\n                listHeader.value.forEach((value)=>{\n                    this.message.addHeader(listHeader.key, value);\n                });\n            });\n        }\n    }\n    _getListHeaders(listData) {\n        // make sure an url looks like <protocol:url>\n        return Object.keys(listData).map((key)=>({\n                key: \"list-\" + key.toLowerCase().trim(),\n                value: [].concat(listData[key] || []).map((value)=>({\n                        prepared: true,\n                        foldLines: true,\n                        value: [].concat(value || []).map((value)=>{\n                            if (typeof value === \"string\") {\n                                value = {\n                                    url: value\n                                };\n                            }\n                            if (value && value.url) {\n                                if (key.toLowerCase().trim() === \"id\") {\n                                    // List-ID: \"comment\" <domain>\n                                    let comment = value.comment || \"\";\n                                    if (mimeFuncs.isPlainText(comment)) {\n                                        comment = '\"' + comment + '\"';\n                                    } else {\n                                        comment = mimeFuncs.encodeWord(comment);\n                                    }\n                                    return (value.comment ? comment + \" \" : \"\") + this._formatListUrl(value.url).replace(/^<[^:]+\\/{,2}/, \"\");\n                                }\n                                // List-*: <http://domain> (comment)\n                                let comment = value.comment || \"\";\n                                if (!mimeFuncs.isPlainText(comment)) {\n                                    comment = mimeFuncs.encodeWord(comment);\n                                }\n                                return this._formatListUrl(value.url) + (value.comment ? \" (\" + comment + \")\" : \"\");\n                            }\n                            return \"\";\n                        }).filter((value)=>value).join(\", \")\n                    }))\n            }));\n    }\n    _formatListUrl(url) {\n        url = url.replace(/[\\s<]+|[\\s>]+/g, \"\");\n        if (/^(https?|mailto|ftp):/.test(url)) {\n            return \"<\" + url + \">\";\n        }\n        if (/^[^@]+@[^@]+$/.test(url)) {\n            return \"<mailto:\" + url + \">\";\n        }\n        return \"<http://\" + url + \">\";\n    }\n}\nmodule.exports = MailMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mailer/mail-message.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-control-regex:0 */ \nconst base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nconst qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nconst mimeTypes = __webpack_require__(/*! ./mime-types */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\");\nmodule.exports = {\n    /**\n     * Checks if a value is plaintext string (uses only printable 7bit chars)\n     *\n     * @param {String} value String to be tested\n     * @returns {Boolean} true if it is a plaintext string\n     */ isPlainText (value, isParam) {\n        const re = isParam ? /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\"\\u0080-\\uFFFF]/ : /[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f\\u0080-\\uFFFF]/;\n        if (typeof value !== \"string\" || re.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    },\n    /**\n     * Checks if a multi line string containes lines longer than the selected value.\n     *\n     * Useful when detecting if a mail message needs any processing at all –\n     * if only plaintext characters are used and lines are short, then there is\n     * no need to encode the values in any way. If the value is plaintext but has\n     * longer lines then allowed, then use format=flowed\n     *\n     * @param {Number} lineLength Max line length to check for\n     * @returns {Boolean} Returns true if there is at least one line longer than lineLength chars\n     */ hasLongerLines (str, lineLength) {\n        if (str.length > 128 * 1024) {\n            // do not test strings longer than 128kB\n            return true;\n        }\n        return new RegExp(\"^.{\" + (lineLength + 1) + \",}\", \"m\").test(str);\n    },\n    /**\n     * Encodes a string or an Buffer to an UTF-8 MIME Word (rfc2047)\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @return {String} Single or several mime words joined together\n     */ encodeWord (data, mimeWordEncoding, maxLength) {\n        mimeWordEncoding = (mimeWordEncoding || \"Q\").toString().toUpperCase().trim().charAt(0);\n        maxLength = maxLength || 0;\n        let encodedStr;\n        let toCharset = \"UTF-8\";\n        if (maxLength && maxLength > 7 + toCharset.length) {\n            maxLength -= 7 + toCharset.length;\n        }\n        if (mimeWordEncoding === \"Q\") {\n            // https://tools.ietf.org/html/rfc2047#section-5 rule (3)\n            encodedStr = qp.encode(data).replace(/[^a-z0-9!*+\\-/=]/gi, (chr)=>{\n                let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n                if (chr === \" \") {\n                    return \"_\";\n                } else {\n                    return \"=\" + (ord.length === 1 ? \"0\" + ord : ord);\n                }\n            });\n        } else if (mimeWordEncoding === \"B\") {\n            encodedStr = typeof data === \"string\" ? data : base64.encode(data);\n            maxLength = maxLength ? Math.max(3, (maxLength - maxLength % 4) / 4 * 3) : 0;\n        }\n        if (maxLength && (mimeWordEncoding !== \"B\" ? encodedStr : base64.encode(data)).length > maxLength) {\n            if (mimeWordEncoding === \"Q\") {\n                encodedStr = this.splitMimeEncodedString(encodedStr, maxLength).join(\"?= =?\" + toCharset + \"?\" + mimeWordEncoding + \"?\");\n            } else {\n                // RFC2047 6.3 (2) states that encoded-word must include an integral number of characters, so no chopping unicode sequences\n                let parts = [];\n                let lpart = \"\";\n                for(let i = 0, len = encodedStr.length; i < len; i++){\n                    let chr = encodedStr.charAt(i);\n                    if (/[\\ud83c\\ud83d\\ud83e]/.test(chr) && i < len - 1) {\n                        // composite emoji byte, so add the next byte as well\n                        chr += encodedStr.charAt(++i);\n                    }\n                    // check if we can add this character to the existing string\n                    // without breaking byte length limit\n                    if (Buffer.byteLength(lpart + chr) <= maxLength || i === 0) {\n                        lpart += chr;\n                    } else {\n                        // we hit the length limit, so push the existing string and start over\n                        parts.push(base64.encode(lpart));\n                        lpart = chr;\n                    }\n                }\n                if (lpart) {\n                    parts.push(base64.encode(lpart));\n                }\n                if (parts.length > 1) {\n                    encodedStr = parts.join(\"?= =?\" + toCharset + \"?\" + mimeWordEncoding + \"?\");\n                } else {\n                    encodedStr = parts.join(\"\");\n                }\n            }\n        } else if (mimeWordEncoding === \"B\") {\n            encodedStr = base64.encode(data);\n        }\n        return \"=?\" + toCharset + \"?\" + mimeWordEncoding + \"?\" + encodedStr + (encodedStr.substr(-2) === \"?=\" ? \"\" : \"?=\");\n    },\n    /**\n     * Finds word sequences with non ascii text and converts these to mime words\n     *\n     * @param {String} value String to be encoded\n     * @param {String} mimeWordEncoding='Q' Encoding for the mime word, either Q or B\n     * @param {Number} [maxLength=0] If set, split mime words into several chunks if needed\n     * @param {Boolean} [encodeAll=false] If true and the value needs encoding then encodes entire string, not just the smallest match\n     * @return {String} String with possible mime words\n     */ encodeWords (value, mimeWordEncoding, maxLength, encodeAll) {\n        maxLength = maxLength || 0;\n        let encodedValue;\n        // find first word with a non-printable ascii or special symbol in it\n        let firstMatch = value.match(/(?:^|\\s)([^\\s]*[\"\\u0080-\\uFFFF])/);\n        if (!firstMatch) {\n            return value;\n        }\n        if (encodeAll) {\n            // if it is requested to encode everything or the string contains something that resebles encoded word, then encode everything\n            return this.encodeWord(value, mimeWordEncoding, maxLength);\n        }\n        // find the last word with a non-printable ascii in it\n        let lastMatch = value.match(/([\"\\u0080-\\uFFFF][^\\s]*)[^\"\\u0080-\\uFFFF]*$/);\n        if (!lastMatch) {\n            // should not happen\n            return value;\n        }\n        let startIndex = firstMatch.index + (firstMatch[0].match(/[^\\s]/) || {\n            index: 0\n        }).index;\n        let endIndex = lastMatch.index + (lastMatch[1] || \"\").length;\n        encodedValue = (startIndex ? value.substr(0, startIndex) : \"\") + this.encodeWord(value.substring(startIndex, endIndex), mimeWordEncoding || \"Q\", maxLength) + (endIndex < value.length ? value.substr(endIndex) : \"\");\n        return encodedValue;\n    },\n    /**\n     * Joins parsed header value together as 'value; param1=value1; param2=value2'\n     * PS: We are following RFC 822 for the list of special characters that we need to keep in quotes.\n     *      Refer: https://www.w3.org/Protocols/rfc1341/4_Content-Type.html\n     * @param {Object} structured Parsed header value\n     * @return {String} joined header value\n     */ buildHeaderValue (structured) {\n        let paramsArray = [];\n        Object.keys(structured.params || {}).forEach((param)=>{\n            // filename might include unicode characters so it is a special case\n            // other values probably do not\n            let value = structured.params[param];\n            if (!this.isPlainText(value, true) || value.length >= 75) {\n                this.buildHeaderParam(param, value, 50).forEach((encodedParam)=>{\n                    if (!/[\\s\"\\\\;:/=(),<>@[\\]?]|^[-']|'$/.test(encodedParam.value) || encodedParam.key.substr(-1) === \"*\") {\n                        paramsArray.push(encodedParam.key + \"=\" + encodedParam.value);\n                    } else {\n                        paramsArray.push(encodedParam.key + \"=\" + JSON.stringify(encodedParam.value));\n                    }\n                });\n            } else if (/[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(value)) {\n                paramsArray.push(param + \"=\" + JSON.stringify(value));\n            } else {\n                paramsArray.push(param + \"=\" + value);\n            }\n        });\n        return structured.value + (paramsArray.length ? \"; \" + paramsArray.join(\"; \") : \"\");\n    },\n    /**\n     * Encodes a string or an Buffer to an UTF-8 Parameter Value Continuation encoding (rfc2231)\n     * Useful for splitting long parameter values.\n     *\n     * For example\n     *      title=\"unicode string\"\n     * becomes\n     *     title*0*=utf-8''unicode\n     *     title*1*=%20string\n     *\n     * @param {String|Buffer} data String to be encoded\n     * @param {Number} [maxLength=50] Max length for generated chunks\n     * @param {String} [fromCharset='UTF-8'] Source sharacter set\n     * @return {Array} A list of encoded keys and headers\n     */ buildHeaderParam (key, data, maxLength) {\n        let list = [];\n        let encodedStr = typeof data === \"string\" ? data : (data || \"\").toString();\n        let encodedStrArr;\n        let chr, ord;\n        let line;\n        let startPos = 0;\n        let i, len;\n        maxLength = maxLength || 50;\n        // process ascii only text\n        if (this.isPlainText(data, true)) {\n            // check if conversion is even needed\n            if (encodedStr.length <= maxLength) {\n                return [\n                    {\n                        key,\n                        value: encodedStr\n                    }\n                ];\n            }\n            encodedStr = encodedStr.replace(new RegExp(\".{\" + maxLength + \"}\", \"g\"), (str)=>{\n                list.push({\n                    line: str\n                });\n                return \"\";\n            });\n            if (encodedStr) {\n                list.push({\n                    line: encodedStr\n                });\n            }\n        } else {\n            if (/[\\uD800-\\uDBFF]/.test(encodedStr)) {\n                // string containts surrogate pairs, so normalize it to an array of bytes\n                encodedStrArr = [];\n                for(i = 0, len = encodedStr.length; i < len; i++){\n                    chr = encodedStr.charAt(i);\n                    ord = chr.charCodeAt(0);\n                    if (ord >= 0xd800 && ord <= 0xdbff && i < len - 1) {\n                        chr += encodedStr.charAt(i + 1);\n                        encodedStrArr.push(chr);\n                        i++;\n                    } else {\n                        encodedStrArr.push(chr);\n                    }\n                }\n                encodedStr = encodedStrArr;\n            }\n            // first line includes the charset and language info and needs to be encoded\n            // even if it does not contain any unicode characters\n            line = \"utf-8''\";\n            let encoded = true;\n            startPos = 0;\n            // process text with unicode or special chars\n            for(i = 0, len = encodedStr.length; i < len; i++){\n                chr = encodedStr[i];\n                if (encoded) {\n                    chr = this.safeEncodeURIComponent(chr);\n                } else {\n                    // try to urlencode current char\n                    chr = chr === \" \" ? chr : this.safeEncodeURIComponent(chr);\n                    // By default it is not required to encode a line, the need\n                    // only appears when the string contains unicode or special chars\n                    // in this case we start processing the line over and encode all chars\n                    if (chr !== encodedStr[i]) {\n                        // Check if it is even possible to add the encoded char to the line\n                        // If not, there is no reason to use this line, just push it to the list\n                        // and start a new line with the char that needs encoding\n                        if ((this.safeEncodeURIComponent(line) + chr).length >= maxLength) {\n                            list.push({\n                                line,\n                                encoded\n                            });\n                            line = \"\";\n                            startPos = i - 1;\n                        } else {\n                            encoded = true;\n                            i = startPos;\n                            line = \"\";\n                            continue;\n                        }\n                    }\n                }\n                // if the line is already too long, push it to the list and start a new one\n                if ((line + chr).length >= maxLength) {\n                    list.push({\n                        line,\n                        encoded\n                    });\n                    line = chr = encodedStr[i] === \" \" ? \" \" : this.safeEncodeURIComponent(encodedStr[i]);\n                    if (chr === encodedStr[i]) {\n                        encoded = false;\n                        startPos = i - 1;\n                    } else {\n                        encoded = true;\n                    }\n                } else {\n                    line += chr;\n                }\n            }\n            if (line) {\n                list.push({\n                    line,\n                    encoded\n                });\n            }\n        }\n        return list.map((item, i)=>({\n                // encoded lines: {name}*{part}*\n                // unencoded lines: {name}*{part}\n                // if any line needs to be encoded then the first line (part==0) is always encoded\n                key: key + \"*\" + i + (item.encoded ? \"*\" : \"\"),\n                value: item.line\n            }));\n    },\n    /**\n     * Parses a header value with key=value arguments into a structured\n     * object.\n     *\n     *   parseHeaderValue('content-type: text/plain; CHARSET='UTF-8'') ->\n     *   {\n     *     'value': 'text/plain',\n     *     'params': {\n     *       'charset': 'UTF-8'\n     *     }\n     *   }\n     *\n     * @param {String} str Header value\n     * @return {Object} Header value as a parsed structure\n     */ parseHeaderValue (str) {\n        let response = {\n            value: false,\n            params: {}\n        };\n        let key = false;\n        let value = \"\";\n        let type = \"value\";\n        let quote = false;\n        let escaped = false;\n        let chr;\n        for(let i = 0, len = str.length; i < len; i++){\n            chr = str.charAt(i);\n            if (type === \"key\") {\n                if (chr === \"=\") {\n                    key = value.trim().toLowerCase();\n                    type = \"value\";\n                    value = \"\";\n                    continue;\n                }\n                value += chr;\n            } else {\n                if (escaped) {\n                    value += chr;\n                } else if (chr === \"\\\\\") {\n                    escaped = true;\n                    continue;\n                } else if (quote && chr === quote) {\n                    quote = false;\n                } else if (!quote && chr === '\"') {\n                    quote = chr;\n                } else if (!quote && chr === \";\") {\n                    if (key === false) {\n                        response.value = value.trim();\n                    } else {\n                        response.params[key] = value.trim();\n                    }\n                    type = \"key\";\n                    value = \"\";\n                } else {\n                    value += chr;\n                }\n                escaped = false;\n            }\n        }\n        if (type === \"value\") {\n            if (key === false) {\n                response.value = value.trim();\n            } else {\n                response.params[key] = value.trim();\n            }\n        } else if (value.trim()) {\n            response.params[value.trim().toLowerCase()] = \"\";\n        }\n        // handle parameter value continuations\n        // https://tools.ietf.org/html/rfc2231#section-3\n        // preprocess values\n        Object.keys(response.params).forEach((key)=>{\n            let actualKey, nr, match, value;\n            if (match = key.match(/(\\*(\\d+)|\\*(\\d+)\\*|\\*)$/)) {\n                actualKey = key.substr(0, match.index);\n                nr = Number(match[2] || match[3]) || 0;\n                if (!response.params[actualKey] || typeof response.params[actualKey] !== \"object\") {\n                    response.params[actualKey] = {\n                        charset: false,\n                        values: []\n                    };\n                }\n                value = response.params[key];\n                if (nr === 0 && match[0].substr(-1) === \"*\" && (match = value.match(/^([^']*)'[^']*'(.*)$/))) {\n                    response.params[actualKey].charset = match[1] || \"iso-8859-1\";\n                    value = match[2];\n                }\n                response.params[actualKey].values[nr] = value;\n                // remove the old reference\n                delete response.params[key];\n            }\n        });\n        // concatenate split rfc2231 strings and convert encoded strings to mime encoded words\n        Object.keys(response.params).forEach((key)=>{\n            let value;\n            if (response.params[key] && Array.isArray(response.params[key].values)) {\n                value = response.params[key].values.map((val)=>val || \"\").join(\"\");\n                if (response.params[key].charset) {\n                    // convert \"%AB\" to \"=?charset?Q?=AB?=\"\n                    response.params[key] = \"=?\" + response.params[key].charset + \"?Q?\" + value// fix invalidly encoded chars\n                    .replace(/[=?_\\s]/g, (s)=>{\n                        let c = s.charCodeAt(0).toString(16);\n                        if (s === \" \") {\n                            return \"_\";\n                        } else {\n                            return \"%\" + (c.length < 2 ? \"0\" : \"\") + c;\n                        }\n                    })// change from urlencoding to percent encoding\n                    .replace(/%/g, \"=\") + \"?=\";\n                } else {\n                    response.params[key] = value;\n                }\n            }\n        });\n        return response;\n    },\n    /**\n     * Returns file extension for a content type string. If no suitable extensions\n     * are found, 'bin' is used as the default extension\n     *\n     * @param {String} mimeType Content type to be checked for\n     * @return {String} File extension\n     */ detectExtension: (mimeType)=>mimeTypes.detectExtension(mimeType),\n    /**\n     * Returns content type for a file extension. If no suitable content types\n     * are found, 'application/octet-stream' is used as the default content type\n     *\n     * @param {String} extension Extension to be checked for\n     * @return {String} File extension\n     */ detectMimeType: (extension)=>mimeTypes.detectMimeType(extension),\n    /**\n     * Folds long lines, useful for folding header lines (afterSpace=false) and\n     * flowed text (afterSpace=true)\n     *\n     * @param {String} str String to be folded\n     * @param {Number} [lineLength=76] Maximum length of a line\n     * @param {Boolean} afterSpace If true, leave a space in th end of a line\n     * @return {String} String with folded lines\n     */ foldLines (str, lineLength, afterSpace) {\n        str = (str || \"\").toString();\n        lineLength = lineLength || 76;\n        let pos = 0, len = str.length, result = \"\", line, match;\n        while(pos < len){\n            line = str.substr(pos, lineLength);\n            if (line.length < lineLength) {\n                result += line;\n                break;\n            }\n            if (match = line.match(/^[^\\n\\r]*(\\r?\\n|\\r)/)) {\n                line = match[0];\n                result += line;\n                pos += line.length;\n                continue;\n            } else if ((match = line.match(/(\\s+)[^\\s]*$/)) && match[0].length - (afterSpace ? (match[1] || \"\").length : 0) < line.length) {\n                line = line.substr(0, line.length - (match[0].length - (afterSpace ? (match[1] || \"\").length : 0)));\n            } else if (match = str.substr(pos + line.length).match(/^[^\\s]+(\\s*)/)) {\n                line = line + match[0].substr(0, match[0].length - (!afterSpace ? (match[1] || \"\").length : 0));\n            }\n            result += line;\n            pos += line.length;\n            if (pos < len) {\n                result += \"\\r\\n\";\n            }\n        }\n        return result;\n    },\n    /**\n     * Splits a mime encoded string. Needed for dividing mime words into smaller chunks\n     *\n     * @param {String} str Mime encoded string to be split up\n     * @param {Number} maxlen Maximum length of characters for one part (minimum 12)\n     * @return {Array} Split string\n     */ splitMimeEncodedString: (str, maxlen)=>{\n        let curLine, match, chr, done, lines = [];\n        // require at least 12 symbols to fit possible 4 octet UTF-8 sequences\n        maxlen = Math.max(maxlen || 0, 12);\n        while(str.length){\n            curLine = str.substr(0, maxlen);\n            // move incomplete escaped char back to main\n            if (match = curLine.match(/[=][0-9A-F]?$/i)) {\n                curLine = curLine.substr(0, match.index);\n            }\n            done = false;\n            while(!done){\n                done = true;\n                // check if not middle of a unicode char sequence\n                if (match = str.substr(curLine.length).match(/^[=]([0-9A-F]{2})/i)) {\n                    chr = parseInt(match[1], 16);\n                    // invalid sequence, move one char back anc recheck\n                    if (chr < 0xc2 && chr > 0x7f) {\n                        curLine = curLine.substr(0, curLine.length - 3);\n                        done = false;\n                    }\n                }\n            }\n            if (curLine.length) {\n                lines.push(curLine);\n            }\n            str = str.substr(curLine.length);\n        }\n        return lines;\n    },\n    encodeURICharComponent: (chr)=>{\n        let res = \"\";\n        let ord = chr.charCodeAt(0).toString(16).toUpperCase();\n        if (ord.length % 2) {\n            ord = \"0\" + ord;\n        }\n        if (ord.length > 2) {\n            for(let i = 0, len = ord.length / 2; i < len; i++){\n                res += \"%\" + ord.substr(i, 2);\n            }\n        } else {\n            res += \"%\" + ord;\n        }\n        return res;\n    },\n    safeEncodeURIComponent (str) {\n        str = (str || \"\").toString();\n        try {\n            // might throw if we try to encode invalid sequences, eg. partial emoji\n            str = encodeURIComponent(str);\n        } catch (E) {\n            // should never run\n            return str.replace(/[^\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]+/g, \"\");\n        }\n        // ensure chars that are not handled by encodeURICompent are converted as well\n        return str.replace(/[\\x00-\\x1F *'()<>@,;:\\\\\"[\\]?=\\u007F-\\uFFFF]/g, (chr)=>this.encodeURICharComponent(chr));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-funcs/mime-types.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint quote-props: 0 */ \nconst path = __webpack_require__(/*! path */ \"path\");\nconst defaultMimeType = \"application/octet-stream\";\nconst defaultExtension = \"bin\";\nconst mimeTypes = new Map([\n    [\n        \"application/acad\",\n        \"dwg\"\n    ],\n    [\n        \"application/applixware\",\n        \"aw\"\n    ],\n    [\n        \"application/arj\",\n        \"arj\"\n    ],\n    [\n        \"application/atom+xml\",\n        \"xml\"\n    ],\n    [\n        \"application/atomcat+xml\",\n        \"atomcat\"\n    ],\n    [\n        \"application/atomsvc+xml\",\n        \"atomsvc\"\n    ],\n    [\n        \"application/base64\",\n        [\n            \"mm\",\n            \"mme\"\n        ]\n    ],\n    [\n        \"application/binhex\",\n        \"hqx\"\n    ],\n    [\n        \"application/binhex4\",\n        \"hqx\"\n    ],\n    [\n        \"application/book\",\n        [\n            \"book\",\n            \"boo\"\n        ]\n    ],\n    [\n        \"application/ccxml+xml,\",\n        \"ccxml\"\n    ],\n    [\n        \"application/cdf\",\n        \"cdf\"\n    ],\n    [\n        \"application/cdmi-capability\",\n        \"cdmia\"\n    ],\n    [\n        \"application/cdmi-container\",\n        \"cdmic\"\n    ],\n    [\n        \"application/cdmi-domain\",\n        \"cdmid\"\n    ],\n    [\n        \"application/cdmi-object\",\n        \"cdmio\"\n    ],\n    [\n        \"application/cdmi-queue\",\n        \"cdmiq\"\n    ],\n    [\n        \"application/clariscad\",\n        \"ccad\"\n    ],\n    [\n        \"application/commonground\",\n        \"dp\"\n    ],\n    [\n        \"application/cu-seeme\",\n        \"cu\"\n    ],\n    [\n        \"application/davmount+xml\",\n        \"davmount\"\n    ],\n    [\n        \"application/drafting\",\n        \"drw\"\n    ],\n    [\n        \"application/dsptype\",\n        \"tsp\"\n    ],\n    [\n        \"application/dssc+der\",\n        \"dssc\"\n    ],\n    [\n        \"application/dssc+xml\",\n        \"xdssc\"\n    ],\n    [\n        \"application/dxf\",\n        \"dxf\"\n    ],\n    [\n        \"application/ecmascript\",\n        [\n            \"js\",\n            \"es\"\n        ]\n    ],\n    [\n        \"application/emma+xml\",\n        \"emma\"\n    ],\n    [\n        \"application/envoy\",\n        \"evy\"\n    ],\n    [\n        \"application/epub+zip\",\n        \"epub\"\n    ],\n    [\n        \"application/excel\",\n        [\n            \"xls\",\n            \"xl\",\n            \"xla\",\n            \"xlb\",\n            \"xlc\",\n            \"xld\",\n            \"xlk\",\n            \"xll\",\n            \"xlm\",\n            \"xlt\",\n            \"xlv\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/exi\",\n        \"exi\"\n    ],\n    [\n        \"application/font-tdpfr\",\n        \"pfr\"\n    ],\n    [\n        \"application/fractals\",\n        \"fif\"\n    ],\n    [\n        \"application/freeloader\",\n        \"frl\"\n    ],\n    [\n        \"application/futuresplash\",\n        \"spl\"\n    ],\n    [\n        \"application/gnutar\",\n        \"tgz\"\n    ],\n    [\n        \"application/groupwise\",\n        \"vew\"\n    ],\n    [\n        \"application/hlp\",\n        \"hlp\"\n    ],\n    [\n        \"application/hta\",\n        \"hta\"\n    ],\n    [\n        \"application/hyperstudio\",\n        \"stk\"\n    ],\n    [\n        \"application/i-deas\",\n        \"unv\"\n    ],\n    [\n        \"application/iges\",\n        [\n            \"iges\",\n            \"igs\"\n        ]\n    ],\n    [\n        \"application/inf\",\n        \"inf\"\n    ],\n    [\n        \"application/internet-property-stream\",\n        \"acx\"\n    ],\n    [\n        \"application/ipfix\",\n        \"ipfix\"\n    ],\n    [\n        \"application/java\",\n        \"class\"\n    ],\n    [\n        \"application/java-archive\",\n        \"jar\"\n    ],\n    [\n        \"application/java-byte-code\",\n        \"class\"\n    ],\n    [\n        \"application/java-serialized-object\",\n        \"ser\"\n    ],\n    [\n        \"application/java-vm\",\n        \"class\"\n    ],\n    [\n        \"application/javascript\",\n        \"js\"\n    ],\n    [\n        \"application/json\",\n        \"json\"\n    ],\n    [\n        \"application/lha\",\n        \"lha\"\n    ],\n    [\n        \"application/lzx\",\n        \"lzx\"\n    ],\n    [\n        \"application/mac-binary\",\n        \"bin\"\n    ],\n    [\n        \"application/mac-binhex\",\n        \"hqx\"\n    ],\n    [\n        \"application/mac-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/mac-compactpro\",\n        \"cpt\"\n    ],\n    [\n        \"application/macbinary\",\n        \"bin\"\n    ],\n    [\n        \"application/mads+xml\",\n        \"mads\"\n    ],\n    [\n        \"application/marc\",\n        \"mrc\"\n    ],\n    [\n        \"application/marcxml+xml\",\n        \"mrcx\"\n    ],\n    [\n        \"application/mathematica\",\n        \"ma\"\n    ],\n    [\n        \"application/mathml+xml\",\n        \"mathml\"\n    ],\n    [\n        \"application/mbedlet\",\n        \"mbd\"\n    ],\n    [\n        \"application/mbox\",\n        \"mbox\"\n    ],\n    [\n        \"application/mcad\",\n        \"mcd\"\n    ],\n    [\n        \"application/mediaservercontrol+xml\",\n        \"mscml\"\n    ],\n    [\n        \"application/metalink4+xml\",\n        \"meta4\"\n    ],\n    [\n        \"application/mets+xml\",\n        \"mets\"\n    ],\n    [\n        \"application/mime\",\n        \"aps\"\n    ],\n    [\n        \"application/mods+xml\",\n        \"mods\"\n    ],\n    [\n        \"application/mp21\",\n        \"m21\"\n    ],\n    [\n        \"application/mp4\",\n        \"mp4\"\n    ],\n    [\n        \"application/mspowerpoint\",\n        [\n            \"ppt\",\n            \"pot\",\n            \"pps\",\n            \"ppz\"\n        ]\n    ],\n    [\n        \"application/msword\",\n        [\n            \"doc\",\n            \"dot\",\n            \"w6w\",\n            \"wiz\",\n            \"word\"\n        ]\n    ],\n    [\n        \"application/mswrite\",\n        \"wri\"\n    ],\n    [\n        \"application/mxf\",\n        \"mxf\"\n    ],\n    [\n        \"application/netmc\",\n        \"mcp\"\n    ],\n    [\n        \"application/octet-stream\",\n        [\n            \"*\"\n        ]\n    ],\n    [\n        \"application/oda\",\n        \"oda\"\n    ],\n    [\n        \"application/oebps-package+xml\",\n        \"opf\"\n    ],\n    [\n        \"application/ogg\",\n        \"ogx\"\n    ],\n    [\n        \"application/olescript\",\n        \"axs\"\n    ],\n    [\n        \"application/onenote\",\n        \"onetoc\"\n    ],\n    [\n        \"application/patch-ops-error+xml\",\n        \"xer\"\n    ],\n    [\n        \"application/pdf\",\n        \"pdf\"\n    ],\n    [\n        \"application/pgp-encrypted\",\n        \"asc\"\n    ],\n    [\n        \"application/pgp-signature\",\n        \"pgp\"\n    ],\n    [\n        \"application/pics-rules\",\n        \"prf\"\n    ],\n    [\n        \"application/pkcs-12\",\n        \"p12\"\n    ],\n    [\n        \"application/pkcs-crl\",\n        \"crl\"\n    ],\n    [\n        \"application/pkcs10\",\n        \"p10\"\n    ],\n    [\n        \"application/pkcs7-mime\",\n        [\n            \"p7c\",\n            \"p7m\"\n        ]\n    ],\n    [\n        \"application/pkcs7-signature\",\n        \"p7s\"\n    ],\n    [\n        \"application/pkcs8\",\n        \"p8\"\n    ],\n    [\n        \"application/pkix-attr-cert\",\n        \"ac\"\n    ],\n    [\n        \"application/pkix-cert\",\n        [\n            \"cer\",\n            \"crt\"\n        ]\n    ],\n    [\n        \"application/pkix-crl\",\n        \"crl\"\n    ],\n    [\n        \"application/pkix-pkipath\",\n        \"pkipath\"\n    ],\n    [\n        \"application/pkixcmp\",\n        \"pki\"\n    ],\n    [\n        \"application/plain\",\n        \"text\"\n    ],\n    [\n        \"application/pls+xml\",\n        \"pls\"\n    ],\n    [\n        \"application/postscript\",\n        [\n            \"ps\",\n            \"ai\",\n            \"eps\"\n        ]\n    ],\n    [\n        \"application/powerpoint\",\n        \"ppt\"\n    ],\n    [\n        \"application/pro_eng\",\n        [\n            \"part\",\n            \"prt\"\n        ]\n    ],\n    [\n        \"application/prs.cww\",\n        \"cww\"\n    ],\n    [\n        \"application/pskc+xml\",\n        \"pskcxml\"\n    ],\n    [\n        \"application/rdf+xml\",\n        \"rdf\"\n    ],\n    [\n        \"application/reginfo+xml\",\n        \"rif\"\n    ],\n    [\n        \"application/relax-ng-compact-syntax\",\n        \"rnc\"\n    ],\n    [\n        \"application/resource-lists+xml\",\n        \"rl\"\n    ],\n    [\n        \"application/resource-lists-diff+xml\",\n        \"rld\"\n    ],\n    [\n        \"application/ringing-tones\",\n        \"rng\"\n    ],\n    [\n        \"application/rls-services+xml\",\n        \"rs\"\n    ],\n    [\n        \"application/rsd+xml\",\n        \"rsd\"\n    ],\n    [\n        \"application/rss+xml\",\n        \"xml\"\n    ],\n    [\n        \"application/rtf\",\n        [\n            \"rtf\",\n            \"rtx\"\n        ]\n    ],\n    [\n        \"application/sbml+xml\",\n        \"sbml\"\n    ],\n    [\n        \"application/scvp-cv-request\",\n        \"scq\"\n    ],\n    [\n        \"application/scvp-cv-response\",\n        \"scs\"\n    ],\n    [\n        \"application/scvp-vp-request\",\n        \"spq\"\n    ],\n    [\n        \"application/scvp-vp-response\",\n        \"spp\"\n    ],\n    [\n        \"application/sdp\",\n        \"sdp\"\n    ],\n    [\n        \"application/sea\",\n        \"sea\"\n    ],\n    [\n        \"application/set\",\n        \"set\"\n    ],\n    [\n        \"application/set-payment-initiation\",\n        \"setpay\"\n    ],\n    [\n        \"application/set-registration-initiation\",\n        \"setreg\"\n    ],\n    [\n        \"application/shf+xml\",\n        \"shf\"\n    ],\n    [\n        \"application/sla\",\n        \"stl\"\n    ],\n    [\n        \"application/smil\",\n        [\n            \"smi\",\n            \"smil\"\n        ]\n    ],\n    [\n        \"application/smil+xml\",\n        \"smi\"\n    ],\n    [\n        \"application/solids\",\n        \"sol\"\n    ],\n    [\n        \"application/sounder\",\n        \"sdr\"\n    ],\n    [\n        \"application/sparql-query\",\n        \"rq\"\n    ],\n    [\n        \"application/sparql-results+xml\",\n        \"srx\"\n    ],\n    [\n        \"application/srgs\",\n        \"gram\"\n    ],\n    [\n        \"application/srgs+xml\",\n        \"grxml\"\n    ],\n    [\n        \"application/sru+xml\",\n        \"sru\"\n    ],\n    [\n        \"application/ssml+xml\",\n        \"ssml\"\n    ],\n    [\n        \"application/step\",\n        [\n            \"step\",\n            \"stp\"\n        ]\n    ],\n    [\n        \"application/streamingmedia\",\n        \"ssm\"\n    ],\n    [\n        \"application/tei+xml\",\n        \"tei\"\n    ],\n    [\n        \"application/thraud+xml\",\n        \"tfi\"\n    ],\n    [\n        \"application/timestamped-data\",\n        \"tsd\"\n    ],\n    [\n        \"application/toolbook\",\n        \"tbk\"\n    ],\n    [\n        \"application/vda\",\n        \"vda\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-large\",\n        \"plb\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-small\",\n        \"psb\"\n    ],\n    [\n        \"application/vnd.3gpp.pic-bw-var\",\n        \"pvb\"\n    ],\n    [\n        \"application/vnd.3gpp2.tcap\",\n        \"tcap\"\n    ],\n    [\n        \"application/vnd.3m.post-it-notes\",\n        \"pwn\"\n    ],\n    [\n        \"application/vnd.accpac.simply.aso\",\n        \"aso\"\n    ],\n    [\n        \"application/vnd.accpac.simply.imp\",\n        \"imp\"\n    ],\n    [\n        \"application/vnd.acucobol\",\n        \"acu\"\n    ],\n    [\n        \"application/vnd.acucorp\",\n        \"atc\"\n    ],\n    [\n        \"application/vnd.adobe.air-application-installer-package+zip\",\n        \"air\"\n    ],\n    [\n        \"application/vnd.adobe.fxp\",\n        \"fxp\"\n    ],\n    [\n        \"application/vnd.adobe.xdp+xml\",\n        \"xdp\"\n    ],\n    [\n        \"application/vnd.adobe.xfdf\",\n        \"xfdf\"\n    ],\n    [\n        \"application/vnd.ahead.space\",\n        \"ahead\"\n    ],\n    [\n        \"application/vnd.airzip.filesecure.azf\",\n        \"azf\"\n    ],\n    [\n        \"application/vnd.airzip.filesecure.azs\",\n        \"azs\"\n    ],\n    [\n        \"application/vnd.amazon.ebook\",\n        \"azw\"\n    ],\n    [\n        \"application/vnd.americandynamics.acc\",\n        \"acc\"\n    ],\n    [\n        \"application/vnd.amiga.ami\",\n        \"ami\"\n    ],\n    [\n        \"application/vnd.android.package-archive\",\n        \"apk\"\n    ],\n    [\n        \"application/vnd.anser-web-certificate-issue-initiation\",\n        \"cii\"\n    ],\n    [\n        \"application/vnd.anser-web-funds-transfer-initiation\",\n        \"fti\"\n    ],\n    [\n        \"application/vnd.antix.game-component\",\n        \"atx\"\n    ],\n    [\n        \"application/vnd.apple.installer+xml\",\n        \"mpkg\"\n    ],\n    [\n        \"application/vnd.apple.mpegurl\",\n        \"m3u8\"\n    ],\n    [\n        \"application/vnd.aristanetworks.swi\",\n        \"swi\"\n    ],\n    [\n        \"application/vnd.audiograph\",\n        \"aep\"\n    ],\n    [\n        \"application/vnd.blueice.multipass\",\n        \"mpm\"\n    ],\n    [\n        \"application/vnd.bmi\",\n        \"bmi\"\n    ],\n    [\n        \"application/vnd.businessobjects\",\n        \"rep\"\n    ],\n    [\n        \"application/vnd.chemdraw+xml\",\n        \"cdxml\"\n    ],\n    [\n        \"application/vnd.chipnuts.karaoke-mmd\",\n        \"mmd\"\n    ],\n    [\n        \"application/vnd.cinderella\",\n        \"cdy\"\n    ],\n    [\n        \"application/vnd.claymore\",\n        \"cla\"\n    ],\n    [\n        \"application/vnd.cloanto.rp9\",\n        \"rp9\"\n    ],\n    [\n        \"application/vnd.clonk.c4group\",\n        \"c4g\"\n    ],\n    [\n        \"application/vnd.cluetrust.cartomobile-config\",\n        \"c11amc\"\n    ],\n    [\n        \"application/vnd.cluetrust.cartomobile-config-pkg\",\n        \"c11amz\"\n    ],\n    [\n        \"application/vnd.commonspace\",\n        \"csp\"\n    ],\n    [\n        \"application/vnd.contact.cmsg\",\n        \"cdbcmsg\"\n    ],\n    [\n        \"application/vnd.cosmocaller\",\n        \"cmc\"\n    ],\n    [\n        \"application/vnd.crick.clicker\",\n        \"clkx\"\n    ],\n    [\n        \"application/vnd.crick.clicker.keyboard\",\n        \"clkk\"\n    ],\n    [\n        \"application/vnd.crick.clicker.palette\",\n        \"clkp\"\n    ],\n    [\n        \"application/vnd.crick.clicker.template\",\n        \"clkt\"\n    ],\n    [\n        \"application/vnd.crick.clicker.wordbank\",\n        \"clkw\"\n    ],\n    [\n        \"application/vnd.criticaltools.wbs+xml\",\n        \"wbs\"\n    ],\n    [\n        \"application/vnd.ctc-posml\",\n        \"pml\"\n    ],\n    [\n        \"application/vnd.cups-ppd\",\n        \"ppd\"\n    ],\n    [\n        \"application/vnd.curl.car\",\n        \"car\"\n    ],\n    [\n        \"application/vnd.curl.pcurl\",\n        \"pcurl\"\n    ],\n    [\n        \"application/vnd.data-vision.rdz\",\n        \"rdz\"\n    ],\n    [\n        \"application/vnd.denovo.fcselayout-link\",\n        \"fe_launch\"\n    ],\n    [\n        \"application/vnd.dna\",\n        \"dna\"\n    ],\n    [\n        \"application/vnd.dolby.mlp\",\n        \"mlp\"\n    ],\n    [\n        \"application/vnd.dpgraph\",\n        \"dpg\"\n    ],\n    [\n        \"application/vnd.dreamfactory\",\n        \"dfac\"\n    ],\n    [\n        \"application/vnd.dvb.ait\",\n        \"ait\"\n    ],\n    [\n        \"application/vnd.dvb.service\",\n        \"svc\"\n    ],\n    [\n        \"application/vnd.dynageo\",\n        \"geo\"\n    ],\n    [\n        \"application/vnd.ecowin.chart\",\n        \"mag\"\n    ],\n    [\n        \"application/vnd.enliven\",\n        \"nml\"\n    ],\n    [\n        \"application/vnd.epson.esf\",\n        \"esf\"\n    ],\n    [\n        \"application/vnd.epson.msf\",\n        \"msf\"\n    ],\n    [\n        \"application/vnd.epson.quickanime\",\n        \"qam\"\n    ],\n    [\n        \"application/vnd.epson.salt\",\n        \"slt\"\n    ],\n    [\n        \"application/vnd.epson.ssf\",\n        \"ssf\"\n    ],\n    [\n        \"application/vnd.eszigno3+xml\",\n        \"es3\"\n    ],\n    [\n        \"application/vnd.ezpix-album\",\n        \"ez2\"\n    ],\n    [\n        \"application/vnd.ezpix-package\",\n        \"ez3\"\n    ],\n    [\n        \"application/vnd.fdf\",\n        \"fdf\"\n    ],\n    [\n        \"application/vnd.fdsn.seed\",\n        \"seed\"\n    ],\n    [\n        \"application/vnd.flographit\",\n        \"gph\"\n    ],\n    [\n        \"application/vnd.fluxtime.clip\",\n        \"ftc\"\n    ],\n    [\n        \"application/vnd.framemaker\",\n        \"fm\"\n    ],\n    [\n        \"application/vnd.frogans.fnc\",\n        \"fnc\"\n    ],\n    [\n        \"application/vnd.frogans.ltf\",\n        \"ltf\"\n    ],\n    [\n        \"application/vnd.fsc.weblaunch\",\n        \"fsc\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys\",\n        \"oas\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys2\",\n        \"oa2\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasys3\",\n        \"oa3\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasysgp\",\n        \"fg5\"\n    ],\n    [\n        \"application/vnd.fujitsu.oasysprs\",\n        \"bh2\"\n    ],\n    [\n        \"application/vnd.fujixerox.ddd\",\n        \"ddd\"\n    ],\n    [\n        \"application/vnd.fujixerox.docuworks\",\n        \"xdw\"\n    ],\n    [\n        \"application/vnd.fujixerox.docuworks.binder\",\n        \"xbd\"\n    ],\n    [\n        \"application/vnd.fuzzysheet\",\n        \"fzs\"\n    ],\n    [\n        \"application/vnd.genomatix.tuxedo\",\n        \"txd\"\n    ],\n    [\n        \"application/vnd.geogebra.file\",\n        \"ggb\"\n    ],\n    [\n        \"application/vnd.geogebra.tool\",\n        \"ggt\"\n    ],\n    [\n        \"application/vnd.geometry-explorer\",\n        \"gex\"\n    ],\n    [\n        \"application/vnd.geonext\",\n        \"gxt\"\n    ],\n    [\n        \"application/vnd.geoplan\",\n        \"g2w\"\n    ],\n    [\n        \"application/vnd.geospace\",\n        \"g3w\"\n    ],\n    [\n        \"application/vnd.gmx\",\n        \"gmx\"\n    ],\n    [\n        \"application/vnd.google-earth.kml+xml\",\n        \"kml\"\n    ],\n    [\n        \"application/vnd.google-earth.kmz\",\n        \"kmz\"\n    ],\n    [\n        \"application/vnd.grafeq\",\n        \"gqf\"\n    ],\n    [\n        \"application/vnd.groove-account\",\n        \"gac\"\n    ],\n    [\n        \"application/vnd.groove-help\",\n        \"ghf\"\n    ],\n    [\n        \"application/vnd.groove-identity-message\",\n        \"gim\"\n    ],\n    [\n        \"application/vnd.groove-injector\",\n        \"grv\"\n    ],\n    [\n        \"application/vnd.groove-tool-message\",\n        \"gtm\"\n    ],\n    [\n        \"application/vnd.groove-tool-template\",\n        \"tpl\"\n    ],\n    [\n        \"application/vnd.groove-vcard\",\n        \"vcg\"\n    ],\n    [\n        \"application/vnd.hal+xml\",\n        \"hal\"\n    ],\n    [\n        \"application/vnd.handheld-entertainment+xml\",\n        \"zmm\"\n    ],\n    [\n        \"application/vnd.hbci\",\n        \"hbci\"\n    ],\n    [\n        \"application/vnd.hhe.lesson-player\",\n        \"les\"\n    ],\n    [\n        \"application/vnd.hp-hpgl\",\n        [\n            \"hgl\",\n            \"hpg\",\n            \"hpgl\"\n        ]\n    ],\n    [\n        \"application/vnd.hp-hpid\",\n        \"hpid\"\n    ],\n    [\n        \"application/vnd.hp-hps\",\n        \"hps\"\n    ],\n    [\n        \"application/vnd.hp-jlyt\",\n        \"jlt\"\n    ],\n    [\n        \"application/vnd.hp-pcl\",\n        \"pcl\"\n    ],\n    [\n        \"application/vnd.hp-pclxl\",\n        \"pclxl\"\n    ],\n    [\n        \"application/vnd.hydrostatix.sof-data\",\n        \"sfd-hdstx\"\n    ],\n    [\n        \"application/vnd.hzn-3d-crossword\",\n        \"x3d\"\n    ],\n    [\n        \"application/vnd.ibm.minipay\",\n        \"mpy\"\n    ],\n    [\n        \"application/vnd.ibm.modcap\",\n        \"afp\"\n    ],\n    [\n        \"application/vnd.ibm.rights-management\",\n        \"irm\"\n    ],\n    [\n        \"application/vnd.ibm.secure-container\",\n        \"sc\"\n    ],\n    [\n        \"application/vnd.iccprofile\",\n        \"icc\"\n    ],\n    [\n        \"application/vnd.igloader\",\n        \"igl\"\n    ],\n    [\n        \"application/vnd.immervision-ivp\",\n        \"ivp\"\n    ],\n    [\n        \"application/vnd.immervision-ivu\",\n        \"ivu\"\n    ],\n    [\n        \"application/vnd.insors.igm\",\n        \"igm\"\n    ],\n    [\n        \"application/vnd.intercon.formnet\",\n        \"xpw\"\n    ],\n    [\n        \"application/vnd.intergeo\",\n        \"i2g\"\n    ],\n    [\n        \"application/vnd.intu.qbo\",\n        \"qbo\"\n    ],\n    [\n        \"application/vnd.intu.qfx\",\n        \"qfx\"\n    ],\n    [\n        \"application/vnd.ipunplugged.rcprofile\",\n        \"rcprofile\"\n    ],\n    [\n        \"application/vnd.irepository.package+xml\",\n        \"irp\"\n    ],\n    [\n        \"application/vnd.is-xpr\",\n        \"xpr\"\n    ],\n    [\n        \"application/vnd.isac.fcs\",\n        \"fcs\"\n    ],\n    [\n        \"application/vnd.jam\",\n        \"jam\"\n    ],\n    [\n        \"application/vnd.jcp.javame.midlet-rms\",\n        \"rms\"\n    ],\n    [\n        \"application/vnd.jisp\",\n        \"jisp\"\n    ],\n    [\n        \"application/vnd.joost.joda-archive\",\n        \"joda\"\n    ],\n    [\n        \"application/vnd.kahootz\",\n        \"ktz\"\n    ],\n    [\n        \"application/vnd.kde.karbon\",\n        \"karbon\"\n    ],\n    [\n        \"application/vnd.kde.kchart\",\n        \"chrt\"\n    ],\n    [\n        \"application/vnd.kde.kformula\",\n        \"kfo\"\n    ],\n    [\n        \"application/vnd.kde.kivio\",\n        \"flw\"\n    ],\n    [\n        \"application/vnd.kde.kontour\",\n        \"kon\"\n    ],\n    [\n        \"application/vnd.kde.kpresenter\",\n        \"kpr\"\n    ],\n    [\n        \"application/vnd.kde.kspread\",\n        \"ksp\"\n    ],\n    [\n        \"application/vnd.kde.kword\",\n        \"kwd\"\n    ],\n    [\n        \"application/vnd.kenameaapp\",\n        \"htke\"\n    ],\n    [\n        \"application/vnd.kidspiration\",\n        \"kia\"\n    ],\n    [\n        \"application/vnd.kinar\",\n        \"kne\"\n    ],\n    [\n        \"application/vnd.koan\",\n        \"skp\"\n    ],\n    [\n        \"application/vnd.kodak-descriptor\",\n        \"sse\"\n    ],\n    [\n        \"application/vnd.las.las+xml\",\n        \"lasxml\"\n    ],\n    [\n        \"application/vnd.llamagraphics.life-balance.desktop\",\n        \"lbd\"\n    ],\n    [\n        \"application/vnd.llamagraphics.life-balance.exchange+xml\",\n        \"lbe\"\n    ],\n    [\n        \"application/vnd.lotus-1-2-3\",\n        \"123\"\n    ],\n    [\n        \"application/vnd.lotus-approach\",\n        \"apr\"\n    ],\n    [\n        \"application/vnd.lotus-freelance\",\n        \"pre\"\n    ],\n    [\n        \"application/vnd.lotus-notes\",\n        \"nsf\"\n    ],\n    [\n        \"application/vnd.lotus-organizer\",\n        \"org\"\n    ],\n    [\n        \"application/vnd.lotus-screencam\",\n        \"scm\"\n    ],\n    [\n        \"application/vnd.lotus-wordpro\",\n        \"lwp\"\n    ],\n    [\n        \"application/vnd.macports.portpkg\",\n        \"portpkg\"\n    ],\n    [\n        \"application/vnd.mcd\",\n        \"mcd\"\n    ],\n    [\n        \"application/vnd.medcalcdata\",\n        \"mc1\"\n    ],\n    [\n        \"application/vnd.mediastation.cdkey\",\n        \"cdkey\"\n    ],\n    [\n        \"application/vnd.mfer\",\n        \"mwf\"\n    ],\n    [\n        \"application/vnd.mfmp\",\n        \"mfm\"\n    ],\n    [\n        \"application/vnd.micrografx.flo\",\n        \"flo\"\n    ],\n    [\n        \"application/vnd.micrografx.igx\",\n        \"igx\"\n    ],\n    [\n        \"application/vnd.mif\",\n        \"mif\"\n    ],\n    [\n        \"application/vnd.mobius.daf\",\n        \"daf\"\n    ],\n    [\n        \"application/vnd.mobius.dis\",\n        \"dis\"\n    ],\n    [\n        \"application/vnd.mobius.mbk\",\n        \"mbk\"\n    ],\n    [\n        \"application/vnd.mobius.mqy\",\n        \"mqy\"\n    ],\n    [\n        \"application/vnd.mobius.msl\",\n        \"msl\"\n    ],\n    [\n        \"application/vnd.mobius.plc\",\n        \"plc\"\n    ],\n    [\n        \"application/vnd.mobius.txf\",\n        \"txf\"\n    ],\n    [\n        \"application/vnd.mophun.application\",\n        \"mpn\"\n    ],\n    [\n        \"application/vnd.mophun.certificate\",\n        \"mpc\"\n    ],\n    [\n        \"application/vnd.mozilla.xul+xml\",\n        \"xul\"\n    ],\n    [\n        \"application/vnd.ms-artgalry\",\n        \"cil\"\n    ],\n    [\n        \"application/vnd.ms-cab-compressed\",\n        \"cab\"\n    ],\n    [\n        \"application/vnd.ms-excel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlc\",\n            \"xlm\",\n            \"xlt\",\n            \"xlw\",\n            \"xlb\",\n            \"xll\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-excel.addin.macroenabled.12\",\n        \"xlam\"\n    ],\n    [\n        \"application/vnd.ms-excel.sheet.binary.macroenabled.12\",\n        \"xlsb\"\n    ],\n    [\n        \"application/vnd.ms-excel.sheet.macroenabled.12\",\n        \"xlsm\"\n    ],\n    [\n        \"application/vnd.ms-excel.template.macroenabled.12\",\n        \"xltm\"\n    ],\n    [\n        \"application/vnd.ms-fontobject\",\n        \"eot\"\n    ],\n    [\n        \"application/vnd.ms-htmlhelp\",\n        \"chm\"\n    ],\n    [\n        \"application/vnd.ms-ims\",\n        \"ims\"\n    ],\n    [\n        \"application/vnd.ms-lrm\",\n        \"lrm\"\n    ],\n    [\n        \"application/vnd.ms-officetheme\",\n        \"thmx\"\n    ],\n    [\n        \"application/vnd.ms-outlook\",\n        \"msg\"\n    ],\n    [\n        \"application/vnd.ms-pki.certstore\",\n        \"sst\"\n    ],\n    [\n        \"application/vnd.ms-pki.pko\",\n        \"pko\"\n    ],\n    [\n        \"application/vnd.ms-pki.seccat\",\n        \"cat\"\n    ],\n    [\n        \"application/vnd.ms-pki.stl\",\n        \"stl\"\n    ],\n    [\n        \"application/vnd.ms-pkicertstore\",\n        \"sst\"\n    ],\n    [\n        \"application/vnd.ms-pkiseccat\",\n        \"cat\"\n    ],\n    [\n        \"application/vnd.ms-pkistl\",\n        \"stl\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint\",\n        [\n            \"ppt\",\n            \"pot\",\n            \"pps\",\n            \"ppa\",\n            \"pwz\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-powerpoint.addin.macroenabled.12\",\n        \"ppam\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.presentation.macroenabled.12\",\n        \"pptm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.slide.macroenabled.12\",\n        \"sldm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\",\n        \"ppsm\"\n    ],\n    [\n        \"application/vnd.ms-powerpoint.template.macroenabled.12\",\n        \"potm\"\n    ],\n    [\n        \"application/vnd.ms-project\",\n        \"mpp\"\n    ],\n    [\n        \"application/vnd.ms-word.document.macroenabled.12\",\n        \"docm\"\n    ],\n    [\n        \"application/vnd.ms-word.template.macroenabled.12\",\n        \"dotm\"\n    ],\n    [\n        \"application/vnd.ms-works\",\n        [\n            \"wks\",\n            \"wcm\",\n            \"wdb\",\n            \"wps\"\n        ]\n    ],\n    [\n        \"application/vnd.ms-wpl\",\n        \"wpl\"\n    ],\n    [\n        \"application/vnd.ms-xpsdocument\",\n        \"xps\"\n    ],\n    [\n        \"application/vnd.mseq\",\n        \"mseq\"\n    ],\n    [\n        \"application/vnd.musician\",\n        \"mus\"\n    ],\n    [\n        \"application/vnd.muvee.style\",\n        \"msty\"\n    ],\n    [\n        \"application/vnd.neurolanguage.nlu\",\n        \"nlu\"\n    ],\n    [\n        \"application/vnd.noblenet-directory\",\n        \"nnd\"\n    ],\n    [\n        \"application/vnd.noblenet-sealer\",\n        \"nns\"\n    ],\n    [\n        \"application/vnd.noblenet-web\",\n        \"nnw\"\n    ],\n    [\n        \"application/vnd.nokia.configuration-message\",\n        \"ncm\"\n    ],\n    [\n        \"application/vnd.nokia.n-gage.data\",\n        \"ngdat\"\n    ],\n    [\n        \"application/vnd.nokia.n-gage.symbian.install\",\n        \"n-gage\"\n    ],\n    [\n        \"application/vnd.nokia.radio-preset\",\n        \"rpst\"\n    ],\n    [\n        \"application/vnd.nokia.radio-presets\",\n        \"rpss\"\n    ],\n    [\n        \"application/vnd.nokia.ringing-tone\",\n        \"rng\"\n    ],\n    [\n        \"application/vnd.novadigm.edm\",\n        \"edm\"\n    ],\n    [\n        \"application/vnd.novadigm.edx\",\n        \"edx\"\n    ],\n    [\n        \"application/vnd.novadigm.ext\",\n        \"ext\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.chart\",\n        \"odc\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.chart-template\",\n        \"otc\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.database\",\n        \"odb\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.formula\",\n        \"odf\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.formula-template\",\n        \"odft\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.graphics\",\n        \"odg\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.graphics-template\",\n        \"otg\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.image\",\n        \"odi\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.image-template\",\n        \"oti\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.presentation\",\n        \"odp\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.presentation-template\",\n        \"otp\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.spreadsheet\",\n        \"ods\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.spreadsheet-template\",\n        \"ots\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text\",\n        \"odt\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-master\",\n        \"odm\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-template\",\n        \"ott\"\n    ],\n    [\n        \"application/vnd.oasis.opendocument.text-web\",\n        \"oth\"\n    ],\n    [\n        \"application/vnd.olpc-sugar\",\n        \"xo\"\n    ],\n    [\n        \"application/vnd.oma.dd2+xml\",\n        \"dd2\"\n    ],\n    [\n        \"application/vnd.openofficeorg.extension\",\n        \"oxt\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n        \"pptx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.slide\",\n        \"sldx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\",\n        \"ppsx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.presentationml.template\",\n        \"potx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        \"xlsx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\",\n        \"xltx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n        \"docx\"\n    ],\n    [\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\",\n        \"dotx\"\n    ],\n    [\n        \"application/vnd.osgeo.mapguide.package\",\n        \"mgp\"\n    ],\n    [\n        \"application/vnd.osgi.dp\",\n        \"dp\"\n    ],\n    [\n        \"application/vnd.palm\",\n        \"pdb\"\n    ],\n    [\n        \"application/vnd.pawaafile\",\n        \"paw\"\n    ],\n    [\n        \"application/vnd.pg.format\",\n        \"str\"\n    ],\n    [\n        \"application/vnd.pg.osasli\",\n        \"ei6\"\n    ],\n    [\n        \"application/vnd.picsel\",\n        \"efif\"\n    ],\n    [\n        \"application/vnd.pmi.widget\",\n        \"wg\"\n    ],\n    [\n        \"application/vnd.pocketlearn\",\n        \"plf\"\n    ],\n    [\n        \"application/vnd.powerbuilder6\",\n        \"pbd\"\n    ],\n    [\n        \"application/vnd.previewsystems.box\",\n        \"box\"\n    ],\n    [\n        \"application/vnd.proteus.magazine\",\n        \"mgz\"\n    ],\n    [\n        \"application/vnd.publishare-delta-tree\",\n        \"qps\"\n    ],\n    [\n        \"application/vnd.pvi.ptid1\",\n        \"ptid\"\n    ],\n    [\n        \"application/vnd.quark.quarkxpress\",\n        \"qxd\"\n    ],\n    [\n        \"application/vnd.realvnc.bed\",\n        \"bed\"\n    ],\n    [\n        \"application/vnd.recordare.musicxml\",\n        \"mxl\"\n    ],\n    [\n        \"application/vnd.recordare.musicxml+xml\",\n        \"musicxml\"\n    ],\n    [\n        \"application/vnd.rig.cryptonote\",\n        \"cryptonote\"\n    ],\n    [\n        \"application/vnd.rim.cod\",\n        \"cod\"\n    ],\n    [\n        \"application/vnd.rn-realmedia\",\n        \"rm\"\n    ],\n    [\n        \"application/vnd.rn-realplayer\",\n        \"rnx\"\n    ],\n    [\n        \"application/vnd.route66.link66+xml\",\n        \"link66\"\n    ],\n    [\n        \"application/vnd.sailingtracker.track\",\n        \"st\"\n    ],\n    [\n        \"application/vnd.seemail\",\n        \"see\"\n    ],\n    [\n        \"application/vnd.sema\",\n        \"sema\"\n    ],\n    [\n        \"application/vnd.semd\",\n        \"semd\"\n    ],\n    [\n        \"application/vnd.semf\",\n        \"semf\"\n    ],\n    [\n        \"application/vnd.shana.informed.formdata\",\n        \"ifm\"\n    ],\n    [\n        \"application/vnd.shana.informed.formtemplate\",\n        \"itp\"\n    ],\n    [\n        \"application/vnd.shana.informed.interchange\",\n        \"iif\"\n    ],\n    [\n        \"application/vnd.shana.informed.package\",\n        \"ipk\"\n    ],\n    [\n        \"application/vnd.simtech-mindmapper\",\n        \"twd\"\n    ],\n    [\n        \"application/vnd.smaf\",\n        \"mmf\"\n    ],\n    [\n        \"application/vnd.smart.teacher\",\n        \"teacher\"\n    ],\n    [\n        \"application/vnd.solent.sdkm+xml\",\n        \"sdkm\"\n    ],\n    [\n        \"application/vnd.spotfire.dxp\",\n        \"dxp\"\n    ],\n    [\n        \"application/vnd.spotfire.sfs\",\n        \"sfs\"\n    ],\n    [\n        \"application/vnd.stardivision.calc\",\n        \"sdc\"\n    ],\n    [\n        \"application/vnd.stardivision.draw\",\n        \"sda\"\n    ],\n    [\n        \"application/vnd.stardivision.impress\",\n        \"sdd\"\n    ],\n    [\n        \"application/vnd.stardivision.math\",\n        \"smf\"\n    ],\n    [\n        \"application/vnd.stardivision.writer\",\n        \"sdw\"\n    ],\n    [\n        \"application/vnd.stardivision.writer-global\",\n        \"sgl\"\n    ],\n    [\n        \"application/vnd.stepmania.stepchart\",\n        \"sm\"\n    ],\n    [\n        \"application/vnd.sun.xml.calc\",\n        \"sxc\"\n    ],\n    [\n        \"application/vnd.sun.xml.calc.template\",\n        \"stc\"\n    ],\n    [\n        \"application/vnd.sun.xml.draw\",\n        \"sxd\"\n    ],\n    [\n        \"application/vnd.sun.xml.draw.template\",\n        \"std\"\n    ],\n    [\n        \"application/vnd.sun.xml.impress\",\n        \"sxi\"\n    ],\n    [\n        \"application/vnd.sun.xml.impress.template\",\n        \"sti\"\n    ],\n    [\n        \"application/vnd.sun.xml.math\",\n        \"sxm\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer\",\n        \"sxw\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer.global\",\n        \"sxg\"\n    ],\n    [\n        \"application/vnd.sun.xml.writer.template\",\n        \"stw\"\n    ],\n    [\n        \"application/vnd.sus-calendar\",\n        \"sus\"\n    ],\n    [\n        \"application/vnd.svd\",\n        \"svd\"\n    ],\n    [\n        \"application/vnd.symbian.install\",\n        \"sis\"\n    ],\n    [\n        \"application/vnd.syncml+xml\",\n        \"xsm\"\n    ],\n    [\n        \"application/vnd.syncml.dm+wbxml\",\n        \"bdm\"\n    ],\n    [\n        \"application/vnd.syncml.dm+xml\",\n        \"xdm\"\n    ],\n    [\n        \"application/vnd.tao.intent-module-archive\",\n        \"tao\"\n    ],\n    [\n        \"application/vnd.tmobile-livetv\",\n        \"tmo\"\n    ],\n    [\n        \"application/vnd.trid.tpt\",\n        \"tpt\"\n    ],\n    [\n        \"application/vnd.triscape.mxs\",\n        \"mxs\"\n    ],\n    [\n        \"application/vnd.trueapp\",\n        \"tra\"\n    ],\n    [\n        \"application/vnd.ufdl\",\n        \"ufd\"\n    ],\n    [\n        \"application/vnd.uiq.theme\",\n        \"utz\"\n    ],\n    [\n        \"application/vnd.umajin\",\n        \"umj\"\n    ],\n    [\n        \"application/vnd.unity\",\n        \"unityweb\"\n    ],\n    [\n        \"application/vnd.uoml+xml\",\n        \"uoml\"\n    ],\n    [\n        \"application/vnd.vcx\",\n        \"vcx\"\n    ],\n    [\n        \"application/vnd.visio\",\n        \"vsd\"\n    ],\n    [\n        \"application/vnd.visionary\",\n        \"vis\"\n    ],\n    [\n        \"application/vnd.vsf\",\n        \"vsf\"\n    ],\n    [\n        \"application/vnd.wap.wbxml\",\n        \"wbxml\"\n    ],\n    [\n        \"application/vnd.wap.wmlc\",\n        \"wmlc\"\n    ],\n    [\n        \"application/vnd.wap.wmlscriptc\",\n        \"wmlsc\"\n    ],\n    [\n        \"application/vnd.webturbo\",\n        \"wtb\"\n    ],\n    [\n        \"application/vnd.wolfram.player\",\n        \"nbp\"\n    ],\n    [\n        \"application/vnd.wordperfect\",\n        \"wpd\"\n    ],\n    [\n        \"application/vnd.wqd\",\n        \"wqd\"\n    ],\n    [\n        \"application/vnd.wt.stf\",\n        \"stf\"\n    ],\n    [\n        \"application/vnd.xara\",\n        [\n            \"web\",\n            \"xar\"\n        ]\n    ],\n    [\n        \"application/vnd.xfdl\",\n        \"xfdl\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-dic\",\n        \"hvd\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-script\",\n        \"hvs\"\n    ],\n    [\n        \"application/vnd.yamaha.hv-voice\",\n        \"hvp\"\n    ],\n    [\n        \"application/vnd.yamaha.openscoreformat\",\n        \"osf\"\n    ],\n    [\n        \"application/vnd.yamaha.openscoreformat.osfpvg+xml\",\n        \"osfpvg\"\n    ],\n    [\n        \"application/vnd.yamaha.smaf-audio\",\n        \"saf\"\n    ],\n    [\n        \"application/vnd.yamaha.smaf-phrase\",\n        \"spf\"\n    ],\n    [\n        \"application/vnd.yellowriver-custom-menu\",\n        \"cmp\"\n    ],\n    [\n        \"application/vnd.zul\",\n        \"zir\"\n    ],\n    [\n        \"application/vnd.zzazz.deck+xml\",\n        \"zaz\"\n    ],\n    [\n        \"application/vocaltec-media-desc\",\n        \"vmd\"\n    ],\n    [\n        \"application/vocaltec-media-file\",\n        \"vmf\"\n    ],\n    [\n        \"application/voicexml+xml\",\n        \"vxml\"\n    ],\n    [\n        \"application/widget\",\n        \"wgt\"\n    ],\n    [\n        \"application/winhlp\",\n        \"hlp\"\n    ],\n    [\n        \"application/wordperfect\",\n        [\n            \"wp\",\n            \"wp5\",\n            \"wp6\",\n            \"wpd\"\n        ]\n    ],\n    [\n        \"application/wordperfect6.0\",\n        [\n            \"w60\",\n            \"wp5\"\n        ]\n    ],\n    [\n        \"application/wordperfect6.1\",\n        \"w61\"\n    ],\n    [\n        \"application/wsdl+xml\",\n        \"wsdl\"\n    ],\n    [\n        \"application/wspolicy+xml\",\n        \"wspolicy\"\n    ],\n    [\n        \"application/x-123\",\n        \"wk1\"\n    ],\n    [\n        \"application/x-7z-compressed\",\n        \"7z\"\n    ],\n    [\n        \"application/x-abiword\",\n        \"abw\"\n    ],\n    [\n        \"application/x-ace-compressed\",\n        \"ace\"\n    ],\n    [\n        \"application/x-aim\",\n        \"aim\"\n    ],\n    [\n        \"application/x-authorware-bin\",\n        \"aab\"\n    ],\n    [\n        \"application/x-authorware-map\",\n        \"aam\"\n    ],\n    [\n        \"application/x-authorware-seg\",\n        \"aas\"\n    ],\n    [\n        \"application/x-bcpio\",\n        \"bcpio\"\n    ],\n    [\n        \"application/x-binary\",\n        \"bin\"\n    ],\n    [\n        \"application/x-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/x-bittorrent\",\n        \"torrent\"\n    ],\n    [\n        \"application/x-bsh\",\n        [\n            \"bsh\",\n            \"sh\",\n            \"shar\"\n        ]\n    ],\n    [\n        \"application/x-bytecode.elisp\",\n        \"elc\"\n    ],\n    [\n        \"application/x-bytecode.python\",\n        \"pyc\"\n    ],\n    [\n        \"application/x-bzip\",\n        \"bz\"\n    ],\n    [\n        \"application/x-bzip2\",\n        [\n            \"boz\",\n            \"bz2\"\n        ]\n    ],\n    [\n        \"application/x-cdf\",\n        \"cdf\"\n    ],\n    [\n        \"application/x-cdlink\",\n        \"vcd\"\n    ],\n    [\n        \"application/x-chat\",\n        [\n            \"cha\",\n            \"chat\"\n        ]\n    ],\n    [\n        \"application/x-chess-pgn\",\n        \"pgn\"\n    ],\n    [\n        \"application/x-cmu-raster\",\n        \"ras\"\n    ],\n    [\n        \"application/x-cocoa\",\n        \"cco\"\n    ],\n    [\n        \"application/x-compactpro\",\n        \"cpt\"\n    ],\n    [\n        \"application/x-compress\",\n        \"z\"\n    ],\n    [\n        \"application/x-compressed\",\n        [\n            \"tgz\",\n            \"gz\",\n            \"z\",\n            \"zip\"\n        ]\n    ],\n    [\n        \"application/x-conference\",\n        \"nsc\"\n    ],\n    [\n        \"application/x-cpio\",\n        \"cpio\"\n    ],\n    [\n        \"application/x-cpt\",\n        \"cpt\"\n    ],\n    [\n        \"application/x-csh\",\n        \"csh\"\n    ],\n    [\n        \"application/x-debian-package\",\n        \"deb\"\n    ],\n    [\n        \"application/x-deepv\",\n        \"deepv\"\n    ],\n    [\n        \"application/x-director\",\n        [\n            \"dir\",\n            \"dcr\",\n            \"dxr\"\n        ]\n    ],\n    [\n        \"application/x-doom\",\n        \"wad\"\n    ],\n    [\n        \"application/x-dtbncx+xml\",\n        \"ncx\"\n    ],\n    [\n        \"application/x-dtbook+xml\",\n        \"dtb\"\n    ],\n    [\n        \"application/x-dtbresource+xml\",\n        \"res\"\n    ],\n    [\n        \"application/x-dvi\",\n        \"dvi\"\n    ],\n    [\n        \"application/x-elc\",\n        \"elc\"\n    ],\n    [\n        \"application/x-envoy\",\n        [\n            \"env\",\n            \"evy\"\n        ]\n    ],\n    [\n        \"application/x-esrehber\",\n        \"es\"\n    ],\n    [\n        \"application/x-excel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlb\",\n            \"xlc\",\n            \"xld\",\n            \"xlk\",\n            \"xll\",\n            \"xlm\",\n            \"xlt\",\n            \"xlv\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/x-font-bdf\",\n        \"bdf\"\n    ],\n    [\n        \"application/x-font-ghostscript\",\n        \"gsf\"\n    ],\n    [\n        \"application/x-font-linux-psf\",\n        \"psf\"\n    ],\n    [\n        \"application/x-font-otf\",\n        \"otf\"\n    ],\n    [\n        \"application/x-font-pcf\",\n        \"pcf\"\n    ],\n    [\n        \"application/x-font-snf\",\n        \"snf\"\n    ],\n    [\n        \"application/x-font-ttf\",\n        \"ttf\"\n    ],\n    [\n        \"application/x-font-type1\",\n        \"pfa\"\n    ],\n    [\n        \"application/x-font-woff\",\n        \"woff\"\n    ],\n    [\n        \"application/x-frame\",\n        \"mif\"\n    ],\n    [\n        \"application/x-freelance\",\n        \"pre\"\n    ],\n    [\n        \"application/x-futuresplash\",\n        \"spl\"\n    ],\n    [\n        \"application/x-gnumeric\",\n        \"gnumeric\"\n    ],\n    [\n        \"application/x-gsp\",\n        \"gsp\"\n    ],\n    [\n        \"application/x-gss\",\n        \"gss\"\n    ],\n    [\n        \"application/x-gtar\",\n        \"gtar\"\n    ],\n    [\n        \"application/x-gzip\",\n        [\n            \"gz\",\n            \"gzip\"\n        ]\n    ],\n    [\n        \"application/x-hdf\",\n        \"hdf\"\n    ],\n    [\n        \"application/x-helpfile\",\n        [\n            \"help\",\n            \"hlp\"\n        ]\n    ],\n    [\n        \"application/x-httpd-imap\",\n        \"imap\"\n    ],\n    [\n        \"application/x-ima\",\n        \"ima\"\n    ],\n    [\n        \"application/x-internet-signup\",\n        [\n            \"ins\",\n            \"isp\"\n        ]\n    ],\n    [\n        \"application/x-internett-signup\",\n        \"ins\"\n    ],\n    [\n        \"application/x-inventor\",\n        \"iv\"\n    ],\n    [\n        \"application/x-ip2\",\n        \"ip\"\n    ],\n    [\n        \"application/x-iphone\",\n        \"iii\"\n    ],\n    [\n        \"application/x-java-class\",\n        \"class\"\n    ],\n    [\n        \"application/x-java-commerce\",\n        \"jcm\"\n    ],\n    [\n        \"application/x-java-jnlp-file\",\n        \"jnlp\"\n    ],\n    [\n        \"application/x-javascript\",\n        \"js\"\n    ],\n    [\n        \"application/x-koan\",\n        [\n            \"skd\",\n            \"skm\",\n            \"skp\",\n            \"skt\"\n        ]\n    ],\n    [\n        \"application/x-ksh\",\n        \"ksh\"\n    ],\n    [\n        \"application/x-latex\",\n        [\n            \"latex\",\n            \"ltx\"\n        ]\n    ],\n    [\n        \"application/x-lha\",\n        \"lha\"\n    ],\n    [\n        \"application/x-lisp\",\n        \"lsp\"\n    ],\n    [\n        \"application/x-livescreen\",\n        \"ivy\"\n    ],\n    [\n        \"application/x-lotus\",\n        \"wq1\"\n    ],\n    [\n        \"application/x-lotusscreencam\",\n        \"scm\"\n    ],\n    [\n        \"application/x-lzh\",\n        \"lzh\"\n    ],\n    [\n        \"application/x-lzx\",\n        \"lzx\"\n    ],\n    [\n        \"application/x-mac-binhex40\",\n        \"hqx\"\n    ],\n    [\n        \"application/x-macbinary\",\n        \"bin\"\n    ],\n    [\n        \"application/x-magic-cap-package-1.0\",\n        \"mc$\"\n    ],\n    [\n        \"application/x-mathcad\",\n        \"mcd\"\n    ],\n    [\n        \"application/x-meme\",\n        \"mm\"\n    ],\n    [\n        \"application/x-midi\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"application/x-mif\",\n        \"mif\"\n    ],\n    [\n        \"application/x-mix-transfer\",\n        \"nix\"\n    ],\n    [\n        \"application/x-mobipocket-ebook\",\n        \"prc\"\n    ],\n    [\n        \"application/x-mplayer2\",\n        \"asx\"\n    ],\n    [\n        \"application/x-ms-application\",\n        \"application\"\n    ],\n    [\n        \"application/x-ms-wmd\",\n        \"wmd\"\n    ],\n    [\n        \"application/x-ms-wmz\",\n        \"wmz\"\n    ],\n    [\n        \"application/x-ms-xbap\",\n        \"xbap\"\n    ],\n    [\n        \"application/x-msaccess\",\n        \"mdb\"\n    ],\n    [\n        \"application/x-msbinder\",\n        \"obd\"\n    ],\n    [\n        \"application/x-mscardfile\",\n        \"crd\"\n    ],\n    [\n        \"application/x-msclip\",\n        \"clp\"\n    ],\n    [\n        \"application/x-msdownload\",\n        [\n            \"exe\",\n            \"dll\"\n        ]\n    ],\n    [\n        \"application/x-msexcel\",\n        [\n            \"xls\",\n            \"xla\",\n            \"xlw\"\n        ]\n    ],\n    [\n        \"application/x-msmediaview\",\n        [\n            \"mvb\",\n            \"m13\",\n            \"m14\"\n        ]\n    ],\n    [\n        \"application/x-msmetafile\",\n        \"wmf\"\n    ],\n    [\n        \"application/x-msmoney\",\n        \"mny\"\n    ],\n    [\n        \"application/x-mspowerpoint\",\n        \"ppt\"\n    ],\n    [\n        \"application/x-mspublisher\",\n        \"pub\"\n    ],\n    [\n        \"application/x-msschedule\",\n        \"scd\"\n    ],\n    [\n        \"application/x-msterminal\",\n        \"trm\"\n    ],\n    [\n        \"application/x-mswrite\",\n        \"wri\"\n    ],\n    [\n        \"application/x-navi-animation\",\n        \"ani\"\n    ],\n    [\n        \"application/x-navidoc\",\n        \"nvd\"\n    ],\n    [\n        \"application/x-navimap\",\n        \"map\"\n    ],\n    [\n        \"application/x-navistyle\",\n        \"stl\"\n    ],\n    [\n        \"application/x-netcdf\",\n        [\n            \"cdf\",\n            \"nc\"\n        ]\n    ],\n    [\n        \"application/x-newton-compatible-pkg\",\n        \"pkg\"\n    ],\n    [\n        \"application/x-nokia-9000-communicator-add-on-software\",\n        \"aos\"\n    ],\n    [\n        \"application/x-omc\",\n        \"omc\"\n    ],\n    [\n        \"application/x-omcdatamaker\",\n        \"omcd\"\n    ],\n    [\n        \"application/x-omcregerator\",\n        \"omcr\"\n    ],\n    [\n        \"application/x-pagemaker\",\n        [\n            \"pm4\",\n            \"pm5\"\n        ]\n    ],\n    [\n        \"application/x-pcl\",\n        \"pcl\"\n    ],\n    [\n        \"application/x-perfmon\",\n        [\n            \"pma\",\n            \"pmc\",\n            \"pml\",\n            \"pmr\",\n            \"pmw\"\n        ]\n    ],\n    [\n        \"application/x-pixclscript\",\n        \"plx\"\n    ],\n    [\n        \"application/x-pkcs10\",\n        \"p10\"\n    ],\n    [\n        \"application/x-pkcs12\",\n        [\n            \"p12\",\n            \"pfx\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-certificates\",\n        [\n            \"p7b\",\n            \"spc\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-certreqresp\",\n        \"p7r\"\n    ],\n    [\n        \"application/x-pkcs7-mime\",\n        [\n            \"p7m\",\n            \"p7c\"\n        ]\n    ],\n    [\n        \"application/x-pkcs7-signature\",\n        [\n            \"p7s\",\n            \"p7a\"\n        ]\n    ],\n    [\n        \"application/x-pointplus\",\n        \"css\"\n    ],\n    [\n        \"application/x-portable-anymap\",\n        \"pnm\"\n    ],\n    [\n        \"application/x-project\",\n        [\n            \"mpc\",\n            \"mpt\",\n            \"mpv\",\n            \"mpx\"\n        ]\n    ],\n    [\n        \"application/x-qpro\",\n        \"wb1\"\n    ],\n    [\n        \"application/x-rar-compressed\",\n        \"rar\"\n    ],\n    [\n        \"application/x-rtf\",\n        \"rtf\"\n    ],\n    [\n        \"application/x-sdp\",\n        \"sdp\"\n    ],\n    [\n        \"application/x-sea\",\n        \"sea\"\n    ],\n    [\n        \"application/x-seelogo\",\n        \"sl\"\n    ],\n    [\n        \"application/x-sh\",\n        \"sh\"\n    ],\n    [\n        \"application/x-shar\",\n        [\n            \"shar\",\n            \"sh\"\n        ]\n    ],\n    [\n        \"application/x-shockwave-flash\",\n        \"swf\"\n    ],\n    [\n        \"application/x-silverlight-app\",\n        \"xap\"\n    ],\n    [\n        \"application/x-sit\",\n        \"sit\"\n    ],\n    [\n        \"application/x-sprite\",\n        [\n            \"spr\",\n            \"sprite\"\n        ]\n    ],\n    [\n        \"application/x-stuffit\",\n        \"sit\"\n    ],\n    [\n        \"application/x-stuffitx\",\n        \"sitx\"\n    ],\n    [\n        \"application/x-sv4cpio\",\n        \"sv4cpio\"\n    ],\n    [\n        \"application/x-sv4crc\",\n        \"sv4crc\"\n    ],\n    [\n        \"application/x-tar\",\n        \"tar\"\n    ],\n    [\n        \"application/x-tbook\",\n        [\n            \"sbk\",\n            \"tbk\"\n        ]\n    ],\n    [\n        \"application/x-tcl\",\n        \"tcl\"\n    ],\n    [\n        \"application/x-tex\",\n        \"tex\"\n    ],\n    [\n        \"application/x-tex-tfm\",\n        \"tfm\"\n    ],\n    [\n        \"application/x-texinfo\",\n        [\n            \"texi\",\n            \"texinfo\"\n        ]\n    ],\n    [\n        \"application/x-troff\",\n        [\n            \"roff\",\n            \"t\",\n            \"tr\"\n        ]\n    ],\n    [\n        \"application/x-troff-man\",\n        \"man\"\n    ],\n    [\n        \"application/x-troff-me\",\n        \"me\"\n    ],\n    [\n        \"application/x-troff-ms\",\n        \"ms\"\n    ],\n    [\n        \"application/x-troff-msvideo\",\n        \"avi\"\n    ],\n    [\n        \"application/x-ustar\",\n        \"ustar\"\n    ],\n    [\n        \"application/x-visio\",\n        [\n            \"vsd\",\n            \"vst\",\n            \"vsw\"\n        ]\n    ],\n    [\n        \"application/x-vnd.audioexplosion.mzz\",\n        \"mzz\"\n    ],\n    [\n        \"application/x-vnd.ls-xpix\",\n        \"xpix\"\n    ],\n    [\n        \"application/x-vrml\",\n        \"vrml\"\n    ],\n    [\n        \"application/x-wais-source\",\n        [\n            \"src\",\n            \"wsrc\"\n        ]\n    ],\n    [\n        \"application/x-winhelp\",\n        \"hlp\"\n    ],\n    [\n        \"application/x-wintalk\",\n        \"wtk\"\n    ],\n    [\n        \"application/x-world\",\n        [\n            \"wrl\",\n            \"svr\"\n        ]\n    ],\n    [\n        \"application/x-wpwin\",\n        \"wpd\"\n    ],\n    [\n        \"application/x-wri\",\n        \"wri\"\n    ],\n    [\n        \"application/x-x509-ca-cert\",\n        [\n            \"cer\",\n            \"crt\",\n            \"der\"\n        ]\n    ],\n    [\n        \"application/x-x509-user-cert\",\n        \"crt\"\n    ],\n    [\n        \"application/x-xfig\",\n        \"fig\"\n    ],\n    [\n        \"application/x-xpinstall\",\n        \"xpi\"\n    ],\n    [\n        \"application/x-zip-compressed\",\n        \"zip\"\n    ],\n    [\n        \"application/xcap-diff+xml\",\n        \"xdf\"\n    ],\n    [\n        \"application/xenc+xml\",\n        \"xenc\"\n    ],\n    [\n        \"application/xhtml+xml\",\n        \"xhtml\"\n    ],\n    [\n        \"application/xml\",\n        \"xml\"\n    ],\n    [\n        \"application/xml-dtd\",\n        \"dtd\"\n    ],\n    [\n        \"application/xop+xml\",\n        \"xop\"\n    ],\n    [\n        \"application/xslt+xml\",\n        \"xslt\"\n    ],\n    [\n        \"application/xspf+xml\",\n        \"xspf\"\n    ],\n    [\n        \"application/xv+xml\",\n        \"mxml\"\n    ],\n    [\n        \"application/yang\",\n        \"yang\"\n    ],\n    [\n        \"application/yin+xml\",\n        \"yin\"\n    ],\n    [\n        \"application/ynd.ms-pkipko\",\n        \"pko\"\n    ],\n    [\n        \"application/zip\",\n        \"zip\"\n    ],\n    [\n        \"audio/adpcm\",\n        \"adp\"\n    ],\n    [\n        \"audio/aiff\",\n        [\n            \"aiff\",\n            \"aif\",\n            \"aifc\"\n        ]\n    ],\n    [\n        \"audio/basic\",\n        [\n            \"snd\",\n            \"au\"\n        ]\n    ],\n    [\n        \"audio/it\",\n        \"it\"\n    ],\n    [\n        \"audio/make\",\n        [\n            \"funk\",\n            \"my\",\n            \"pfunk\"\n        ]\n    ],\n    [\n        \"audio/make.my.funk\",\n        \"pfunk\"\n    ],\n    [\n        \"audio/mid\",\n        [\n            \"mid\",\n            \"rmi\"\n        ]\n    ],\n    [\n        \"audio/midi\",\n        [\n            \"midi\",\n            \"kar\",\n            \"mid\"\n        ]\n    ],\n    [\n        \"audio/mod\",\n        \"mod\"\n    ],\n    [\n        \"audio/mp4\",\n        \"mp4a\"\n    ],\n    [\n        \"audio/mpeg\",\n        [\n            \"mpga\",\n            \"mp3\",\n            \"m2a\",\n            \"mp2\",\n            \"mpa\",\n            \"mpg\"\n        ]\n    ],\n    [\n        \"audio/mpeg3\",\n        \"mp3\"\n    ],\n    [\n        \"audio/nspaudio\",\n        [\n            \"la\",\n            \"lma\"\n        ]\n    ],\n    [\n        \"audio/ogg\",\n        \"oga\"\n    ],\n    [\n        \"audio/s3m\",\n        \"s3m\"\n    ],\n    [\n        \"audio/tsp-audio\",\n        \"tsi\"\n    ],\n    [\n        \"audio/tsplayer\",\n        \"tsp\"\n    ],\n    [\n        \"audio/vnd.dece.audio\",\n        \"uva\"\n    ],\n    [\n        \"audio/vnd.digital-winds\",\n        \"eol\"\n    ],\n    [\n        \"audio/vnd.dra\",\n        \"dra\"\n    ],\n    [\n        \"audio/vnd.dts\",\n        \"dts\"\n    ],\n    [\n        \"audio/vnd.dts.hd\",\n        \"dtshd\"\n    ],\n    [\n        \"audio/vnd.lucent.voice\",\n        \"lvp\"\n    ],\n    [\n        \"audio/vnd.ms-playready.media.pya\",\n        \"pya\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp4800\",\n        \"ecelp4800\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp7470\",\n        \"ecelp7470\"\n    ],\n    [\n        \"audio/vnd.nuera.ecelp9600\",\n        \"ecelp9600\"\n    ],\n    [\n        \"audio/vnd.qcelp\",\n        \"qcp\"\n    ],\n    [\n        \"audio/vnd.rip\",\n        \"rip\"\n    ],\n    [\n        \"audio/voc\",\n        \"voc\"\n    ],\n    [\n        \"audio/voxware\",\n        \"vox\"\n    ],\n    [\n        \"audio/wav\",\n        \"wav\"\n    ],\n    [\n        \"audio/webm\",\n        \"weba\"\n    ],\n    [\n        \"audio/x-aac\",\n        \"aac\"\n    ],\n    [\n        \"audio/x-adpcm\",\n        \"snd\"\n    ],\n    [\n        \"audio/x-aiff\",\n        [\n            \"aiff\",\n            \"aif\",\n            \"aifc\"\n        ]\n    ],\n    [\n        \"audio/x-au\",\n        \"au\"\n    ],\n    [\n        \"audio/x-gsm\",\n        [\n            \"gsd\",\n            \"gsm\"\n        ]\n    ],\n    [\n        \"audio/x-jam\",\n        \"jam\"\n    ],\n    [\n        \"audio/x-liveaudio\",\n        \"lam\"\n    ],\n    [\n        \"audio/x-mid\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"audio/x-midi\",\n        [\n            \"midi\",\n            \"mid\"\n        ]\n    ],\n    [\n        \"audio/x-mod\",\n        \"mod\"\n    ],\n    [\n        \"audio/x-mpeg\",\n        \"mp2\"\n    ],\n    [\n        \"audio/x-mpeg-3\",\n        \"mp3\"\n    ],\n    [\n        \"audio/x-mpegurl\",\n        \"m3u\"\n    ],\n    [\n        \"audio/x-mpequrl\",\n        \"m3u\"\n    ],\n    [\n        \"audio/x-ms-wax\",\n        \"wax\"\n    ],\n    [\n        \"audio/x-ms-wma\",\n        \"wma\"\n    ],\n    [\n        \"audio/x-nspaudio\",\n        [\n            \"la\",\n            \"lma\"\n        ]\n    ],\n    [\n        \"audio/x-pn-realaudio\",\n        [\n            \"ra\",\n            \"ram\",\n            \"rm\",\n            \"rmm\",\n            \"rmp\"\n        ]\n    ],\n    [\n        \"audio/x-pn-realaudio-plugin\",\n        [\n            \"ra\",\n            \"rmp\",\n            \"rpm\"\n        ]\n    ],\n    [\n        \"audio/x-psid\",\n        \"sid\"\n    ],\n    [\n        \"audio/x-realaudio\",\n        \"ra\"\n    ],\n    [\n        \"audio/x-twinvq\",\n        \"vqf\"\n    ],\n    [\n        \"audio/x-twinvq-plugin\",\n        [\n            \"vqe\",\n            \"vql\"\n        ]\n    ],\n    [\n        \"audio/x-vnd.audioexplosion.mjuicemediafile\",\n        \"mjf\"\n    ],\n    [\n        \"audio/x-voc\",\n        \"voc\"\n    ],\n    [\n        \"audio/x-wav\",\n        \"wav\"\n    ],\n    [\n        \"audio/xm\",\n        \"xm\"\n    ],\n    [\n        \"chemical/x-cdx\",\n        \"cdx\"\n    ],\n    [\n        \"chemical/x-cif\",\n        \"cif\"\n    ],\n    [\n        \"chemical/x-cmdf\",\n        \"cmdf\"\n    ],\n    [\n        \"chemical/x-cml\",\n        \"cml\"\n    ],\n    [\n        \"chemical/x-csml\",\n        \"csml\"\n    ],\n    [\n        \"chemical/x-pdb\",\n        [\n            \"pdb\",\n            \"xyz\"\n        ]\n    ],\n    [\n        \"chemical/x-xyz\",\n        \"xyz\"\n    ],\n    [\n        \"drawing/x-dwf\",\n        \"dwf\"\n    ],\n    [\n        \"i-world/i-vrml\",\n        \"ivr\"\n    ],\n    [\n        \"image/bmp\",\n        [\n            \"bmp\",\n            \"bm\"\n        ]\n    ],\n    [\n        \"image/cgm\",\n        \"cgm\"\n    ],\n    [\n        \"image/cis-cod\",\n        \"cod\"\n    ],\n    [\n        \"image/cmu-raster\",\n        [\n            \"ras\",\n            \"rast\"\n        ]\n    ],\n    [\n        \"image/fif\",\n        \"fif\"\n    ],\n    [\n        \"image/florian\",\n        [\n            \"flo\",\n            \"turbot\"\n        ]\n    ],\n    [\n        \"image/g3fax\",\n        \"g3\"\n    ],\n    [\n        \"image/gif\",\n        \"gif\"\n    ],\n    [\n        \"image/ief\",\n        [\n            \"ief\",\n            \"iefs\"\n        ]\n    ],\n    [\n        \"image/jpeg\",\n        [\n            \"jpeg\",\n            \"jpe\",\n            \"jpg\",\n            \"jfif\",\n            \"jfif-tbnl\"\n        ]\n    ],\n    [\n        \"image/jutvision\",\n        \"jut\"\n    ],\n    [\n        \"image/ktx\",\n        \"ktx\"\n    ],\n    [\n        \"image/naplps\",\n        [\n            \"nap\",\n            \"naplps\"\n        ]\n    ],\n    [\n        \"image/pict\",\n        [\n            \"pic\",\n            \"pict\"\n        ]\n    ],\n    [\n        \"image/pipeg\",\n        \"jfif\"\n    ],\n    [\n        \"image/pjpeg\",\n        [\n            \"jfif\",\n            \"jpe\",\n            \"jpeg\",\n            \"jpg\"\n        ]\n    ],\n    [\n        \"image/png\",\n        [\n            \"png\",\n            \"x-png\"\n        ]\n    ],\n    [\n        \"image/prs.btif\",\n        \"btif\"\n    ],\n    [\n        \"image/svg+xml\",\n        \"svg\"\n    ],\n    [\n        \"image/tiff\",\n        [\n            \"tif\",\n            \"tiff\"\n        ]\n    ],\n    [\n        \"image/vasa\",\n        \"mcf\"\n    ],\n    [\n        \"image/vnd.adobe.photoshop\",\n        \"psd\"\n    ],\n    [\n        \"image/vnd.dece.graphic\",\n        \"uvi\"\n    ],\n    [\n        \"image/vnd.djvu\",\n        \"djvu\"\n    ],\n    [\n        \"image/vnd.dvb.subtitle\",\n        \"sub\"\n    ],\n    [\n        \"image/vnd.dwg\",\n        [\n            \"dwg\",\n            \"dxf\",\n            \"svf\"\n        ]\n    ],\n    [\n        \"image/vnd.dxf\",\n        \"dxf\"\n    ],\n    [\n        \"image/vnd.fastbidsheet\",\n        \"fbs\"\n    ],\n    [\n        \"image/vnd.fpx\",\n        \"fpx\"\n    ],\n    [\n        \"image/vnd.fst\",\n        \"fst\"\n    ],\n    [\n        \"image/vnd.fujixerox.edmics-mmr\",\n        \"mmr\"\n    ],\n    [\n        \"image/vnd.fujixerox.edmics-rlc\",\n        \"rlc\"\n    ],\n    [\n        \"image/vnd.ms-modi\",\n        \"mdi\"\n    ],\n    [\n        \"image/vnd.net-fpx\",\n        [\n            \"fpx\",\n            \"npx\"\n        ]\n    ],\n    [\n        \"image/vnd.rn-realflash\",\n        \"rf\"\n    ],\n    [\n        \"image/vnd.rn-realpix\",\n        \"rp\"\n    ],\n    [\n        \"image/vnd.wap.wbmp\",\n        \"wbmp\"\n    ],\n    [\n        \"image/vnd.xiff\",\n        \"xif\"\n    ],\n    [\n        \"image/webp\",\n        \"webp\"\n    ],\n    [\n        \"image/x-cmu-raster\",\n        \"ras\"\n    ],\n    [\n        \"image/x-cmx\",\n        \"cmx\"\n    ],\n    [\n        \"image/x-dwg\",\n        [\n            \"dwg\",\n            \"dxf\",\n            \"svf\"\n        ]\n    ],\n    [\n        \"image/x-freehand\",\n        \"fh\"\n    ],\n    [\n        \"image/x-icon\",\n        \"ico\"\n    ],\n    [\n        \"image/x-jg\",\n        \"art\"\n    ],\n    [\n        \"image/x-jps\",\n        \"jps\"\n    ],\n    [\n        \"image/x-niff\",\n        [\n            \"niff\",\n            \"nif\"\n        ]\n    ],\n    [\n        \"image/x-pcx\",\n        \"pcx\"\n    ],\n    [\n        \"image/x-pict\",\n        [\n            \"pct\",\n            \"pic\"\n        ]\n    ],\n    [\n        \"image/x-portable-anymap\",\n        \"pnm\"\n    ],\n    [\n        \"image/x-portable-bitmap\",\n        \"pbm\"\n    ],\n    [\n        \"image/x-portable-graymap\",\n        \"pgm\"\n    ],\n    [\n        \"image/x-portable-greymap\",\n        \"pgm\"\n    ],\n    [\n        \"image/x-portable-pixmap\",\n        \"ppm\"\n    ],\n    [\n        \"image/x-quicktime\",\n        [\n            \"qif\",\n            \"qti\",\n            \"qtif\"\n        ]\n    ],\n    [\n        \"image/x-rgb\",\n        \"rgb\"\n    ],\n    [\n        \"image/x-tiff\",\n        [\n            \"tif\",\n            \"tiff\"\n        ]\n    ],\n    [\n        \"image/x-windows-bmp\",\n        \"bmp\"\n    ],\n    [\n        \"image/x-xbitmap\",\n        \"xbm\"\n    ],\n    [\n        \"image/x-xbm\",\n        \"xbm\"\n    ],\n    [\n        \"image/x-xpixmap\",\n        [\n            \"xpm\",\n            \"pm\"\n        ]\n    ],\n    [\n        \"image/x-xwd\",\n        \"xwd\"\n    ],\n    [\n        \"image/x-xwindowdump\",\n        \"xwd\"\n    ],\n    [\n        \"image/xbm\",\n        \"xbm\"\n    ],\n    [\n        \"image/xpm\",\n        \"xpm\"\n    ],\n    [\n        \"message/rfc822\",\n        [\n            \"eml\",\n            \"mht\",\n            \"mhtml\",\n            \"nws\",\n            \"mime\"\n        ]\n    ],\n    [\n        \"model/iges\",\n        [\n            \"iges\",\n            \"igs\"\n        ]\n    ],\n    [\n        \"model/mesh\",\n        \"msh\"\n    ],\n    [\n        \"model/vnd.collada+xml\",\n        \"dae\"\n    ],\n    [\n        \"model/vnd.dwf\",\n        \"dwf\"\n    ],\n    [\n        \"model/vnd.gdl\",\n        \"gdl\"\n    ],\n    [\n        \"model/vnd.gtw\",\n        \"gtw\"\n    ],\n    [\n        \"model/vnd.mts\",\n        \"mts\"\n    ],\n    [\n        \"model/vnd.vtu\",\n        \"vtu\"\n    ],\n    [\n        \"model/vrml\",\n        [\n            \"vrml\",\n            \"wrl\",\n            \"wrz\"\n        ]\n    ],\n    [\n        \"model/x-pov\",\n        \"pov\"\n    ],\n    [\n        \"multipart/x-gzip\",\n        \"gzip\"\n    ],\n    [\n        \"multipart/x-ustar\",\n        \"ustar\"\n    ],\n    [\n        \"multipart/x-zip\",\n        \"zip\"\n    ],\n    [\n        \"music/crescendo\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"music/x-karaoke\",\n        \"kar\"\n    ],\n    [\n        \"paleovu/x-pv\",\n        \"pvu\"\n    ],\n    [\n        \"text/asp\",\n        \"asp\"\n    ],\n    [\n        \"text/calendar\",\n        \"ics\"\n    ],\n    [\n        \"text/css\",\n        \"css\"\n    ],\n    [\n        \"text/csv\",\n        \"csv\"\n    ],\n    [\n        \"text/ecmascript\",\n        \"js\"\n    ],\n    [\n        \"text/h323\",\n        \"323\"\n    ],\n    [\n        \"text/html\",\n        [\n            \"html\",\n            \"htm\",\n            \"stm\",\n            \"acgi\",\n            \"htmls\",\n            \"htx\",\n            \"shtml\"\n        ]\n    ],\n    [\n        \"text/iuls\",\n        \"uls\"\n    ],\n    [\n        \"text/javascript\",\n        \"js\"\n    ],\n    [\n        \"text/mcf\",\n        \"mcf\"\n    ],\n    [\n        \"text/n3\",\n        \"n3\"\n    ],\n    [\n        \"text/pascal\",\n        \"pas\"\n    ],\n    [\n        \"text/plain\",\n        [\n            \"txt\",\n            \"bas\",\n            \"c\",\n            \"h\",\n            \"c++\",\n            \"cc\",\n            \"com\",\n            \"conf\",\n            \"cxx\",\n            \"def\",\n            \"f\",\n            \"f90\",\n            \"for\",\n            \"g\",\n            \"hh\",\n            \"idc\",\n            \"jav\",\n            \"java\",\n            \"list\",\n            \"log\",\n            \"lst\",\n            \"m\",\n            \"mar\",\n            \"pl\",\n            \"sdml\",\n            \"text\"\n        ]\n    ],\n    [\n        \"text/plain-bas\",\n        \"par\"\n    ],\n    [\n        \"text/prs.lines.tag\",\n        \"dsc\"\n    ],\n    [\n        \"text/richtext\",\n        [\n            \"rtx\",\n            \"rt\",\n            \"rtf\"\n        ]\n    ],\n    [\n        \"text/scriplet\",\n        \"wsc\"\n    ],\n    [\n        \"text/scriptlet\",\n        \"sct\"\n    ],\n    [\n        \"text/sgml\",\n        [\n            \"sgm\",\n            \"sgml\"\n        ]\n    ],\n    [\n        \"text/tab-separated-values\",\n        \"tsv\"\n    ],\n    [\n        \"text/troff\",\n        \"t\"\n    ],\n    [\n        \"text/turtle\",\n        \"ttl\"\n    ],\n    [\n        \"text/uri-list\",\n        [\n            \"uni\",\n            \"unis\",\n            \"uri\",\n            \"uris\"\n        ]\n    ],\n    [\n        \"text/vnd.abc\",\n        \"abc\"\n    ],\n    [\n        \"text/vnd.curl\",\n        \"curl\"\n    ],\n    [\n        \"text/vnd.curl.dcurl\",\n        \"dcurl\"\n    ],\n    [\n        \"text/vnd.curl.mcurl\",\n        \"mcurl\"\n    ],\n    [\n        \"text/vnd.curl.scurl\",\n        \"scurl\"\n    ],\n    [\n        \"text/vnd.fly\",\n        \"fly\"\n    ],\n    [\n        \"text/vnd.fmi.flexstor\",\n        \"flx\"\n    ],\n    [\n        \"text/vnd.graphviz\",\n        \"gv\"\n    ],\n    [\n        \"text/vnd.in3d.3dml\",\n        \"3dml\"\n    ],\n    [\n        \"text/vnd.in3d.spot\",\n        \"spot\"\n    ],\n    [\n        \"text/vnd.rn-realtext\",\n        \"rt\"\n    ],\n    [\n        \"text/vnd.sun.j2me.app-descriptor\",\n        \"jad\"\n    ],\n    [\n        \"text/vnd.wap.wml\",\n        \"wml\"\n    ],\n    [\n        \"text/vnd.wap.wmlscript\",\n        \"wmls\"\n    ],\n    [\n        \"text/webviewhtml\",\n        \"htt\"\n    ],\n    [\n        \"text/x-asm\",\n        [\n            \"asm\",\n            \"s\"\n        ]\n    ],\n    [\n        \"text/x-audiosoft-intra\",\n        \"aip\"\n    ],\n    [\n        \"text/x-c\",\n        [\n            \"c\",\n            \"cc\",\n            \"cpp\"\n        ]\n    ],\n    [\n        \"text/x-component\",\n        \"htc\"\n    ],\n    [\n        \"text/x-fortran\",\n        [\n            \"for\",\n            \"f\",\n            \"f77\",\n            \"f90\"\n        ]\n    ],\n    [\n        \"text/x-h\",\n        [\n            \"h\",\n            \"hh\"\n        ]\n    ],\n    [\n        \"text/x-java-source\",\n        [\n            \"java\",\n            \"jav\"\n        ]\n    ],\n    [\n        \"text/x-java-source,java\",\n        \"java\"\n    ],\n    [\n        \"text/x-la-asf\",\n        \"lsx\"\n    ],\n    [\n        \"text/x-m\",\n        \"m\"\n    ],\n    [\n        \"text/x-pascal\",\n        \"p\"\n    ],\n    [\n        \"text/x-script\",\n        \"hlb\"\n    ],\n    [\n        \"text/x-script.csh\",\n        \"csh\"\n    ],\n    [\n        \"text/x-script.elisp\",\n        \"el\"\n    ],\n    [\n        \"text/x-script.guile\",\n        \"scm\"\n    ],\n    [\n        \"text/x-script.ksh\",\n        \"ksh\"\n    ],\n    [\n        \"text/x-script.lisp\",\n        \"lsp\"\n    ],\n    [\n        \"text/x-script.perl\",\n        \"pl\"\n    ],\n    [\n        \"text/x-script.perl-module\",\n        \"pm\"\n    ],\n    [\n        \"text/x-script.phyton\",\n        \"py\"\n    ],\n    [\n        \"text/x-script.rexx\",\n        \"rexx\"\n    ],\n    [\n        \"text/x-script.scheme\",\n        \"scm\"\n    ],\n    [\n        \"text/x-script.sh\",\n        \"sh\"\n    ],\n    [\n        \"text/x-script.tcl\",\n        \"tcl\"\n    ],\n    [\n        \"text/x-script.tcsh\",\n        \"tcsh\"\n    ],\n    [\n        \"text/x-script.zsh\",\n        \"zsh\"\n    ],\n    [\n        \"text/x-server-parsed-html\",\n        [\n            \"shtml\",\n            \"ssi\"\n        ]\n    ],\n    [\n        \"text/x-setext\",\n        \"etx\"\n    ],\n    [\n        \"text/x-sgml\",\n        [\n            \"sgm\",\n            \"sgml\"\n        ]\n    ],\n    [\n        \"text/x-speech\",\n        [\n            \"spc\",\n            \"talk\"\n        ]\n    ],\n    [\n        \"text/x-uil\",\n        \"uil\"\n    ],\n    [\n        \"text/x-uuencode\",\n        [\n            \"uu\",\n            \"uue\"\n        ]\n    ],\n    [\n        \"text/x-vcalendar\",\n        \"vcs\"\n    ],\n    [\n        \"text/x-vcard\",\n        \"vcf\"\n    ],\n    [\n        \"text/xml\",\n        \"xml\"\n    ],\n    [\n        \"video/3gpp\",\n        \"3gp\"\n    ],\n    [\n        \"video/3gpp2\",\n        \"3g2\"\n    ],\n    [\n        \"video/animaflex\",\n        \"afl\"\n    ],\n    [\n        \"video/avi\",\n        \"avi\"\n    ],\n    [\n        \"video/avs-video\",\n        \"avs\"\n    ],\n    [\n        \"video/dl\",\n        \"dl\"\n    ],\n    [\n        \"video/fli\",\n        \"fli\"\n    ],\n    [\n        \"video/gl\",\n        \"gl\"\n    ],\n    [\n        \"video/h261\",\n        \"h261\"\n    ],\n    [\n        \"video/h263\",\n        \"h263\"\n    ],\n    [\n        \"video/h264\",\n        \"h264\"\n    ],\n    [\n        \"video/jpeg\",\n        \"jpgv\"\n    ],\n    [\n        \"video/jpm\",\n        \"jpm\"\n    ],\n    [\n        \"video/mj2\",\n        \"mj2\"\n    ],\n    [\n        \"video/mp4\",\n        \"mp4\"\n    ],\n    [\n        \"video/mpeg\",\n        [\n            \"mpeg\",\n            \"mp2\",\n            \"mpa\",\n            \"mpe\",\n            \"mpg\",\n            \"mpv2\",\n            \"m1v\",\n            \"m2v\",\n            \"mp3\"\n        ]\n    ],\n    [\n        \"video/msvideo\",\n        \"avi\"\n    ],\n    [\n        \"video/ogg\",\n        \"ogv\"\n    ],\n    [\n        \"video/quicktime\",\n        [\n            \"mov\",\n            \"qt\",\n            \"moov\"\n        ]\n    ],\n    [\n        \"video/vdo\",\n        \"vdo\"\n    ],\n    [\n        \"video/vivo\",\n        [\n            \"viv\",\n            \"vivo\"\n        ]\n    ],\n    [\n        \"video/vnd.dece.hd\",\n        \"uvh\"\n    ],\n    [\n        \"video/vnd.dece.mobile\",\n        \"uvm\"\n    ],\n    [\n        \"video/vnd.dece.pd\",\n        \"uvp\"\n    ],\n    [\n        \"video/vnd.dece.sd\",\n        \"uvs\"\n    ],\n    [\n        \"video/vnd.dece.video\",\n        \"uvv\"\n    ],\n    [\n        \"video/vnd.fvt\",\n        \"fvt\"\n    ],\n    [\n        \"video/vnd.mpegurl\",\n        \"mxu\"\n    ],\n    [\n        \"video/vnd.ms-playready.media.pyv\",\n        \"pyv\"\n    ],\n    [\n        \"video/vnd.rn-realvideo\",\n        \"rv\"\n    ],\n    [\n        \"video/vnd.uvvu.mp4\",\n        \"uvu\"\n    ],\n    [\n        \"video/vnd.vivo\",\n        [\n            \"viv\",\n            \"vivo\"\n        ]\n    ],\n    [\n        \"video/vosaic\",\n        \"vos\"\n    ],\n    [\n        \"video/webm\",\n        \"webm\"\n    ],\n    [\n        \"video/x-amt-demorun\",\n        \"xdr\"\n    ],\n    [\n        \"video/x-amt-showrun\",\n        \"xsr\"\n    ],\n    [\n        \"video/x-atomic3d-feature\",\n        \"fmf\"\n    ],\n    [\n        \"video/x-dl\",\n        \"dl\"\n    ],\n    [\n        \"video/x-dv\",\n        [\n            \"dif\",\n            \"dv\"\n        ]\n    ],\n    [\n        \"video/x-f4v\",\n        \"f4v\"\n    ],\n    [\n        \"video/x-fli\",\n        \"fli\"\n    ],\n    [\n        \"video/x-flv\",\n        \"flv\"\n    ],\n    [\n        \"video/x-gl\",\n        \"gl\"\n    ],\n    [\n        \"video/x-isvideo\",\n        \"isu\"\n    ],\n    [\n        \"video/x-la-asf\",\n        [\n            \"lsf\",\n            \"lsx\"\n        ]\n    ],\n    [\n        \"video/x-m4v\",\n        \"m4v\"\n    ],\n    [\n        \"video/x-motion-jpeg\",\n        \"mjpg\"\n    ],\n    [\n        \"video/x-mpeg\",\n        [\n            \"mp3\",\n            \"mp2\"\n        ]\n    ],\n    [\n        \"video/x-mpeq2a\",\n        \"mp2\"\n    ],\n    [\n        \"video/x-ms-asf\",\n        [\n            \"asf\",\n            \"asr\",\n            \"asx\"\n        ]\n    ],\n    [\n        \"video/x-ms-asf-plugin\",\n        \"asx\"\n    ],\n    [\n        \"video/x-ms-wm\",\n        \"wm\"\n    ],\n    [\n        \"video/x-ms-wmv\",\n        \"wmv\"\n    ],\n    [\n        \"video/x-ms-wmx\",\n        \"wmx\"\n    ],\n    [\n        \"video/x-ms-wvx\",\n        \"wvx\"\n    ],\n    [\n        \"video/x-msvideo\",\n        \"avi\"\n    ],\n    [\n        \"video/x-qtc\",\n        \"qtc\"\n    ],\n    [\n        \"video/x-scm\",\n        \"scm\"\n    ],\n    [\n        \"video/x-sgi-movie\",\n        [\n            \"movie\",\n            \"mv\"\n        ]\n    ],\n    [\n        \"windows/metafile\",\n        \"wmf\"\n    ],\n    [\n        \"www/mime\",\n        \"mime\"\n    ],\n    [\n        \"x-conference/x-cooltalk\",\n        \"ice\"\n    ],\n    [\n        \"x-music/x-midi\",\n        [\n            \"mid\",\n            \"midi\"\n        ]\n    ],\n    [\n        \"x-world/x-3dmf\",\n        [\n            \"3dm\",\n            \"3dmf\",\n            \"qd3\",\n            \"qd3d\"\n        ]\n    ],\n    [\n        \"x-world/x-svr\",\n        \"svr\"\n    ],\n    [\n        \"x-world/x-vrml\",\n        [\n            \"flr\",\n            \"vrml\",\n            \"wrl\",\n            \"wrz\",\n            \"xaf\",\n            \"xof\"\n        ]\n    ],\n    [\n        \"x-world/x-vrt\",\n        \"vrt\"\n    ],\n    [\n        \"xgl/drawing\",\n        \"xgz\"\n    ],\n    [\n        \"xgl/movie\",\n        \"xmz\"\n    ]\n]);\nconst extensions = new Map([\n    [\n        \"123\",\n        \"application/vnd.lotus-1-2-3\"\n    ],\n    [\n        \"323\",\n        \"text/h323\"\n    ],\n    [\n        \"*\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"3dm\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"3dmf\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"3dml\",\n        \"text/vnd.in3d.3dml\"\n    ],\n    [\n        \"3g2\",\n        \"video/3gpp2\"\n    ],\n    [\n        \"3gp\",\n        \"video/3gpp\"\n    ],\n    [\n        \"7z\",\n        \"application/x-7z-compressed\"\n    ],\n    [\n        \"a\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"aab\",\n        \"application/x-authorware-bin\"\n    ],\n    [\n        \"aac\",\n        \"audio/x-aac\"\n    ],\n    [\n        \"aam\",\n        \"application/x-authorware-map\"\n    ],\n    [\n        \"aas\",\n        \"application/x-authorware-seg\"\n    ],\n    [\n        \"abc\",\n        \"text/vnd.abc\"\n    ],\n    [\n        \"abw\",\n        \"application/x-abiword\"\n    ],\n    [\n        \"ac\",\n        \"application/pkix-attr-cert\"\n    ],\n    [\n        \"acc\",\n        \"application/vnd.americandynamics.acc\"\n    ],\n    [\n        \"ace\",\n        \"application/x-ace-compressed\"\n    ],\n    [\n        \"acgi\",\n        \"text/html\"\n    ],\n    [\n        \"acu\",\n        \"application/vnd.acucobol\"\n    ],\n    [\n        \"acx\",\n        \"application/internet-property-stream\"\n    ],\n    [\n        \"adp\",\n        \"audio/adpcm\"\n    ],\n    [\n        \"aep\",\n        \"application/vnd.audiograph\"\n    ],\n    [\n        \"afl\",\n        \"video/animaflex\"\n    ],\n    [\n        \"afp\",\n        \"application/vnd.ibm.modcap\"\n    ],\n    [\n        \"ahead\",\n        \"application/vnd.ahead.space\"\n    ],\n    [\n        \"ai\",\n        \"application/postscript\"\n    ],\n    [\n        \"aif\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aifc\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aiff\",\n        [\n            \"audio/aiff\",\n            \"audio/x-aiff\"\n        ]\n    ],\n    [\n        \"aim\",\n        \"application/x-aim\"\n    ],\n    [\n        \"aip\",\n        \"text/x-audiosoft-intra\"\n    ],\n    [\n        \"air\",\n        \"application/vnd.adobe.air-application-installer-package+zip\"\n    ],\n    [\n        \"ait\",\n        \"application/vnd.dvb.ait\"\n    ],\n    [\n        \"ami\",\n        \"application/vnd.amiga.ami\"\n    ],\n    [\n        \"ani\",\n        \"application/x-navi-animation\"\n    ],\n    [\n        \"aos\",\n        \"application/x-nokia-9000-communicator-add-on-software\"\n    ],\n    [\n        \"apk\",\n        \"application/vnd.android.package-archive\"\n    ],\n    [\n        \"application\",\n        \"application/x-ms-application\"\n    ],\n    [\n        \"apr\",\n        \"application/vnd.lotus-approach\"\n    ],\n    [\n        \"aps\",\n        \"application/mime\"\n    ],\n    [\n        \"arc\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"arj\",\n        [\n            \"application/arj\",\n            \"application/octet-stream\"\n        ]\n    ],\n    [\n        \"art\",\n        \"image/x-jg\"\n    ],\n    [\n        \"asf\",\n        \"video/x-ms-asf\"\n    ],\n    [\n        \"asm\",\n        \"text/x-asm\"\n    ],\n    [\n        \"aso\",\n        \"application/vnd.accpac.simply.aso\"\n    ],\n    [\n        \"asp\",\n        \"text/asp\"\n    ],\n    [\n        \"asr\",\n        \"video/x-ms-asf\"\n    ],\n    [\n        \"asx\",\n        [\n            \"video/x-ms-asf\",\n            \"application/x-mplayer2\",\n            \"video/x-ms-asf-plugin\"\n        ]\n    ],\n    [\n        \"atc\",\n        \"application/vnd.acucorp\"\n    ],\n    [\n        \"atomcat\",\n        \"application/atomcat+xml\"\n    ],\n    [\n        \"atomsvc\",\n        \"application/atomsvc+xml\"\n    ],\n    [\n        \"atx\",\n        \"application/vnd.antix.game-component\"\n    ],\n    [\n        \"au\",\n        [\n            \"audio/basic\",\n            \"audio/x-au\"\n        ]\n    ],\n    [\n        \"avi\",\n        [\n            \"video/avi\",\n            \"video/msvideo\",\n            \"application/x-troff-msvideo\",\n            \"video/x-msvideo\"\n        ]\n    ],\n    [\n        \"avs\",\n        \"video/avs-video\"\n    ],\n    [\n        \"aw\",\n        \"application/applixware\"\n    ],\n    [\n        \"axs\",\n        \"application/olescript\"\n    ],\n    [\n        \"azf\",\n        \"application/vnd.airzip.filesecure.azf\"\n    ],\n    [\n        \"azs\",\n        \"application/vnd.airzip.filesecure.azs\"\n    ],\n    [\n        \"azw\",\n        \"application/vnd.amazon.ebook\"\n    ],\n    [\n        \"bas\",\n        \"text/plain\"\n    ],\n    [\n        \"bcpio\",\n        \"application/x-bcpio\"\n    ],\n    [\n        \"bdf\",\n        \"application/x-font-bdf\"\n    ],\n    [\n        \"bdm\",\n        \"application/vnd.syncml.dm+wbxml\"\n    ],\n    [\n        \"bed\",\n        \"application/vnd.realvnc.bed\"\n    ],\n    [\n        \"bh2\",\n        \"application/vnd.fujitsu.oasysprs\"\n    ],\n    [\n        \"bin\",\n        [\n            \"application/octet-stream\",\n            \"application/mac-binary\",\n            \"application/macbinary\",\n            \"application/x-macbinary\",\n            \"application/x-binary\"\n        ]\n    ],\n    [\n        \"bm\",\n        \"image/bmp\"\n    ],\n    [\n        \"bmi\",\n        \"application/vnd.bmi\"\n    ],\n    [\n        \"bmp\",\n        [\n            \"image/bmp\",\n            \"image/x-windows-bmp\"\n        ]\n    ],\n    [\n        \"boo\",\n        \"application/book\"\n    ],\n    [\n        \"book\",\n        \"application/book\"\n    ],\n    [\n        \"box\",\n        \"application/vnd.previewsystems.box\"\n    ],\n    [\n        \"boz\",\n        \"application/x-bzip2\"\n    ],\n    [\n        \"bsh\",\n        \"application/x-bsh\"\n    ],\n    [\n        \"btif\",\n        \"image/prs.btif\"\n    ],\n    [\n        \"bz\",\n        \"application/x-bzip\"\n    ],\n    [\n        \"bz2\",\n        \"application/x-bzip2\"\n    ],\n    [\n        \"c\",\n        [\n            \"text/plain\",\n            \"text/x-c\"\n        ]\n    ],\n    [\n        \"c++\",\n        \"text/plain\"\n    ],\n    [\n        \"c11amc\",\n        \"application/vnd.cluetrust.cartomobile-config\"\n    ],\n    [\n        \"c11amz\",\n        \"application/vnd.cluetrust.cartomobile-config-pkg\"\n    ],\n    [\n        \"c4g\",\n        \"application/vnd.clonk.c4group\"\n    ],\n    [\n        \"cab\",\n        \"application/vnd.ms-cab-compressed\"\n    ],\n    [\n        \"car\",\n        \"application/vnd.curl.car\"\n    ],\n    [\n        \"cat\",\n        [\n            \"application/vnd.ms-pkiseccat\",\n            \"application/vnd.ms-pki.seccat\"\n        ]\n    ],\n    [\n        \"cc\",\n        [\n            \"text/plain\",\n            \"text/x-c\"\n        ]\n    ],\n    [\n        \"ccad\",\n        \"application/clariscad\"\n    ],\n    [\n        \"cco\",\n        \"application/x-cocoa\"\n    ],\n    [\n        \"ccxml\",\n        \"application/ccxml+xml,\"\n    ],\n    [\n        \"cdbcmsg\",\n        \"application/vnd.contact.cmsg\"\n    ],\n    [\n        \"cdf\",\n        [\n            \"application/cdf\",\n            \"application/x-cdf\",\n            \"application/x-netcdf\"\n        ]\n    ],\n    [\n        \"cdkey\",\n        \"application/vnd.mediastation.cdkey\"\n    ],\n    [\n        \"cdmia\",\n        \"application/cdmi-capability\"\n    ],\n    [\n        \"cdmic\",\n        \"application/cdmi-container\"\n    ],\n    [\n        \"cdmid\",\n        \"application/cdmi-domain\"\n    ],\n    [\n        \"cdmio\",\n        \"application/cdmi-object\"\n    ],\n    [\n        \"cdmiq\",\n        \"application/cdmi-queue\"\n    ],\n    [\n        \"cdx\",\n        \"chemical/x-cdx\"\n    ],\n    [\n        \"cdxml\",\n        \"application/vnd.chemdraw+xml\"\n    ],\n    [\n        \"cdy\",\n        \"application/vnd.cinderella\"\n    ],\n    [\n        \"cer\",\n        [\n            \"application/pkix-cert\",\n            \"application/x-x509-ca-cert\"\n        ]\n    ],\n    [\n        \"cgm\",\n        \"image/cgm\"\n    ],\n    [\n        \"cha\",\n        \"application/x-chat\"\n    ],\n    [\n        \"chat\",\n        \"application/x-chat\"\n    ],\n    [\n        \"chm\",\n        \"application/vnd.ms-htmlhelp\"\n    ],\n    [\n        \"chrt\",\n        \"application/vnd.kde.kchart\"\n    ],\n    [\n        \"cif\",\n        \"chemical/x-cif\"\n    ],\n    [\n        \"cii\",\n        \"application/vnd.anser-web-certificate-issue-initiation\"\n    ],\n    [\n        \"cil\",\n        \"application/vnd.ms-artgalry\"\n    ],\n    [\n        \"cla\",\n        \"application/vnd.claymore\"\n    ],\n    [\n        \"class\",\n        [\n            \"application/octet-stream\",\n            \"application/java\",\n            \"application/java-byte-code\",\n            \"application/java-vm\",\n            \"application/x-java-class\"\n        ]\n    ],\n    [\n        \"clkk\",\n        \"application/vnd.crick.clicker.keyboard\"\n    ],\n    [\n        \"clkp\",\n        \"application/vnd.crick.clicker.palette\"\n    ],\n    [\n        \"clkt\",\n        \"application/vnd.crick.clicker.template\"\n    ],\n    [\n        \"clkw\",\n        \"application/vnd.crick.clicker.wordbank\"\n    ],\n    [\n        \"clkx\",\n        \"application/vnd.crick.clicker\"\n    ],\n    [\n        \"clp\",\n        \"application/x-msclip\"\n    ],\n    [\n        \"cmc\",\n        \"application/vnd.cosmocaller\"\n    ],\n    [\n        \"cmdf\",\n        \"chemical/x-cmdf\"\n    ],\n    [\n        \"cml\",\n        \"chemical/x-cml\"\n    ],\n    [\n        \"cmp\",\n        \"application/vnd.yellowriver-custom-menu\"\n    ],\n    [\n        \"cmx\",\n        \"image/x-cmx\"\n    ],\n    [\n        \"cod\",\n        [\n            \"image/cis-cod\",\n            \"application/vnd.rim.cod\"\n        ]\n    ],\n    [\n        \"com\",\n        [\n            \"application/octet-stream\",\n            \"text/plain\"\n        ]\n    ],\n    [\n        \"conf\",\n        \"text/plain\"\n    ],\n    [\n        \"cpio\",\n        \"application/x-cpio\"\n    ],\n    [\n        \"cpp\",\n        \"text/x-c\"\n    ],\n    [\n        \"cpt\",\n        [\n            \"application/mac-compactpro\",\n            \"application/x-compactpro\",\n            \"application/x-cpt\"\n        ]\n    ],\n    [\n        \"crd\",\n        \"application/x-mscardfile\"\n    ],\n    [\n        \"crl\",\n        [\n            \"application/pkix-crl\",\n            \"application/pkcs-crl\"\n        ]\n    ],\n    [\n        \"crt\",\n        [\n            \"application/pkix-cert\",\n            \"application/x-x509-user-cert\",\n            \"application/x-x509-ca-cert\"\n        ]\n    ],\n    [\n        \"cryptonote\",\n        \"application/vnd.rig.cryptonote\"\n    ],\n    [\n        \"csh\",\n        [\n            \"text/x-script.csh\",\n            \"application/x-csh\"\n        ]\n    ],\n    [\n        \"csml\",\n        \"chemical/x-csml\"\n    ],\n    [\n        \"csp\",\n        \"application/vnd.commonspace\"\n    ],\n    [\n        \"css\",\n        [\n            \"text/css\",\n            \"application/x-pointplus\"\n        ]\n    ],\n    [\n        \"csv\",\n        \"text/csv\"\n    ],\n    [\n        \"cu\",\n        \"application/cu-seeme\"\n    ],\n    [\n        \"curl\",\n        \"text/vnd.curl\"\n    ],\n    [\n        \"cww\",\n        \"application/prs.cww\"\n    ],\n    [\n        \"cxx\",\n        \"text/plain\"\n    ],\n    [\n        \"dae\",\n        \"model/vnd.collada+xml\"\n    ],\n    [\n        \"daf\",\n        \"application/vnd.mobius.daf\"\n    ],\n    [\n        \"davmount\",\n        \"application/davmount+xml\"\n    ],\n    [\n        \"dcr\",\n        \"application/x-director\"\n    ],\n    [\n        \"dcurl\",\n        \"text/vnd.curl.dcurl\"\n    ],\n    [\n        \"dd2\",\n        \"application/vnd.oma.dd2+xml\"\n    ],\n    [\n        \"ddd\",\n        \"application/vnd.fujixerox.ddd\"\n    ],\n    [\n        \"deb\",\n        \"application/x-debian-package\"\n    ],\n    [\n        \"deepv\",\n        \"application/x-deepv\"\n    ],\n    [\n        \"def\",\n        \"text/plain\"\n    ],\n    [\n        \"der\",\n        \"application/x-x509-ca-cert\"\n    ],\n    [\n        \"dfac\",\n        \"application/vnd.dreamfactory\"\n    ],\n    [\n        \"dif\",\n        \"video/x-dv\"\n    ],\n    [\n        \"dir\",\n        \"application/x-director\"\n    ],\n    [\n        \"dis\",\n        \"application/vnd.mobius.dis\"\n    ],\n    [\n        \"djvu\",\n        \"image/vnd.djvu\"\n    ],\n    [\n        \"dl\",\n        [\n            \"video/dl\",\n            \"video/x-dl\"\n        ]\n    ],\n    [\n        \"dll\",\n        \"application/x-msdownload\"\n    ],\n    [\n        \"dms\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"dna\",\n        \"application/vnd.dna\"\n    ],\n    [\n        \"doc\",\n        \"application/msword\"\n    ],\n    [\n        \"docm\",\n        \"application/vnd.ms-word.document.macroenabled.12\"\n    ],\n    [\n        \"docx\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n    ],\n    [\n        \"dot\",\n        \"application/msword\"\n    ],\n    [\n        \"dotm\",\n        \"application/vnd.ms-word.template.macroenabled.12\"\n    ],\n    [\n        \"dotx\",\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\"\n    ],\n    [\n        \"dp\",\n        [\n            \"application/commonground\",\n            \"application/vnd.osgi.dp\"\n        ]\n    ],\n    [\n        \"dpg\",\n        \"application/vnd.dpgraph\"\n    ],\n    [\n        \"dra\",\n        \"audio/vnd.dra\"\n    ],\n    [\n        \"drw\",\n        \"application/drafting\"\n    ],\n    [\n        \"dsc\",\n        \"text/prs.lines.tag\"\n    ],\n    [\n        \"dssc\",\n        \"application/dssc+der\"\n    ],\n    [\n        \"dtb\",\n        \"application/x-dtbook+xml\"\n    ],\n    [\n        \"dtd\",\n        \"application/xml-dtd\"\n    ],\n    [\n        \"dts\",\n        \"audio/vnd.dts\"\n    ],\n    [\n        \"dtshd\",\n        \"audio/vnd.dts.hd\"\n    ],\n    [\n        \"dump\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"dv\",\n        \"video/x-dv\"\n    ],\n    [\n        \"dvi\",\n        \"application/x-dvi\"\n    ],\n    [\n        \"dwf\",\n        [\n            \"model/vnd.dwf\",\n            \"drawing/x-dwf\"\n        ]\n    ],\n    [\n        \"dwg\",\n        [\n            \"application/acad\",\n            \"image/vnd.dwg\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"dxf\",\n        [\n            \"application/dxf\",\n            \"image/vnd.dwg\",\n            \"image/vnd.dxf\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"dxp\",\n        \"application/vnd.spotfire.dxp\"\n    ],\n    [\n        \"dxr\",\n        \"application/x-director\"\n    ],\n    [\n        \"ecelp4800\",\n        \"audio/vnd.nuera.ecelp4800\"\n    ],\n    [\n        \"ecelp7470\",\n        \"audio/vnd.nuera.ecelp7470\"\n    ],\n    [\n        \"ecelp9600\",\n        \"audio/vnd.nuera.ecelp9600\"\n    ],\n    [\n        \"edm\",\n        \"application/vnd.novadigm.edm\"\n    ],\n    [\n        \"edx\",\n        \"application/vnd.novadigm.edx\"\n    ],\n    [\n        \"efif\",\n        \"application/vnd.picsel\"\n    ],\n    [\n        \"ei6\",\n        \"application/vnd.pg.osasli\"\n    ],\n    [\n        \"el\",\n        \"text/x-script.elisp\"\n    ],\n    [\n        \"elc\",\n        [\n            \"application/x-elc\",\n            \"application/x-bytecode.elisp\"\n        ]\n    ],\n    [\n        \"eml\",\n        \"message/rfc822\"\n    ],\n    [\n        \"emma\",\n        \"application/emma+xml\"\n    ],\n    [\n        \"env\",\n        \"application/x-envoy\"\n    ],\n    [\n        \"eol\",\n        \"audio/vnd.digital-winds\"\n    ],\n    [\n        \"eot\",\n        \"application/vnd.ms-fontobject\"\n    ],\n    [\n        \"eps\",\n        \"application/postscript\"\n    ],\n    [\n        \"epub\",\n        \"application/epub+zip\"\n    ],\n    [\n        \"es\",\n        [\n            \"application/ecmascript\",\n            \"application/x-esrehber\"\n        ]\n    ],\n    [\n        \"es3\",\n        \"application/vnd.eszigno3+xml\"\n    ],\n    [\n        \"esf\",\n        \"application/vnd.epson.esf\"\n    ],\n    [\n        \"etx\",\n        \"text/x-setext\"\n    ],\n    [\n        \"evy\",\n        [\n            \"application/envoy\",\n            \"application/x-envoy\"\n        ]\n    ],\n    [\n        \"exe\",\n        [\n            \"application/octet-stream\",\n            \"application/x-msdownload\"\n        ]\n    ],\n    [\n        \"exi\",\n        \"application/exi\"\n    ],\n    [\n        \"ext\",\n        \"application/vnd.novadigm.ext\"\n    ],\n    [\n        \"ez2\",\n        \"application/vnd.ezpix-album\"\n    ],\n    [\n        \"ez3\",\n        \"application/vnd.ezpix-package\"\n    ],\n    [\n        \"f\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"f4v\",\n        \"video/x-f4v\"\n    ],\n    [\n        \"f77\",\n        \"text/x-fortran\"\n    ],\n    [\n        \"f90\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"fbs\",\n        \"image/vnd.fastbidsheet\"\n    ],\n    [\n        \"fcs\",\n        \"application/vnd.isac.fcs\"\n    ],\n    [\n        \"fdf\",\n        \"application/vnd.fdf\"\n    ],\n    [\n        \"fe_launch\",\n        \"application/vnd.denovo.fcselayout-link\"\n    ],\n    [\n        \"fg5\",\n        \"application/vnd.fujitsu.oasysgp\"\n    ],\n    [\n        \"fh\",\n        \"image/x-freehand\"\n    ],\n    [\n        \"fif\",\n        [\n            \"application/fractals\",\n            \"image/fif\"\n        ]\n    ],\n    [\n        \"fig\",\n        \"application/x-xfig\"\n    ],\n    [\n        \"fli\",\n        [\n            \"video/fli\",\n            \"video/x-fli\"\n        ]\n    ],\n    [\n        \"flo\",\n        [\n            \"image/florian\",\n            \"application/vnd.micrografx.flo\"\n        ]\n    ],\n    [\n        \"flr\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"flv\",\n        \"video/x-flv\"\n    ],\n    [\n        \"flw\",\n        \"application/vnd.kde.kivio\"\n    ],\n    [\n        \"flx\",\n        \"text/vnd.fmi.flexstor\"\n    ],\n    [\n        \"fly\",\n        \"text/vnd.fly\"\n    ],\n    [\n        \"fm\",\n        \"application/vnd.framemaker\"\n    ],\n    [\n        \"fmf\",\n        \"video/x-atomic3d-feature\"\n    ],\n    [\n        \"fnc\",\n        \"application/vnd.frogans.fnc\"\n    ],\n    [\n        \"for\",\n        [\n            \"text/plain\",\n            \"text/x-fortran\"\n        ]\n    ],\n    [\n        \"fpx\",\n        [\n            \"image/vnd.fpx\",\n            \"image/vnd.net-fpx\"\n        ]\n    ],\n    [\n        \"frl\",\n        \"application/freeloader\"\n    ],\n    [\n        \"fsc\",\n        \"application/vnd.fsc.weblaunch\"\n    ],\n    [\n        \"fst\",\n        \"image/vnd.fst\"\n    ],\n    [\n        \"ftc\",\n        \"application/vnd.fluxtime.clip\"\n    ],\n    [\n        \"fti\",\n        \"application/vnd.anser-web-funds-transfer-initiation\"\n    ],\n    [\n        \"funk\",\n        \"audio/make\"\n    ],\n    [\n        \"fvt\",\n        \"video/vnd.fvt\"\n    ],\n    [\n        \"fxp\",\n        \"application/vnd.adobe.fxp\"\n    ],\n    [\n        \"fzs\",\n        \"application/vnd.fuzzysheet\"\n    ],\n    [\n        \"g\",\n        \"text/plain\"\n    ],\n    [\n        \"g2w\",\n        \"application/vnd.geoplan\"\n    ],\n    [\n        \"g3\",\n        \"image/g3fax\"\n    ],\n    [\n        \"g3w\",\n        \"application/vnd.geospace\"\n    ],\n    [\n        \"gac\",\n        \"application/vnd.groove-account\"\n    ],\n    [\n        \"gdl\",\n        \"model/vnd.gdl\"\n    ],\n    [\n        \"geo\",\n        \"application/vnd.dynageo\"\n    ],\n    [\n        \"gex\",\n        \"application/vnd.geometry-explorer\"\n    ],\n    [\n        \"ggb\",\n        \"application/vnd.geogebra.file\"\n    ],\n    [\n        \"ggt\",\n        \"application/vnd.geogebra.tool\"\n    ],\n    [\n        \"ghf\",\n        \"application/vnd.groove-help\"\n    ],\n    [\n        \"gif\",\n        \"image/gif\"\n    ],\n    [\n        \"gim\",\n        \"application/vnd.groove-identity-message\"\n    ],\n    [\n        \"gl\",\n        [\n            \"video/gl\",\n            \"video/x-gl\"\n        ]\n    ],\n    [\n        \"gmx\",\n        \"application/vnd.gmx\"\n    ],\n    [\n        \"gnumeric\",\n        \"application/x-gnumeric\"\n    ],\n    [\n        \"gph\",\n        \"application/vnd.flographit\"\n    ],\n    [\n        \"gqf\",\n        \"application/vnd.grafeq\"\n    ],\n    [\n        \"gram\",\n        \"application/srgs\"\n    ],\n    [\n        \"grv\",\n        \"application/vnd.groove-injector\"\n    ],\n    [\n        \"grxml\",\n        \"application/srgs+xml\"\n    ],\n    [\n        \"gsd\",\n        \"audio/x-gsm\"\n    ],\n    [\n        \"gsf\",\n        \"application/x-font-ghostscript\"\n    ],\n    [\n        \"gsm\",\n        \"audio/x-gsm\"\n    ],\n    [\n        \"gsp\",\n        \"application/x-gsp\"\n    ],\n    [\n        \"gss\",\n        \"application/x-gss\"\n    ],\n    [\n        \"gtar\",\n        \"application/x-gtar\"\n    ],\n    [\n        \"gtm\",\n        \"application/vnd.groove-tool-message\"\n    ],\n    [\n        \"gtw\",\n        \"model/vnd.gtw\"\n    ],\n    [\n        \"gv\",\n        \"text/vnd.graphviz\"\n    ],\n    [\n        \"gxt\",\n        \"application/vnd.geonext\"\n    ],\n    [\n        \"gz\",\n        [\n            \"application/x-gzip\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"gzip\",\n        [\n            \"multipart/x-gzip\",\n            \"application/x-gzip\"\n        ]\n    ],\n    [\n        \"h\",\n        [\n            \"text/plain\",\n            \"text/x-h\"\n        ]\n    ],\n    [\n        \"h261\",\n        \"video/h261\"\n    ],\n    [\n        \"h263\",\n        \"video/h263\"\n    ],\n    [\n        \"h264\",\n        \"video/h264\"\n    ],\n    [\n        \"hal\",\n        \"application/vnd.hal+xml\"\n    ],\n    [\n        \"hbci\",\n        \"application/vnd.hbci\"\n    ],\n    [\n        \"hdf\",\n        \"application/x-hdf\"\n    ],\n    [\n        \"help\",\n        \"application/x-helpfile\"\n    ],\n    [\n        \"hgl\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hh\",\n        [\n            \"text/plain\",\n            \"text/x-h\"\n        ]\n    ],\n    [\n        \"hlb\",\n        \"text/x-script\"\n    ],\n    [\n        \"hlp\",\n        [\n            \"application/winhlp\",\n            \"application/hlp\",\n            \"application/x-helpfile\",\n            \"application/x-winhelp\"\n        ]\n    ],\n    [\n        \"hpg\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hpgl\",\n        \"application/vnd.hp-hpgl\"\n    ],\n    [\n        \"hpid\",\n        \"application/vnd.hp-hpid\"\n    ],\n    [\n        \"hps\",\n        \"application/vnd.hp-hps\"\n    ],\n    [\n        \"hqx\",\n        [\n            \"application/mac-binhex40\",\n            \"application/binhex\",\n            \"application/binhex4\",\n            \"application/mac-binhex\",\n            \"application/x-binhex40\",\n            \"application/x-mac-binhex40\"\n        ]\n    ],\n    [\n        \"hta\",\n        \"application/hta\"\n    ],\n    [\n        \"htc\",\n        \"text/x-component\"\n    ],\n    [\n        \"htke\",\n        \"application/vnd.kenameaapp\"\n    ],\n    [\n        \"htm\",\n        \"text/html\"\n    ],\n    [\n        \"html\",\n        \"text/html\"\n    ],\n    [\n        \"htmls\",\n        \"text/html\"\n    ],\n    [\n        \"htt\",\n        \"text/webviewhtml\"\n    ],\n    [\n        \"htx\",\n        \"text/html\"\n    ],\n    [\n        \"hvd\",\n        \"application/vnd.yamaha.hv-dic\"\n    ],\n    [\n        \"hvp\",\n        \"application/vnd.yamaha.hv-voice\"\n    ],\n    [\n        \"hvs\",\n        \"application/vnd.yamaha.hv-script\"\n    ],\n    [\n        \"i2g\",\n        \"application/vnd.intergeo\"\n    ],\n    [\n        \"icc\",\n        \"application/vnd.iccprofile\"\n    ],\n    [\n        \"ice\",\n        \"x-conference/x-cooltalk\"\n    ],\n    [\n        \"ico\",\n        \"image/x-icon\"\n    ],\n    [\n        \"ics\",\n        \"text/calendar\"\n    ],\n    [\n        \"idc\",\n        \"text/plain\"\n    ],\n    [\n        \"ief\",\n        \"image/ief\"\n    ],\n    [\n        \"iefs\",\n        \"image/ief\"\n    ],\n    [\n        \"ifm\",\n        \"application/vnd.shana.informed.formdata\"\n    ],\n    [\n        \"iges\",\n        [\n            \"application/iges\",\n            \"model/iges\"\n        ]\n    ],\n    [\n        \"igl\",\n        \"application/vnd.igloader\"\n    ],\n    [\n        \"igm\",\n        \"application/vnd.insors.igm\"\n    ],\n    [\n        \"igs\",\n        [\n            \"application/iges\",\n            \"model/iges\"\n        ]\n    ],\n    [\n        \"igx\",\n        \"application/vnd.micrografx.igx\"\n    ],\n    [\n        \"iif\",\n        \"application/vnd.shana.informed.interchange\"\n    ],\n    [\n        \"iii\",\n        \"application/x-iphone\"\n    ],\n    [\n        \"ima\",\n        \"application/x-ima\"\n    ],\n    [\n        \"imap\",\n        \"application/x-httpd-imap\"\n    ],\n    [\n        \"imp\",\n        \"application/vnd.accpac.simply.imp\"\n    ],\n    [\n        \"ims\",\n        \"application/vnd.ms-ims\"\n    ],\n    [\n        \"inf\",\n        \"application/inf\"\n    ],\n    [\n        \"ins\",\n        [\n            \"application/x-internet-signup\",\n            \"application/x-internett-signup\"\n        ]\n    ],\n    [\n        \"ip\",\n        \"application/x-ip2\"\n    ],\n    [\n        \"ipfix\",\n        \"application/ipfix\"\n    ],\n    [\n        \"ipk\",\n        \"application/vnd.shana.informed.package\"\n    ],\n    [\n        \"irm\",\n        \"application/vnd.ibm.rights-management\"\n    ],\n    [\n        \"irp\",\n        \"application/vnd.irepository.package+xml\"\n    ],\n    [\n        \"isp\",\n        \"application/x-internet-signup\"\n    ],\n    [\n        \"isu\",\n        \"video/x-isvideo\"\n    ],\n    [\n        \"it\",\n        \"audio/it\"\n    ],\n    [\n        \"itp\",\n        \"application/vnd.shana.informed.formtemplate\"\n    ],\n    [\n        \"iv\",\n        \"application/x-inventor\"\n    ],\n    [\n        \"ivp\",\n        \"application/vnd.immervision-ivp\"\n    ],\n    [\n        \"ivr\",\n        \"i-world/i-vrml\"\n    ],\n    [\n        \"ivu\",\n        \"application/vnd.immervision-ivu\"\n    ],\n    [\n        \"ivy\",\n        \"application/x-livescreen\"\n    ],\n    [\n        \"jad\",\n        \"text/vnd.sun.j2me.app-descriptor\"\n    ],\n    [\n        \"jam\",\n        [\n            \"application/vnd.jam\",\n            \"audio/x-jam\"\n        ]\n    ],\n    [\n        \"jar\",\n        \"application/java-archive\"\n    ],\n    [\n        \"jav\",\n        [\n            \"text/plain\",\n            \"text/x-java-source\"\n        ]\n    ],\n    [\n        \"java\",\n        [\n            \"text/plain\",\n            \"text/x-java-source,java\",\n            \"text/x-java-source\"\n        ]\n    ],\n    [\n        \"jcm\",\n        \"application/x-java-commerce\"\n    ],\n    [\n        \"jfif\",\n        [\n            \"image/pipeg\",\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jfif-tbnl\",\n        \"image/jpeg\"\n    ],\n    [\n        \"jisp\",\n        \"application/vnd.jisp\"\n    ],\n    [\n        \"jlt\",\n        \"application/vnd.hp-jlyt\"\n    ],\n    [\n        \"jnlp\",\n        \"application/x-java-jnlp-file\"\n    ],\n    [\n        \"joda\",\n        \"application/vnd.joost.joda-archive\"\n    ],\n    [\n        \"jpe\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpeg\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpg\",\n        [\n            \"image/jpeg\",\n            \"image/pjpeg\"\n        ]\n    ],\n    [\n        \"jpgv\",\n        \"video/jpeg\"\n    ],\n    [\n        \"jpm\",\n        \"video/jpm\"\n    ],\n    [\n        \"jps\",\n        \"image/x-jps\"\n    ],\n    [\n        \"js\",\n        [\n            \"application/javascript\",\n            \"application/ecmascript\",\n            \"text/javascript\",\n            \"text/ecmascript\",\n            \"application/x-javascript\"\n        ]\n    ],\n    [\n        \"json\",\n        \"application/json\"\n    ],\n    [\n        \"jut\",\n        \"image/jutvision\"\n    ],\n    [\n        \"kar\",\n        [\n            \"audio/midi\",\n            \"music/x-karaoke\"\n        ]\n    ],\n    [\n        \"karbon\",\n        \"application/vnd.kde.karbon\"\n    ],\n    [\n        \"kfo\",\n        \"application/vnd.kde.kformula\"\n    ],\n    [\n        \"kia\",\n        \"application/vnd.kidspiration\"\n    ],\n    [\n        \"kml\",\n        \"application/vnd.google-earth.kml+xml\"\n    ],\n    [\n        \"kmz\",\n        \"application/vnd.google-earth.kmz\"\n    ],\n    [\n        \"kne\",\n        \"application/vnd.kinar\"\n    ],\n    [\n        \"kon\",\n        \"application/vnd.kde.kontour\"\n    ],\n    [\n        \"kpr\",\n        \"application/vnd.kde.kpresenter\"\n    ],\n    [\n        \"ksh\",\n        [\n            \"application/x-ksh\",\n            \"text/x-script.ksh\"\n        ]\n    ],\n    [\n        \"ksp\",\n        \"application/vnd.kde.kspread\"\n    ],\n    [\n        \"ktx\",\n        \"image/ktx\"\n    ],\n    [\n        \"ktz\",\n        \"application/vnd.kahootz\"\n    ],\n    [\n        \"kwd\",\n        \"application/vnd.kde.kword\"\n    ],\n    [\n        \"la\",\n        [\n            \"audio/nspaudio\",\n            \"audio/x-nspaudio\"\n        ]\n    ],\n    [\n        \"lam\",\n        \"audio/x-liveaudio\"\n    ],\n    [\n        \"lasxml\",\n        \"application/vnd.las.las+xml\"\n    ],\n    [\n        \"latex\",\n        \"application/x-latex\"\n    ],\n    [\n        \"lbd\",\n        \"application/vnd.llamagraphics.life-balance.desktop\"\n    ],\n    [\n        \"lbe\",\n        \"application/vnd.llamagraphics.life-balance.exchange+xml\"\n    ],\n    [\n        \"les\",\n        \"application/vnd.hhe.lesson-player\"\n    ],\n    [\n        \"lha\",\n        [\n            \"application/octet-stream\",\n            \"application/lha\",\n            \"application/x-lha\"\n        ]\n    ],\n    [\n        \"lhx\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"link66\",\n        \"application/vnd.route66.link66+xml\"\n    ],\n    [\n        \"list\",\n        \"text/plain\"\n    ],\n    [\n        \"lma\",\n        [\n            \"audio/nspaudio\",\n            \"audio/x-nspaudio\"\n        ]\n    ],\n    [\n        \"log\",\n        \"text/plain\"\n    ],\n    [\n        \"lrm\",\n        \"application/vnd.ms-lrm\"\n    ],\n    [\n        \"lsf\",\n        \"video/x-la-asf\"\n    ],\n    [\n        \"lsp\",\n        [\n            \"application/x-lisp\",\n            \"text/x-script.lisp\"\n        ]\n    ],\n    [\n        \"lst\",\n        \"text/plain\"\n    ],\n    [\n        \"lsx\",\n        [\n            \"video/x-la-asf\",\n            \"text/x-la-asf\"\n        ]\n    ],\n    [\n        \"ltf\",\n        \"application/vnd.frogans.ltf\"\n    ],\n    [\n        \"ltx\",\n        \"application/x-latex\"\n    ],\n    [\n        \"lvp\",\n        \"audio/vnd.lucent.voice\"\n    ],\n    [\n        \"lwp\",\n        \"application/vnd.lotus-wordpro\"\n    ],\n    [\n        \"lzh\",\n        [\n            \"application/octet-stream\",\n            \"application/x-lzh\"\n        ]\n    ],\n    [\n        \"lzx\",\n        [\n            \"application/lzx\",\n            \"application/octet-stream\",\n            \"application/x-lzx\"\n        ]\n    ],\n    [\n        \"m\",\n        [\n            \"text/plain\",\n            \"text/x-m\"\n        ]\n    ],\n    [\n        \"m13\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"m14\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"m1v\",\n        \"video/mpeg\"\n    ],\n    [\n        \"m21\",\n        \"application/mp21\"\n    ],\n    [\n        \"m2a\",\n        \"audio/mpeg\"\n    ],\n    [\n        \"m2v\",\n        \"video/mpeg\"\n    ],\n    [\n        \"m3u\",\n        [\n            \"audio/x-mpegurl\",\n            \"audio/x-mpequrl\"\n        ]\n    ],\n    [\n        \"m3u8\",\n        \"application/vnd.apple.mpegurl\"\n    ],\n    [\n        \"m4v\",\n        \"video/x-m4v\"\n    ],\n    [\n        \"ma\",\n        \"application/mathematica\"\n    ],\n    [\n        \"mads\",\n        \"application/mads+xml\"\n    ],\n    [\n        \"mag\",\n        \"application/vnd.ecowin.chart\"\n    ],\n    [\n        \"man\",\n        \"application/x-troff-man\"\n    ],\n    [\n        \"map\",\n        \"application/x-navimap\"\n    ],\n    [\n        \"mar\",\n        \"text/plain\"\n    ],\n    [\n        \"mathml\",\n        \"application/mathml+xml\"\n    ],\n    [\n        \"mbd\",\n        \"application/mbedlet\"\n    ],\n    [\n        \"mbk\",\n        \"application/vnd.mobius.mbk\"\n    ],\n    [\n        \"mbox\",\n        \"application/mbox\"\n    ],\n    [\n        \"mc$\",\n        \"application/x-magic-cap-package-1.0\"\n    ],\n    [\n        \"mc1\",\n        \"application/vnd.medcalcdata\"\n    ],\n    [\n        \"mcd\",\n        [\n            \"application/mcad\",\n            \"application/vnd.mcd\",\n            \"application/x-mathcad\"\n        ]\n    ],\n    [\n        \"mcf\",\n        [\n            \"image/vasa\",\n            \"text/mcf\"\n        ]\n    ],\n    [\n        \"mcp\",\n        \"application/netmc\"\n    ],\n    [\n        \"mcurl\",\n        \"text/vnd.curl.mcurl\"\n    ],\n    [\n        \"mdb\",\n        \"application/x-msaccess\"\n    ],\n    [\n        \"mdi\",\n        \"image/vnd.ms-modi\"\n    ],\n    [\n        \"me\",\n        \"application/x-troff-me\"\n    ],\n    [\n        \"meta4\",\n        \"application/metalink4+xml\"\n    ],\n    [\n        \"mets\",\n        \"application/mets+xml\"\n    ],\n    [\n        \"mfm\",\n        \"application/vnd.mfmp\"\n    ],\n    [\n        \"mgp\",\n        \"application/vnd.osgeo.mapguide.package\"\n    ],\n    [\n        \"mgz\",\n        \"application/vnd.proteus.magazine\"\n    ],\n    [\n        \"mht\",\n        \"message/rfc822\"\n    ],\n    [\n        \"mhtml\",\n        \"message/rfc822\"\n    ],\n    [\n        \"mid\",\n        [\n            \"audio/mid\",\n            \"audio/midi\",\n            \"music/crescendo\",\n            \"x-music/x-midi\",\n            \"audio/x-midi\",\n            \"application/x-midi\",\n            \"audio/x-mid\"\n        ]\n    ],\n    [\n        \"midi\",\n        [\n            \"audio/midi\",\n            \"music/crescendo\",\n            \"x-music/x-midi\",\n            \"audio/x-midi\",\n            \"application/x-midi\",\n            \"audio/x-mid\"\n        ]\n    ],\n    [\n        \"mif\",\n        [\n            \"application/vnd.mif\",\n            \"application/x-mif\",\n            \"application/x-frame\"\n        ]\n    ],\n    [\n        \"mime\",\n        [\n            \"message/rfc822\",\n            \"www/mime\"\n        ]\n    ],\n    [\n        \"mj2\",\n        \"video/mj2\"\n    ],\n    [\n        \"mjf\",\n        \"audio/x-vnd.audioexplosion.mjuicemediafile\"\n    ],\n    [\n        \"mjpg\",\n        \"video/x-motion-jpeg\"\n    ],\n    [\n        \"mlp\",\n        \"application/vnd.dolby.mlp\"\n    ],\n    [\n        \"mm\",\n        [\n            \"application/base64\",\n            \"application/x-meme\"\n        ]\n    ],\n    [\n        \"mmd\",\n        \"application/vnd.chipnuts.karaoke-mmd\"\n    ],\n    [\n        \"mme\",\n        \"application/base64\"\n    ],\n    [\n        \"mmf\",\n        \"application/vnd.smaf\"\n    ],\n    [\n        \"mmr\",\n        \"image/vnd.fujixerox.edmics-mmr\"\n    ],\n    [\n        \"mny\",\n        \"application/x-msmoney\"\n    ],\n    [\n        \"mod\",\n        [\n            \"audio/mod\",\n            \"audio/x-mod\"\n        ]\n    ],\n    [\n        \"mods\",\n        \"application/mods+xml\"\n    ],\n    [\n        \"moov\",\n        \"video/quicktime\"\n    ],\n    [\n        \"mov\",\n        \"video/quicktime\"\n    ],\n    [\n        \"movie\",\n        \"video/x-sgi-movie\"\n    ],\n    [\n        \"mp2\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\",\n            \"video/x-mpeg\",\n            \"audio/x-mpeg\",\n            \"video/x-mpeq2a\"\n        ]\n    ],\n    [\n        \"mp3\",\n        [\n            \"audio/mpeg\",\n            \"audio/mpeg3\",\n            \"video/mpeg\",\n            \"audio/x-mpeg-3\",\n            \"video/x-mpeg\"\n        ]\n    ],\n    [\n        \"mp4\",\n        [\n            \"video/mp4\",\n            \"application/mp4\"\n        ]\n    ],\n    [\n        \"mp4a\",\n        \"audio/mp4\"\n    ],\n    [\n        \"mpa\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\"\n        ]\n    ],\n    [\n        \"mpc\",\n        [\n            \"application/vnd.mophun.certificate\",\n            \"application/x-project\"\n        ]\n    ],\n    [\n        \"mpe\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpeg\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpg\",\n        [\n            \"video/mpeg\",\n            \"audio/mpeg\"\n        ]\n    ],\n    [\n        \"mpga\",\n        \"audio/mpeg\"\n    ],\n    [\n        \"mpkg\",\n        \"application/vnd.apple.installer+xml\"\n    ],\n    [\n        \"mpm\",\n        \"application/vnd.blueice.multipass\"\n    ],\n    [\n        \"mpn\",\n        \"application/vnd.mophun.application\"\n    ],\n    [\n        \"mpp\",\n        \"application/vnd.ms-project\"\n    ],\n    [\n        \"mpt\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpv\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpv2\",\n        \"video/mpeg\"\n    ],\n    [\n        \"mpx\",\n        \"application/x-project\"\n    ],\n    [\n        \"mpy\",\n        \"application/vnd.ibm.minipay\"\n    ],\n    [\n        \"mqy\",\n        \"application/vnd.mobius.mqy\"\n    ],\n    [\n        \"mrc\",\n        \"application/marc\"\n    ],\n    [\n        \"mrcx\",\n        \"application/marcxml+xml\"\n    ],\n    [\n        \"ms\",\n        \"application/x-troff-ms\"\n    ],\n    [\n        \"mscml\",\n        \"application/mediaservercontrol+xml\"\n    ],\n    [\n        \"mseq\",\n        \"application/vnd.mseq\"\n    ],\n    [\n        \"msf\",\n        \"application/vnd.epson.msf\"\n    ],\n    [\n        \"msg\",\n        \"application/vnd.ms-outlook\"\n    ],\n    [\n        \"msh\",\n        \"model/mesh\"\n    ],\n    [\n        \"msl\",\n        \"application/vnd.mobius.msl\"\n    ],\n    [\n        \"msty\",\n        \"application/vnd.muvee.style\"\n    ],\n    [\n        \"mts\",\n        \"model/vnd.mts\"\n    ],\n    [\n        \"mus\",\n        \"application/vnd.musician\"\n    ],\n    [\n        \"musicxml\",\n        \"application/vnd.recordare.musicxml+xml\"\n    ],\n    [\n        \"mv\",\n        \"video/x-sgi-movie\"\n    ],\n    [\n        \"mvb\",\n        \"application/x-msmediaview\"\n    ],\n    [\n        \"mwf\",\n        \"application/vnd.mfer\"\n    ],\n    [\n        \"mxf\",\n        \"application/mxf\"\n    ],\n    [\n        \"mxl\",\n        \"application/vnd.recordare.musicxml\"\n    ],\n    [\n        \"mxml\",\n        \"application/xv+xml\"\n    ],\n    [\n        \"mxs\",\n        \"application/vnd.triscape.mxs\"\n    ],\n    [\n        \"mxu\",\n        \"video/vnd.mpegurl\"\n    ],\n    [\n        \"my\",\n        \"audio/make\"\n    ],\n    [\n        \"mzz\",\n        \"application/x-vnd.audioexplosion.mzz\"\n    ],\n    [\n        \"n-gage\",\n        \"application/vnd.nokia.n-gage.symbian.install\"\n    ],\n    [\n        \"n3\",\n        \"text/n3\"\n    ],\n    [\n        \"nap\",\n        \"image/naplps\"\n    ],\n    [\n        \"naplps\",\n        \"image/naplps\"\n    ],\n    [\n        \"nbp\",\n        \"application/vnd.wolfram.player\"\n    ],\n    [\n        \"nc\",\n        \"application/x-netcdf\"\n    ],\n    [\n        \"ncm\",\n        \"application/vnd.nokia.configuration-message\"\n    ],\n    [\n        \"ncx\",\n        \"application/x-dtbncx+xml\"\n    ],\n    [\n        \"ngdat\",\n        \"application/vnd.nokia.n-gage.data\"\n    ],\n    [\n        \"nif\",\n        \"image/x-niff\"\n    ],\n    [\n        \"niff\",\n        \"image/x-niff\"\n    ],\n    [\n        \"nix\",\n        \"application/x-mix-transfer\"\n    ],\n    [\n        \"nlu\",\n        \"application/vnd.neurolanguage.nlu\"\n    ],\n    [\n        \"nml\",\n        \"application/vnd.enliven\"\n    ],\n    [\n        \"nnd\",\n        \"application/vnd.noblenet-directory\"\n    ],\n    [\n        \"nns\",\n        \"application/vnd.noblenet-sealer\"\n    ],\n    [\n        \"nnw\",\n        \"application/vnd.noblenet-web\"\n    ],\n    [\n        \"npx\",\n        \"image/vnd.net-fpx\"\n    ],\n    [\n        \"nsc\",\n        \"application/x-conference\"\n    ],\n    [\n        \"nsf\",\n        \"application/vnd.lotus-notes\"\n    ],\n    [\n        \"nvd\",\n        \"application/x-navidoc\"\n    ],\n    [\n        \"nws\",\n        \"message/rfc822\"\n    ],\n    [\n        \"o\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"oa2\",\n        \"application/vnd.fujitsu.oasys2\"\n    ],\n    [\n        \"oa3\",\n        \"application/vnd.fujitsu.oasys3\"\n    ],\n    [\n        \"oas\",\n        \"application/vnd.fujitsu.oasys\"\n    ],\n    [\n        \"obd\",\n        \"application/x-msbinder\"\n    ],\n    [\n        \"oda\",\n        \"application/oda\"\n    ],\n    [\n        \"odb\",\n        \"application/vnd.oasis.opendocument.database\"\n    ],\n    [\n        \"odc\",\n        \"application/vnd.oasis.opendocument.chart\"\n    ],\n    [\n        \"odf\",\n        \"application/vnd.oasis.opendocument.formula\"\n    ],\n    [\n        \"odft\",\n        \"application/vnd.oasis.opendocument.formula-template\"\n    ],\n    [\n        \"odg\",\n        \"application/vnd.oasis.opendocument.graphics\"\n    ],\n    [\n        \"odi\",\n        \"application/vnd.oasis.opendocument.image\"\n    ],\n    [\n        \"odm\",\n        \"application/vnd.oasis.opendocument.text-master\"\n    ],\n    [\n        \"odp\",\n        \"application/vnd.oasis.opendocument.presentation\"\n    ],\n    [\n        \"ods\",\n        \"application/vnd.oasis.opendocument.spreadsheet\"\n    ],\n    [\n        \"odt\",\n        \"application/vnd.oasis.opendocument.text\"\n    ],\n    [\n        \"oga\",\n        \"audio/ogg\"\n    ],\n    [\n        \"ogv\",\n        \"video/ogg\"\n    ],\n    [\n        \"ogx\",\n        \"application/ogg\"\n    ],\n    [\n        \"omc\",\n        \"application/x-omc\"\n    ],\n    [\n        \"omcd\",\n        \"application/x-omcdatamaker\"\n    ],\n    [\n        \"omcr\",\n        \"application/x-omcregerator\"\n    ],\n    [\n        \"onetoc\",\n        \"application/onenote\"\n    ],\n    [\n        \"opf\",\n        \"application/oebps-package+xml\"\n    ],\n    [\n        \"org\",\n        \"application/vnd.lotus-organizer\"\n    ],\n    [\n        \"osf\",\n        \"application/vnd.yamaha.openscoreformat\"\n    ],\n    [\n        \"osfpvg\",\n        \"application/vnd.yamaha.openscoreformat.osfpvg+xml\"\n    ],\n    [\n        \"otc\",\n        \"application/vnd.oasis.opendocument.chart-template\"\n    ],\n    [\n        \"otf\",\n        \"application/x-font-otf\"\n    ],\n    [\n        \"otg\",\n        \"application/vnd.oasis.opendocument.graphics-template\"\n    ],\n    [\n        \"oth\",\n        \"application/vnd.oasis.opendocument.text-web\"\n    ],\n    [\n        \"oti\",\n        \"application/vnd.oasis.opendocument.image-template\"\n    ],\n    [\n        \"otp\",\n        \"application/vnd.oasis.opendocument.presentation-template\"\n    ],\n    [\n        \"ots\",\n        \"application/vnd.oasis.opendocument.spreadsheet-template\"\n    ],\n    [\n        \"ott\",\n        \"application/vnd.oasis.opendocument.text-template\"\n    ],\n    [\n        \"oxt\",\n        \"application/vnd.openofficeorg.extension\"\n    ],\n    [\n        \"p\",\n        \"text/x-pascal\"\n    ],\n    [\n        \"p10\",\n        [\n            \"application/pkcs10\",\n            \"application/x-pkcs10\"\n        ]\n    ],\n    [\n        \"p12\",\n        [\n            \"application/pkcs-12\",\n            \"application/x-pkcs12\"\n        ]\n    ],\n    [\n        \"p7a\",\n        \"application/x-pkcs7-signature\"\n    ],\n    [\n        \"p7b\",\n        \"application/x-pkcs7-certificates\"\n    ],\n    [\n        \"p7c\",\n        [\n            \"application/pkcs7-mime\",\n            \"application/x-pkcs7-mime\"\n        ]\n    ],\n    [\n        \"p7m\",\n        [\n            \"application/pkcs7-mime\",\n            \"application/x-pkcs7-mime\"\n        ]\n    ],\n    [\n        \"p7r\",\n        \"application/x-pkcs7-certreqresp\"\n    ],\n    [\n        \"p7s\",\n        [\n            \"application/pkcs7-signature\",\n            \"application/x-pkcs7-signature\"\n        ]\n    ],\n    [\n        \"p8\",\n        \"application/pkcs8\"\n    ],\n    [\n        \"par\",\n        \"text/plain-bas\"\n    ],\n    [\n        \"part\",\n        \"application/pro_eng\"\n    ],\n    [\n        \"pas\",\n        \"text/pascal\"\n    ],\n    [\n        \"paw\",\n        \"application/vnd.pawaafile\"\n    ],\n    [\n        \"pbd\",\n        \"application/vnd.powerbuilder6\"\n    ],\n    [\n        \"pbm\",\n        \"image/x-portable-bitmap\"\n    ],\n    [\n        \"pcf\",\n        \"application/x-font-pcf\"\n    ],\n    [\n        \"pcl\",\n        [\n            \"application/vnd.hp-pcl\",\n            \"application/x-pcl\"\n        ]\n    ],\n    [\n        \"pclxl\",\n        \"application/vnd.hp-pclxl\"\n    ],\n    [\n        \"pct\",\n        \"image/x-pict\"\n    ],\n    [\n        \"pcurl\",\n        \"application/vnd.curl.pcurl\"\n    ],\n    [\n        \"pcx\",\n        \"image/x-pcx\"\n    ],\n    [\n        \"pdb\",\n        [\n            \"application/vnd.palm\",\n            \"chemical/x-pdb\"\n        ]\n    ],\n    [\n        \"pdf\",\n        \"application/pdf\"\n    ],\n    [\n        \"pfa\",\n        \"application/x-font-type1\"\n    ],\n    [\n        \"pfr\",\n        \"application/font-tdpfr\"\n    ],\n    [\n        \"pfunk\",\n        [\n            \"audio/make\",\n            \"audio/make.my.funk\"\n        ]\n    ],\n    [\n        \"pfx\",\n        \"application/x-pkcs12\"\n    ],\n    [\n        \"pgm\",\n        [\n            \"image/x-portable-graymap\",\n            \"image/x-portable-greymap\"\n        ]\n    ],\n    [\n        \"pgn\",\n        \"application/x-chess-pgn\"\n    ],\n    [\n        \"pgp\",\n        \"application/pgp-signature\"\n    ],\n    [\n        \"pic\",\n        [\n            \"image/pict\",\n            \"image/x-pict\"\n        ]\n    ],\n    [\n        \"pict\",\n        \"image/pict\"\n    ],\n    [\n        \"pkg\",\n        \"application/x-newton-compatible-pkg\"\n    ],\n    [\n        \"pki\",\n        \"application/pkixcmp\"\n    ],\n    [\n        \"pkipath\",\n        \"application/pkix-pkipath\"\n    ],\n    [\n        \"pko\",\n        [\n            \"application/ynd.ms-pkipko\",\n            \"application/vnd.ms-pki.pko\"\n        ]\n    ],\n    [\n        \"pl\",\n        [\n            \"text/plain\",\n            \"text/x-script.perl\"\n        ]\n    ],\n    [\n        \"plb\",\n        \"application/vnd.3gpp.pic-bw-large\"\n    ],\n    [\n        \"plc\",\n        \"application/vnd.mobius.plc\"\n    ],\n    [\n        \"plf\",\n        \"application/vnd.pocketlearn\"\n    ],\n    [\n        \"pls\",\n        \"application/pls+xml\"\n    ],\n    [\n        \"plx\",\n        \"application/x-pixclscript\"\n    ],\n    [\n        \"pm\",\n        [\n            \"text/x-script.perl-module\",\n            \"image/x-xpixmap\"\n        ]\n    ],\n    [\n        \"pm4\",\n        \"application/x-pagemaker\"\n    ],\n    [\n        \"pm5\",\n        \"application/x-pagemaker\"\n    ],\n    [\n        \"pma\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pmc\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pml\",\n        [\n            \"application/vnd.ctc-posml\",\n            \"application/x-perfmon\"\n        ]\n    ],\n    [\n        \"pmr\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"pmw\",\n        \"application/x-perfmon\"\n    ],\n    [\n        \"png\",\n        \"image/png\"\n    ],\n    [\n        \"pnm\",\n        [\n            \"application/x-portable-anymap\",\n            \"image/x-portable-anymap\"\n        ]\n    ],\n    [\n        \"portpkg\",\n        \"application/vnd.macports.portpkg\"\n    ],\n    [\n        \"pot\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\"\n        ]\n    ],\n    [\n        \"potm\",\n        \"application/vnd.ms-powerpoint.template.macroenabled.12\"\n    ],\n    [\n        \"potx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.template\"\n    ],\n    [\n        \"pov\",\n        \"model/x-pov\"\n    ],\n    [\n        \"ppa\",\n        \"application/vnd.ms-powerpoint\"\n    ],\n    [\n        \"ppam\",\n        \"application/vnd.ms-powerpoint.addin.macroenabled.12\"\n    ],\n    [\n        \"ppd\",\n        \"application/vnd.cups-ppd\"\n    ],\n    [\n        \"ppm\",\n        \"image/x-portable-pixmap\"\n    ],\n    [\n        \"pps\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\"\n        ]\n    ],\n    [\n        \"ppsm\",\n        \"application/vnd.ms-powerpoint.slideshow.macroenabled.12\"\n    ],\n    [\n        \"ppsx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\"\n    ],\n    [\n        \"ppt\",\n        [\n            \"application/vnd.ms-powerpoint\",\n            \"application/mspowerpoint\",\n            \"application/powerpoint\",\n            \"application/x-mspowerpoint\"\n        ]\n    ],\n    [\n        \"pptm\",\n        \"application/vnd.ms-powerpoint.presentation.macroenabled.12\"\n    ],\n    [\n        \"pptx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n    ],\n    [\n        \"ppz\",\n        \"application/mspowerpoint\"\n    ],\n    [\n        \"prc\",\n        \"application/x-mobipocket-ebook\"\n    ],\n    [\n        \"pre\",\n        [\n            \"application/vnd.lotus-freelance\",\n            \"application/x-freelance\"\n        ]\n    ],\n    [\n        \"prf\",\n        \"application/pics-rules\"\n    ],\n    [\n        \"prt\",\n        \"application/pro_eng\"\n    ],\n    [\n        \"ps\",\n        \"application/postscript\"\n    ],\n    [\n        \"psb\",\n        \"application/vnd.3gpp.pic-bw-small\"\n    ],\n    [\n        \"psd\",\n        [\n            \"application/octet-stream\",\n            \"image/vnd.adobe.photoshop\"\n        ]\n    ],\n    [\n        \"psf\",\n        \"application/x-font-linux-psf\"\n    ],\n    [\n        \"pskcxml\",\n        \"application/pskc+xml\"\n    ],\n    [\n        \"ptid\",\n        \"application/vnd.pvi.ptid1\"\n    ],\n    [\n        \"pub\",\n        \"application/x-mspublisher\"\n    ],\n    [\n        \"pvb\",\n        \"application/vnd.3gpp.pic-bw-var\"\n    ],\n    [\n        \"pvu\",\n        \"paleovu/x-pv\"\n    ],\n    [\n        \"pwn\",\n        \"application/vnd.3m.post-it-notes\"\n    ],\n    [\n        \"pwz\",\n        \"application/vnd.ms-powerpoint\"\n    ],\n    [\n        \"py\",\n        \"text/x-script.phyton\"\n    ],\n    [\n        \"pya\",\n        \"audio/vnd.ms-playready.media.pya\"\n    ],\n    [\n        \"pyc\",\n        \"application/x-bytecode.python\"\n    ],\n    [\n        \"pyv\",\n        \"video/vnd.ms-playready.media.pyv\"\n    ],\n    [\n        \"qam\",\n        \"application/vnd.epson.quickanime\"\n    ],\n    [\n        \"qbo\",\n        \"application/vnd.intu.qbo\"\n    ],\n    [\n        \"qcp\",\n        \"audio/vnd.qcelp\"\n    ],\n    [\n        \"qd3\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"qd3d\",\n        \"x-world/x-3dmf\"\n    ],\n    [\n        \"qfx\",\n        \"application/vnd.intu.qfx\"\n    ],\n    [\n        \"qif\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qps\",\n        \"application/vnd.publishare-delta-tree\"\n    ],\n    [\n        \"qt\",\n        \"video/quicktime\"\n    ],\n    [\n        \"qtc\",\n        \"video/x-qtc\"\n    ],\n    [\n        \"qti\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qtif\",\n        \"image/x-quicktime\"\n    ],\n    [\n        \"qxd\",\n        \"application/vnd.quark.quarkxpress\"\n    ],\n    [\n        \"ra\",\n        [\n            \"audio/x-realaudio\",\n            \"audio/x-pn-realaudio\",\n            \"audio/x-pn-realaudio-plugin\"\n        ]\n    ],\n    [\n        \"ram\",\n        \"audio/x-pn-realaudio\"\n    ],\n    [\n        \"rar\",\n        \"application/x-rar-compressed\"\n    ],\n    [\n        \"ras\",\n        [\n            \"image/cmu-raster\",\n            \"application/x-cmu-raster\",\n            \"image/x-cmu-raster\"\n        ]\n    ],\n    [\n        \"rast\",\n        \"image/cmu-raster\"\n    ],\n    [\n        \"rcprofile\",\n        \"application/vnd.ipunplugged.rcprofile\"\n    ],\n    [\n        \"rdf\",\n        \"application/rdf+xml\"\n    ],\n    [\n        \"rdz\",\n        \"application/vnd.data-vision.rdz\"\n    ],\n    [\n        \"rep\",\n        \"application/vnd.businessobjects\"\n    ],\n    [\n        \"res\",\n        \"application/x-dtbresource+xml\"\n    ],\n    [\n        \"rexx\",\n        \"text/x-script.rexx\"\n    ],\n    [\n        \"rf\",\n        \"image/vnd.rn-realflash\"\n    ],\n    [\n        \"rgb\",\n        \"image/x-rgb\"\n    ],\n    [\n        \"rif\",\n        \"application/reginfo+xml\"\n    ],\n    [\n        \"rip\",\n        \"audio/vnd.rip\"\n    ],\n    [\n        \"rl\",\n        \"application/resource-lists+xml\"\n    ],\n    [\n        \"rlc\",\n        \"image/vnd.fujixerox.edmics-rlc\"\n    ],\n    [\n        \"rld\",\n        \"application/resource-lists-diff+xml\"\n    ],\n    [\n        \"rm\",\n        [\n            \"application/vnd.rn-realmedia\",\n            \"audio/x-pn-realaudio\"\n        ]\n    ],\n    [\n        \"rmi\",\n        \"audio/mid\"\n    ],\n    [\n        \"rmm\",\n        \"audio/x-pn-realaudio\"\n    ],\n    [\n        \"rmp\",\n        [\n            \"audio/x-pn-realaudio-plugin\",\n            \"audio/x-pn-realaudio\"\n        ]\n    ],\n    [\n        \"rms\",\n        \"application/vnd.jcp.javame.midlet-rms\"\n    ],\n    [\n        \"rnc\",\n        \"application/relax-ng-compact-syntax\"\n    ],\n    [\n        \"rng\",\n        [\n            \"application/ringing-tones\",\n            \"application/vnd.nokia.ringing-tone\"\n        ]\n    ],\n    [\n        \"rnx\",\n        \"application/vnd.rn-realplayer\"\n    ],\n    [\n        \"roff\",\n        \"application/x-troff\"\n    ],\n    [\n        \"rp\",\n        \"image/vnd.rn-realpix\"\n    ],\n    [\n        \"rp9\",\n        \"application/vnd.cloanto.rp9\"\n    ],\n    [\n        \"rpm\",\n        \"audio/x-pn-realaudio-plugin\"\n    ],\n    [\n        \"rpss\",\n        \"application/vnd.nokia.radio-presets\"\n    ],\n    [\n        \"rpst\",\n        \"application/vnd.nokia.radio-preset\"\n    ],\n    [\n        \"rq\",\n        \"application/sparql-query\"\n    ],\n    [\n        \"rs\",\n        \"application/rls-services+xml\"\n    ],\n    [\n        \"rsd\",\n        \"application/rsd+xml\"\n    ],\n    [\n        \"rt\",\n        [\n            \"text/richtext\",\n            \"text/vnd.rn-realtext\"\n        ]\n    ],\n    [\n        \"rtf\",\n        [\n            \"application/rtf\",\n            \"text/richtext\",\n            \"application/x-rtf\"\n        ]\n    ],\n    [\n        \"rtx\",\n        [\n            \"text/richtext\",\n            \"application/rtf\"\n        ]\n    ],\n    [\n        \"rv\",\n        \"video/vnd.rn-realvideo\"\n    ],\n    [\n        \"s\",\n        \"text/x-asm\"\n    ],\n    [\n        \"s3m\",\n        \"audio/s3m\"\n    ],\n    [\n        \"saf\",\n        \"application/vnd.yamaha.smaf-audio\"\n    ],\n    [\n        \"saveme\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"sbk\",\n        \"application/x-tbook\"\n    ],\n    [\n        \"sbml\",\n        \"application/sbml+xml\"\n    ],\n    [\n        \"sc\",\n        \"application/vnd.ibm.secure-container\"\n    ],\n    [\n        \"scd\",\n        \"application/x-msschedule\"\n    ],\n    [\n        \"scm\",\n        [\n            \"application/vnd.lotus-screencam\",\n            \"video/x-scm\",\n            \"text/x-script.guile\",\n            \"application/x-lotusscreencam\",\n            \"text/x-script.scheme\"\n        ]\n    ],\n    [\n        \"scq\",\n        \"application/scvp-cv-request\"\n    ],\n    [\n        \"scs\",\n        \"application/scvp-cv-response\"\n    ],\n    [\n        \"sct\",\n        \"text/scriptlet\"\n    ],\n    [\n        \"scurl\",\n        \"text/vnd.curl.scurl\"\n    ],\n    [\n        \"sda\",\n        \"application/vnd.stardivision.draw\"\n    ],\n    [\n        \"sdc\",\n        \"application/vnd.stardivision.calc\"\n    ],\n    [\n        \"sdd\",\n        \"application/vnd.stardivision.impress\"\n    ],\n    [\n        \"sdkm\",\n        \"application/vnd.solent.sdkm+xml\"\n    ],\n    [\n        \"sdml\",\n        \"text/plain\"\n    ],\n    [\n        \"sdp\",\n        [\n            \"application/sdp\",\n            \"application/x-sdp\"\n        ]\n    ],\n    [\n        \"sdr\",\n        \"application/sounder\"\n    ],\n    [\n        \"sdw\",\n        \"application/vnd.stardivision.writer\"\n    ],\n    [\n        \"sea\",\n        [\n            \"application/sea\",\n            \"application/x-sea\"\n        ]\n    ],\n    [\n        \"see\",\n        \"application/vnd.seemail\"\n    ],\n    [\n        \"seed\",\n        \"application/vnd.fdsn.seed\"\n    ],\n    [\n        \"sema\",\n        \"application/vnd.sema\"\n    ],\n    [\n        \"semd\",\n        \"application/vnd.semd\"\n    ],\n    [\n        \"semf\",\n        \"application/vnd.semf\"\n    ],\n    [\n        \"ser\",\n        \"application/java-serialized-object\"\n    ],\n    [\n        \"set\",\n        \"application/set\"\n    ],\n    [\n        \"setpay\",\n        \"application/set-payment-initiation\"\n    ],\n    [\n        \"setreg\",\n        \"application/set-registration-initiation\"\n    ],\n    [\n        \"sfd-hdstx\",\n        \"application/vnd.hydrostatix.sof-data\"\n    ],\n    [\n        \"sfs\",\n        \"application/vnd.spotfire.sfs\"\n    ],\n    [\n        \"sgl\",\n        \"application/vnd.stardivision.writer-global\"\n    ],\n    [\n        \"sgm\",\n        [\n            \"text/sgml\",\n            \"text/x-sgml\"\n        ]\n    ],\n    [\n        \"sgml\",\n        [\n            \"text/sgml\",\n            \"text/x-sgml\"\n        ]\n    ],\n    [\n        \"sh\",\n        [\n            \"application/x-shar\",\n            \"application/x-bsh\",\n            \"application/x-sh\",\n            \"text/x-script.sh\"\n        ]\n    ],\n    [\n        \"shar\",\n        [\n            \"application/x-bsh\",\n            \"application/x-shar\"\n        ]\n    ],\n    [\n        \"shf\",\n        \"application/shf+xml\"\n    ],\n    [\n        \"shtml\",\n        [\n            \"text/html\",\n            \"text/x-server-parsed-html\"\n        ]\n    ],\n    [\n        \"sid\",\n        \"audio/x-psid\"\n    ],\n    [\n        \"sis\",\n        \"application/vnd.symbian.install\"\n    ],\n    [\n        \"sit\",\n        [\n            \"application/x-stuffit\",\n            \"application/x-sit\"\n        ]\n    ],\n    [\n        \"sitx\",\n        \"application/x-stuffitx\"\n    ],\n    [\n        \"skd\",\n        \"application/x-koan\"\n    ],\n    [\n        \"skm\",\n        \"application/x-koan\"\n    ],\n    [\n        \"skp\",\n        [\n            \"application/vnd.koan\",\n            \"application/x-koan\"\n        ]\n    ],\n    [\n        \"skt\",\n        \"application/x-koan\"\n    ],\n    [\n        \"sl\",\n        \"application/x-seelogo\"\n    ],\n    [\n        \"sldm\",\n        \"application/vnd.ms-powerpoint.slide.macroenabled.12\"\n    ],\n    [\n        \"sldx\",\n        \"application/vnd.openxmlformats-officedocument.presentationml.slide\"\n    ],\n    [\n        \"slt\",\n        \"application/vnd.epson.salt\"\n    ],\n    [\n        \"sm\",\n        \"application/vnd.stepmania.stepchart\"\n    ],\n    [\n        \"smf\",\n        \"application/vnd.stardivision.math\"\n    ],\n    [\n        \"smi\",\n        [\n            \"application/smil\",\n            \"application/smil+xml\"\n        ]\n    ],\n    [\n        \"smil\",\n        \"application/smil\"\n    ],\n    [\n        \"snd\",\n        [\n            \"audio/basic\",\n            \"audio/x-adpcm\"\n        ]\n    ],\n    [\n        \"snf\",\n        \"application/x-font-snf\"\n    ],\n    [\n        \"sol\",\n        \"application/solids\"\n    ],\n    [\n        \"spc\",\n        [\n            \"text/x-speech\",\n            \"application/x-pkcs7-certificates\"\n        ]\n    ],\n    [\n        \"spf\",\n        \"application/vnd.yamaha.smaf-phrase\"\n    ],\n    [\n        \"spl\",\n        [\n            \"application/futuresplash\",\n            \"application/x-futuresplash\"\n        ]\n    ],\n    [\n        \"spot\",\n        \"text/vnd.in3d.spot\"\n    ],\n    [\n        \"spp\",\n        \"application/scvp-vp-response\"\n    ],\n    [\n        \"spq\",\n        \"application/scvp-vp-request\"\n    ],\n    [\n        \"spr\",\n        \"application/x-sprite\"\n    ],\n    [\n        \"sprite\",\n        \"application/x-sprite\"\n    ],\n    [\n        \"src\",\n        \"application/x-wais-source\"\n    ],\n    [\n        \"sru\",\n        \"application/sru+xml\"\n    ],\n    [\n        \"srx\",\n        \"application/sparql-results+xml\"\n    ],\n    [\n        \"sse\",\n        \"application/vnd.kodak-descriptor\"\n    ],\n    [\n        \"ssf\",\n        \"application/vnd.epson.ssf\"\n    ],\n    [\n        \"ssi\",\n        \"text/x-server-parsed-html\"\n    ],\n    [\n        \"ssm\",\n        \"application/streamingmedia\"\n    ],\n    [\n        \"ssml\",\n        \"application/ssml+xml\"\n    ],\n    [\n        \"sst\",\n        [\n            \"application/vnd.ms-pkicertstore\",\n            \"application/vnd.ms-pki.certstore\"\n        ]\n    ],\n    [\n        \"st\",\n        \"application/vnd.sailingtracker.track\"\n    ],\n    [\n        \"stc\",\n        \"application/vnd.sun.xml.calc.template\"\n    ],\n    [\n        \"std\",\n        \"application/vnd.sun.xml.draw.template\"\n    ],\n    [\n        \"step\",\n        \"application/step\"\n    ],\n    [\n        \"stf\",\n        \"application/vnd.wt.stf\"\n    ],\n    [\n        \"sti\",\n        \"application/vnd.sun.xml.impress.template\"\n    ],\n    [\n        \"stk\",\n        \"application/hyperstudio\"\n    ],\n    [\n        \"stl\",\n        [\n            \"application/vnd.ms-pkistl\",\n            \"application/sla\",\n            \"application/vnd.ms-pki.stl\",\n            \"application/x-navistyle\"\n        ]\n    ],\n    [\n        \"stm\",\n        \"text/html\"\n    ],\n    [\n        \"stp\",\n        \"application/step\"\n    ],\n    [\n        \"str\",\n        \"application/vnd.pg.format\"\n    ],\n    [\n        \"stw\",\n        \"application/vnd.sun.xml.writer.template\"\n    ],\n    [\n        \"sub\",\n        \"image/vnd.dvb.subtitle\"\n    ],\n    [\n        \"sus\",\n        \"application/vnd.sus-calendar\"\n    ],\n    [\n        \"sv4cpio\",\n        \"application/x-sv4cpio\"\n    ],\n    [\n        \"sv4crc\",\n        \"application/x-sv4crc\"\n    ],\n    [\n        \"svc\",\n        \"application/vnd.dvb.service\"\n    ],\n    [\n        \"svd\",\n        \"application/vnd.svd\"\n    ],\n    [\n        \"svf\",\n        [\n            \"image/vnd.dwg\",\n            \"image/x-dwg\"\n        ]\n    ],\n    [\n        \"svg\",\n        \"image/svg+xml\"\n    ],\n    [\n        \"svr\",\n        [\n            \"x-world/x-svr\",\n            \"application/x-world\"\n        ]\n    ],\n    [\n        \"swf\",\n        \"application/x-shockwave-flash\"\n    ],\n    [\n        \"swi\",\n        \"application/vnd.aristanetworks.swi\"\n    ],\n    [\n        \"sxc\",\n        \"application/vnd.sun.xml.calc\"\n    ],\n    [\n        \"sxd\",\n        \"application/vnd.sun.xml.draw\"\n    ],\n    [\n        \"sxg\",\n        \"application/vnd.sun.xml.writer.global\"\n    ],\n    [\n        \"sxi\",\n        \"application/vnd.sun.xml.impress\"\n    ],\n    [\n        \"sxm\",\n        \"application/vnd.sun.xml.math\"\n    ],\n    [\n        \"sxw\",\n        \"application/vnd.sun.xml.writer\"\n    ],\n    [\n        \"t\",\n        [\n            \"text/troff\",\n            \"application/x-troff\"\n        ]\n    ],\n    [\n        \"talk\",\n        \"text/x-speech\"\n    ],\n    [\n        \"tao\",\n        \"application/vnd.tao.intent-module-archive\"\n    ],\n    [\n        \"tar\",\n        \"application/x-tar\"\n    ],\n    [\n        \"tbk\",\n        [\n            \"application/toolbook\",\n            \"application/x-tbook\"\n        ]\n    ],\n    [\n        \"tcap\",\n        \"application/vnd.3gpp2.tcap\"\n    ],\n    [\n        \"tcl\",\n        [\n            \"text/x-script.tcl\",\n            \"application/x-tcl\"\n        ]\n    ],\n    [\n        \"tcsh\",\n        \"text/x-script.tcsh\"\n    ],\n    [\n        \"teacher\",\n        \"application/vnd.smart.teacher\"\n    ],\n    [\n        \"tei\",\n        \"application/tei+xml\"\n    ],\n    [\n        \"tex\",\n        \"application/x-tex\"\n    ],\n    [\n        \"texi\",\n        \"application/x-texinfo\"\n    ],\n    [\n        \"texinfo\",\n        \"application/x-texinfo\"\n    ],\n    [\n        \"text\",\n        [\n            \"application/plain\",\n            \"text/plain\"\n        ]\n    ],\n    [\n        \"tfi\",\n        \"application/thraud+xml\"\n    ],\n    [\n        \"tfm\",\n        \"application/x-tex-tfm\"\n    ],\n    [\n        \"tgz\",\n        [\n            \"application/gnutar\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"thmx\",\n        \"application/vnd.ms-officetheme\"\n    ],\n    [\n        \"tif\",\n        [\n            \"image/tiff\",\n            \"image/x-tiff\"\n        ]\n    ],\n    [\n        \"tiff\",\n        [\n            \"image/tiff\",\n            \"image/x-tiff\"\n        ]\n    ],\n    [\n        \"tmo\",\n        \"application/vnd.tmobile-livetv\"\n    ],\n    [\n        \"torrent\",\n        \"application/x-bittorrent\"\n    ],\n    [\n        \"tpl\",\n        \"application/vnd.groove-tool-template\"\n    ],\n    [\n        \"tpt\",\n        \"application/vnd.trid.tpt\"\n    ],\n    [\n        \"tr\",\n        \"application/x-troff\"\n    ],\n    [\n        \"tra\",\n        \"application/vnd.trueapp\"\n    ],\n    [\n        \"trm\",\n        \"application/x-msterminal\"\n    ],\n    [\n        \"tsd\",\n        \"application/timestamped-data\"\n    ],\n    [\n        \"tsi\",\n        \"audio/tsp-audio\"\n    ],\n    [\n        \"tsp\",\n        [\n            \"application/dsptype\",\n            \"audio/tsplayer\"\n        ]\n    ],\n    [\n        \"tsv\",\n        \"text/tab-separated-values\"\n    ],\n    [\n        \"ttf\",\n        \"application/x-font-ttf\"\n    ],\n    [\n        \"ttl\",\n        \"text/turtle\"\n    ],\n    [\n        \"turbot\",\n        \"image/florian\"\n    ],\n    [\n        \"twd\",\n        \"application/vnd.simtech-mindmapper\"\n    ],\n    [\n        \"txd\",\n        \"application/vnd.genomatix.tuxedo\"\n    ],\n    [\n        \"txf\",\n        \"application/vnd.mobius.txf\"\n    ],\n    [\n        \"txt\",\n        \"text/plain\"\n    ],\n    [\n        \"ufd\",\n        \"application/vnd.ufdl\"\n    ],\n    [\n        \"uil\",\n        \"text/x-uil\"\n    ],\n    [\n        \"uls\",\n        \"text/iuls\"\n    ],\n    [\n        \"umj\",\n        \"application/vnd.umajin\"\n    ],\n    [\n        \"uni\",\n        \"text/uri-list\"\n    ],\n    [\n        \"unis\",\n        \"text/uri-list\"\n    ],\n    [\n        \"unityweb\",\n        \"application/vnd.unity\"\n    ],\n    [\n        \"unv\",\n        \"application/i-deas\"\n    ],\n    [\n        \"uoml\",\n        \"application/vnd.uoml+xml\"\n    ],\n    [\n        \"uri\",\n        \"text/uri-list\"\n    ],\n    [\n        \"uris\",\n        \"text/uri-list\"\n    ],\n    [\n        \"ustar\",\n        [\n            \"application/x-ustar\",\n            \"multipart/x-ustar\"\n        ]\n    ],\n    [\n        \"utz\",\n        \"application/vnd.uiq.theme\"\n    ],\n    [\n        \"uu\",\n        [\n            \"application/octet-stream\",\n            \"text/x-uuencode\"\n        ]\n    ],\n    [\n        \"uue\",\n        \"text/x-uuencode\"\n    ],\n    [\n        \"uva\",\n        \"audio/vnd.dece.audio\"\n    ],\n    [\n        \"uvh\",\n        \"video/vnd.dece.hd\"\n    ],\n    [\n        \"uvi\",\n        \"image/vnd.dece.graphic\"\n    ],\n    [\n        \"uvm\",\n        \"video/vnd.dece.mobile\"\n    ],\n    [\n        \"uvp\",\n        \"video/vnd.dece.pd\"\n    ],\n    [\n        \"uvs\",\n        \"video/vnd.dece.sd\"\n    ],\n    [\n        \"uvu\",\n        \"video/vnd.uvvu.mp4\"\n    ],\n    [\n        \"uvv\",\n        \"video/vnd.dece.video\"\n    ],\n    [\n        \"vcd\",\n        \"application/x-cdlink\"\n    ],\n    [\n        \"vcf\",\n        \"text/x-vcard\"\n    ],\n    [\n        \"vcg\",\n        \"application/vnd.groove-vcard\"\n    ],\n    [\n        \"vcs\",\n        \"text/x-vcalendar\"\n    ],\n    [\n        \"vcx\",\n        \"application/vnd.vcx\"\n    ],\n    [\n        \"vda\",\n        \"application/vda\"\n    ],\n    [\n        \"vdo\",\n        \"video/vdo\"\n    ],\n    [\n        \"vew\",\n        \"application/groupwise\"\n    ],\n    [\n        \"vis\",\n        \"application/vnd.visionary\"\n    ],\n    [\n        \"viv\",\n        [\n            \"video/vivo\",\n            \"video/vnd.vivo\"\n        ]\n    ],\n    [\n        \"vivo\",\n        [\n            \"video/vivo\",\n            \"video/vnd.vivo\"\n        ]\n    ],\n    [\n        \"vmd\",\n        \"application/vocaltec-media-desc\"\n    ],\n    [\n        \"vmf\",\n        \"application/vocaltec-media-file\"\n    ],\n    [\n        \"voc\",\n        [\n            \"audio/voc\",\n            \"audio/x-voc\"\n        ]\n    ],\n    [\n        \"vos\",\n        \"video/vosaic\"\n    ],\n    [\n        \"vox\",\n        \"audio/voxware\"\n    ],\n    [\n        \"vqe\",\n        \"audio/x-twinvq-plugin\"\n    ],\n    [\n        \"vqf\",\n        \"audio/x-twinvq\"\n    ],\n    [\n        \"vql\",\n        \"audio/x-twinvq-plugin\"\n    ],\n    [\n        \"vrml\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\",\n            \"application/x-vrml\"\n        ]\n    ],\n    [\n        \"vrt\",\n        \"x-world/x-vrt\"\n    ],\n    [\n        \"vsd\",\n        [\n            \"application/vnd.visio\",\n            \"application/x-visio\"\n        ]\n    ],\n    [\n        \"vsf\",\n        \"application/vnd.vsf\"\n    ],\n    [\n        \"vst\",\n        \"application/x-visio\"\n    ],\n    [\n        \"vsw\",\n        \"application/x-visio\"\n    ],\n    [\n        \"vtu\",\n        \"model/vnd.vtu\"\n    ],\n    [\n        \"vxml\",\n        \"application/voicexml+xml\"\n    ],\n    [\n        \"w60\",\n        \"application/wordperfect6.0\"\n    ],\n    [\n        \"w61\",\n        \"application/wordperfect6.1\"\n    ],\n    [\n        \"w6w\",\n        \"application/msword\"\n    ],\n    [\n        \"wad\",\n        \"application/x-doom\"\n    ],\n    [\n        \"wav\",\n        [\n            \"audio/wav\",\n            \"audio/x-wav\"\n        ]\n    ],\n    [\n        \"wax\",\n        \"audio/x-ms-wax\"\n    ],\n    [\n        \"wb1\",\n        \"application/x-qpro\"\n    ],\n    [\n        \"wbmp\",\n        \"image/vnd.wap.wbmp\"\n    ],\n    [\n        \"wbs\",\n        \"application/vnd.criticaltools.wbs+xml\"\n    ],\n    [\n        \"wbxml\",\n        \"application/vnd.wap.wbxml\"\n    ],\n    [\n        \"wcm\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wdb\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"web\",\n        \"application/vnd.xara\"\n    ],\n    [\n        \"weba\",\n        \"audio/webm\"\n    ],\n    [\n        \"webm\",\n        \"video/webm\"\n    ],\n    [\n        \"webp\",\n        \"image/webp\"\n    ],\n    [\n        \"wg\",\n        \"application/vnd.pmi.widget\"\n    ],\n    [\n        \"wgt\",\n        \"application/widget\"\n    ],\n    [\n        \"wiz\",\n        \"application/msword\"\n    ],\n    [\n        \"wk1\",\n        \"application/x-123\"\n    ],\n    [\n        \"wks\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wm\",\n        \"video/x-ms-wm\"\n    ],\n    [\n        \"wma\",\n        \"audio/x-ms-wma\"\n    ],\n    [\n        \"wmd\",\n        \"application/x-ms-wmd\"\n    ],\n    [\n        \"wmf\",\n        [\n            \"windows/metafile\",\n            \"application/x-msmetafile\"\n        ]\n    ],\n    [\n        \"wml\",\n        \"text/vnd.wap.wml\"\n    ],\n    [\n        \"wmlc\",\n        \"application/vnd.wap.wmlc\"\n    ],\n    [\n        \"wmls\",\n        \"text/vnd.wap.wmlscript\"\n    ],\n    [\n        \"wmlsc\",\n        \"application/vnd.wap.wmlscriptc\"\n    ],\n    [\n        \"wmv\",\n        \"video/x-ms-wmv\"\n    ],\n    [\n        \"wmx\",\n        \"video/x-ms-wmx\"\n    ],\n    [\n        \"wmz\",\n        \"application/x-ms-wmz\"\n    ],\n    [\n        \"woff\",\n        \"application/x-font-woff\"\n    ],\n    [\n        \"word\",\n        \"application/msword\"\n    ],\n    [\n        \"wp\",\n        \"application/wordperfect\"\n    ],\n    [\n        \"wp5\",\n        [\n            \"application/wordperfect\",\n            \"application/wordperfect6.0\"\n        ]\n    ],\n    [\n        \"wp6\",\n        \"application/wordperfect\"\n    ],\n    [\n        \"wpd\",\n        [\n            \"application/wordperfect\",\n            \"application/vnd.wordperfect\",\n            \"application/x-wpwin\"\n        ]\n    ],\n    [\n        \"wpl\",\n        \"application/vnd.ms-wpl\"\n    ],\n    [\n        \"wps\",\n        \"application/vnd.ms-works\"\n    ],\n    [\n        \"wq1\",\n        \"application/x-lotus\"\n    ],\n    [\n        \"wqd\",\n        \"application/vnd.wqd\"\n    ],\n    [\n        \"wri\",\n        [\n            \"application/mswrite\",\n            \"application/x-wri\",\n            \"application/x-mswrite\"\n        ]\n    ],\n    [\n        \"wrl\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\",\n            \"application/x-world\"\n        ]\n    ],\n    [\n        \"wrz\",\n        [\n            \"model/vrml\",\n            \"x-world/x-vrml\"\n        ]\n    ],\n    [\n        \"wsc\",\n        \"text/scriplet\"\n    ],\n    [\n        \"wsdl\",\n        \"application/wsdl+xml\"\n    ],\n    [\n        \"wspolicy\",\n        \"application/wspolicy+xml\"\n    ],\n    [\n        \"wsrc\",\n        \"application/x-wais-source\"\n    ],\n    [\n        \"wtb\",\n        \"application/vnd.webturbo\"\n    ],\n    [\n        \"wtk\",\n        \"application/x-wintalk\"\n    ],\n    [\n        \"wvx\",\n        \"video/x-ms-wvx\"\n    ],\n    [\n        \"x-png\",\n        \"image/png\"\n    ],\n    [\n        \"x3d\",\n        \"application/vnd.hzn-3d-crossword\"\n    ],\n    [\n        \"xaf\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"xap\",\n        \"application/x-silverlight-app\"\n    ],\n    [\n        \"xar\",\n        \"application/vnd.xara\"\n    ],\n    [\n        \"xbap\",\n        \"application/x-ms-xbap\"\n    ],\n    [\n        \"xbd\",\n        \"application/vnd.fujixerox.docuworks.binder\"\n    ],\n    [\n        \"xbm\",\n        [\n            \"image/xbm\",\n            \"image/x-xbm\",\n            \"image/x-xbitmap\"\n        ]\n    ],\n    [\n        \"xdf\",\n        \"application/xcap-diff+xml\"\n    ],\n    [\n        \"xdm\",\n        \"application/vnd.syncml.dm+xml\"\n    ],\n    [\n        \"xdp\",\n        \"application/vnd.adobe.xdp+xml\"\n    ],\n    [\n        \"xdr\",\n        \"video/x-amt-demorun\"\n    ],\n    [\n        \"xdssc\",\n        \"application/dssc+xml\"\n    ],\n    [\n        \"xdw\",\n        \"application/vnd.fujixerox.docuworks\"\n    ],\n    [\n        \"xenc\",\n        \"application/xenc+xml\"\n    ],\n    [\n        \"xer\",\n        \"application/patch-ops-error+xml\"\n    ],\n    [\n        \"xfdf\",\n        \"application/vnd.adobe.xfdf\"\n    ],\n    [\n        \"xfdl\",\n        \"application/vnd.xfdl\"\n    ],\n    [\n        \"xgz\",\n        \"xgl/drawing\"\n    ],\n    [\n        \"xhtml\",\n        \"application/xhtml+xml\"\n    ],\n    [\n        \"xif\",\n        \"image/vnd.xiff\"\n    ],\n    [\n        \"xl\",\n        \"application/excel\"\n    ],\n    [\n        \"xla\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlam\",\n        \"application/vnd.ms-excel.addin.macroenabled.12\"\n    ],\n    [\n        \"xlb\",\n        [\n            \"application/excel\",\n            \"application/vnd.ms-excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlc\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xld\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlk\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xll\",\n        [\n            \"application/excel\",\n            \"application/vnd.ms-excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlm\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xls\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlsb\",\n        \"application/vnd.ms-excel.sheet.binary.macroenabled.12\"\n    ],\n    [\n        \"xlsm\",\n        \"application/vnd.ms-excel.sheet.macroenabled.12\"\n    ],\n    [\n        \"xlsx\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ],\n    [\n        \"xlt\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xltm\",\n        \"application/vnd.ms-excel.template.macroenabled.12\"\n    ],\n    [\n        \"xltx\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\"\n    ],\n    [\n        \"xlv\",\n        [\n            \"application/excel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xlw\",\n        [\n            \"application/vnd.ms-excel\",\n            \"application/excel\",\n            \"application/x-msexcel\",\n            \"application/x-excel\"\n        ]\n    ],\n    [\n        \"xm\",\n        \"audio/xm\"\n    ],\n    [\n        \"xml\",\n        [\n            \"application/xml\",\n            \"text/xml\",\n            \"application/atom+xml\",\n            \"application/rss+xml\"\n        ]\n    ],\n    [\n        \"xmz\",\n        \"xgl/movie\"\n    ],\n    [\n        \"xo\",\n        \"application/vnd.olpc-sugar\"\n    ],\n    [\n        \"xof\",\n        \"x-world/x-vrml\"\n    ],\n    [\n        \"xop\",\n        \"application/xop+xml\"\n    ],\n    [\n        \"xpi\",\n        \"application/x-xpinstall\"\n    ],\n    [\n        \"xpix\",\n        \"application/x-vnd.ls-xpix\"\n    ],\n    [\n        \"xpm\",\n        [\n            \"image/xpm\",\n            \"image/x-xpixmap\"\n        ]\n    ],\n    [\n        \"xpr\",\n        \"application/vnd.is-xpr\"\n    ],\n    [\n        \"xps\",\n        \"application/vnd.ms-xpsdocument\"\n    ],\n    [\n        \"xpw\",\n        \"application/vnd.intercon.formnet\"\n    ],\n    [\n        \"xslt\",\n        \"application/xslt+xml\"\n    ],\n    [\n        \"xsm\",\n        \"application/vnd.syncml+xml\"\n    ],\n    [\n        \"xspf\",\n        \"application/xspf+xml\"\n    ],\n    [\n        \"xsr\",\n        \"video/x-amt-showrun\"\n    ],\n    [\n        \"xul\",\n        \"application/vnd.mozilla.xul+xml\"\n    ],\n    [\n        \"xwd\",\n        [\n            \"image/x-xwd\",\n            \"image/x-xwindowdump\"\n        ]\n    ],\n    [\n        \"xyz\",\n        [\n            \"chemical/x-xyz\",\n            \"chemical/x-pdb\"\n        ]\n    ],\n    [\n        \"yang\",\n        \"application/yang\"\n    ],\n    [\n        \"yin\",\n        \"application/yin+xml\"\n    ],\n    [\n        \"z\",\n        [\n            \"application/x-compressed\",\n            \"application/x-compress\"\n        ]\n    ],\n    [\n        \"zaz\",\n        \"application/vnd.zzazz.deck+xml\"\n    ],\n    [\n        \"zip\",\n        [\n            \"application/zip\",\n            \"multipart/x-zip\",\n            \"application/x-zip-compressed\",\n            \"application/x-compressed\"\n        ]\n    ],\n    [\n        \"zir\",\n        \"application/vnd.zul\"\n    ],\n    [\n        \"zmm\",\n        \"application/vnd.handheld-entertainment+xml\"\n    ],\n    [\n        \"zoo\",\n        \"application/octet-stream\"\n    ],\n    [\n        \"zsh\",\n        \"text/x-script.zsh\"\n    ]\n]);\nmodule.exports = {\n    detectMimeType (filename) {\n        if (!filename) {\n            return defaultMimeType;\n        }\n        let parsed = path.parse(filename);\n        let extension = (parsed.ext.substr(1) || parsed.name || \"\").split(\"?\").shift().trim().toLowerCase();\n        let value = defaultMimeType;\n        if (extensions.has(extension)) {\n            value = extensions.get(extension);\n        }\n        if (Array.isArray(value)) {\n            return value[0];\n        }\n        return value;\n    },\n    detectExtension (mimeType) {\n        if (!mimeType) {\n            return defaultExtension;\n        }\n        let parts = (mimeType || \"\").toLowerCase().trim().split(\"/\");\n        let rootType = parts.shift().trim();\n        let subType = parts.join(\"/\").trim();\n        if (mimeTypes.has(rootType + \"/\" + subType)) {\n            let value = mimeTypes.get(rootType + \"/\" + subType);\n            if (Array.isArray(value)) {\n                return value[0];\n            }\n            return value;\n        }\n        switch(rootType){\n            case \"text\":\n                return \"txt\";\n            default:\n                return \"bin\";\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-funcs/mime-types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-undefined: 0, prefer-spread: 0, no-control-regex: 0 */ \nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst punycode = __webpack_require__(/*! punycode */ \"punycode\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst mimeFuncs = __webpack_require__(/*! ../mime-funcs */ \"(rsc)/./node_modules/nodemailer/lib/mime-funcs/index.js\");\nconst qp = __webpack_require__(/*! ../qp */ \"(rsc)/./node_modules/nodemailer/lib/qp/index.js\");\nconst base64 = __webpack_require__(/*! ../base64 */ \"(rsc)/./node_modules/nodemailer/lib/base64/index.js\");\nconst addressparser = __webpack_require__(/*! ../addressparser */ \"(rsc)/./node_modules/nodemailer/lib/addressparser/index.js\");\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst LastNewline = __webpack_require__(/*! ./last-newline */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\");\nconst LeWindows = __webpack_require__(/*! ./le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\nconst LeUnix = __webpack_require__(/*! ./le-unix */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\");\n/**\n * Creates a new mime tree node. Assumes 'multipart/*' as the content type\n * if it is a branch, anything else counts as leaf. If rootNode is missing from\n * the options, assumes this is the root.\n *\n * @param {String} contentType Define the content type for the node. Can be left blank for attachments (derived from filename)\n * @param {Object} [options] optional options\n * @param {Object} [options.rootNode] root node for this tree\n * @param {Object} [options.parentNode] immediate parent for this node\n * @param {Object} [options.filename] filename for an attachment node\n * @param {String} [options.baseBoundary] shared part of the unique multipart boundary\n * @param {Boolean} [options.keepBcc] If true, do not exclude Bcc from the generated headers\n * @param {Function} [options.normalizeHeaderKey] method to normalize header keys for custom caseing\n * @param {String} [options.textEncoding] either 'Q' (the default) or 'B'\n */ class MimeNode {\n    constructor(contentType, options){\n        this.nodeCounter = 0;\n        options = options || {};\n        /**\n         * shared part of the unique multipart boundary\n         */ this.baseBoundary = options.baseBoundary || crypto.randomBytes(8).toString(\"hex\");\n        this.boundaryPrefix = options.boundaryPrefix || \"--_NmP\";\n        this.disableFileAccess = !!options.disableFileAccess;\n        this.disableUrlAccess = !!options.disableUrlAccess;\n        this.normalizeHeaderKey = options.normalizeHeaderKey;\n        /**\n         * If date headers is missing and current node is the root, this value is used instead\n         */ this.date = new Date();\n        /**\n         * Root node for current mime tree\n         */ this.rootNode = options.rootNode || this;\n        /**\n         * If true include Bcc in generated headers (if available)\n         */ this.keepBcc = !!options.keepBcc;\n        /**\n         * If filename is specified but contentType is not (probably an attachment)\n         * detect the content type from filename extension\n         */ if (options.filename) {\n            /**\n             * Filename for this node. Useful with attachments\n             */ this.filename = options.filename;\n            if (!contentType) {\n                contentType = mimeFuncs.detectMimeType(this.filename.split(\".\").pop());\n            }\n        }\n        /**\n         * Indicates which encoding should be used for header strings: \"Q\" or \"B\"\n         */ this.textEncoding = (options.textEncoding || \"\").toString().trim().charAt(0).toUpperCase();\n        /**\n         * Immediate parent for this node (or undefined if not set)\n         */ this.parentNode = options.parentNode;\n        /**\n         * Hostname for default message-id values\n         */ this.hostname = options.hostname;\n        /**\n         * If set to 'win' then uses \\r\\n, if 'linux' then \\n. If not set (or `raw` is used) then newlines are kept as is.\n         */ this.newline = options.newline;\n        /**\n         * An array for possible child nodes\n         */ this.childNodes = [];\n        /**\n         * Used for generating unique boundaries (prepended to the shared base)\n         */ this._nodeId = ++this.rootNode.nodeCounter;\n        /**\n         * A list of header values for this node in the form of [{key:'', value:''}]\n         */ this._headers = [];\n        /**\n         * True if the content only uses ASCII printable characters\n         * @type {Boolean}\n         */ this._isPlainText = false;\n        /**\n         * True if the content is plain text but has longer lines than allowed\n         * @type {Boolean}\n         */ this._hasLongLines = false;\n        /**\n         * If set, use instead this value for envelopes instead of generating one\n         * @type {Boolean}\n         */ this._envelope = false;\n        /**\n         * If set then use this value as the stream content instead of building it\n         * @type {String|Buffer|Stream}\n         */ this._raw = false;\n        /**\n         * Additional transform streams that the message will be piped before\n         * exposing by createReadStream\n         * @type {Array}\n         */ this._transforms = [];\n        /**\n         * Additional process functions that the message will be piped through before\n         * exposing by createReadStream. These functions are run after transforms\n         * @type {Array}\n         */ this._processFuncs = [];\n        /**\n         * If content type is set (or derived from the filename) add it to headers\n         */ if (contentType) {\n            this.setHeader(\"Content-Type\", contentType);\n        }\n    }\n    /////// PUBLIC METHODS\n    /**\n     * Creates and appends a child node.Arguments provided are passed to MimeNode constructor\n     *\n     * @param {String} [contentType] Optional content type\n     * @param {Object} [options] Optional options object\n     * @return {Object} Created node object\n     */ createChild(contentType, options) {\n        if (!options && typeof contentType === \"object\") {\n            options = contentType;\n            contentType = undefined;\n        }\n        let node = new MimeNode(contentType, options);\n        this.appendChild(node);\n        return node;\n    }\n    /**\n     * Appends an existing node to the mime tree. Removes the node from an existing\n     * tree if needed\n     *\n     * @param {Object} childNode node to be appended\n     * @return {Object} Appended node object\n     */ appendChild(childNode) {\n        if (childNode.rootNode !== this.rootNode) {\n            childNode.rootNode = this.rootNode;\n            childNode._nodeId = ++this.rootNode.nodeCounter;\n        }\n        childNode.parentNode = this;\n        this.childNodes.push(childNode);\n        return childNode;\n    }\n    /**\n     * Replaces current node with another node\n     *\n     * @param {Object} node Replacement node\n     * @return {Object} Replacement node\n     */ replace(node) {\n        if (node === this) {\n            return this;\n        }\n        this.parentNode.childNodes.forEach((childNode, i)=>{\n            if (childNode === this) {\n                node.rootNode = this.rootNode;\n                node.parentNode = this.parentNode;\n                node._nodeId = this._nodeId;\n                this.rootNode = this;\n                this.parentNode = undefined;\n                node.parentNode.childNodes[i] = node;\n            }\n        });\n        return node;\n    }\n    /**\n     * Removes current node from the mime tree\n     *\n     * @return {Object} removed node\n     */ remove() {\n        if (!this.parentNode) {\n            return this;\n        }\n        for(let i = this.parentNode.childNodes.length - 1; i >= 0; i--){\n            if (this.parentNode.childNodes[i] === this) {\n                this.parentNode.childNodes.splice(i, 1);\n                this.parentNode = undefined;\n                this.rootNode = this;\n                return this;\n            }\n        }\n    }\n    /**\n     * Sets a header value. If the value for selected key exists, it is overwritten.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */ setHeader(key, value) {\n        let added = false, headerValue;\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === \"object\") {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && \"value\" in key) {\n                this.setHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach((i)=>{\n                    this.setHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach((i)=>{\n                    this.setHeader(i, key[i]);\n                });\n            }\n            return this;\n        }\n        key = this._normalizeHeaderKey(key);\n        headerValue = {\n            key,\n            value\n        };\n        // Check if the value exists and overwrite\n        for(let i = 0, len = this._headers.length; i < len; i++){\n            if (this._headers[i].key === key) {\n                if (!added) {\n                    // replace the first match\n                    this._headers[i] = headerValue;\n                    added = true;\n                } else {\n                    // remove following matches\n                    this._headers.splice(i, 1);\n                    i--;\n                    len--;\n                }\n            }\n        }\n        // match not found, append the value\n        if (!added) {\n            this._headers.push(headerValue);\n        }\n        return this;\n    }\n    /**\n     * Adds a header value. If the value for selected key exists, the value is appended\n     * as a new field and old one is not touched.\n     * You can set multiple values as well by using [{key:'', value:''}] or\n     * {key: 'value'} as the first argument.\n     *\n     * @param {String|Array|Object} key Header key or a list of key value pairs\n     * @param {String} value Header value\n     * @return {Object} current node\n     */ addHeader(key, value) {\n        // Allow setting multiple headers at once\n        if (!value && key && typeof key === \"object\") {\n            // allow {key:'content-type', value: 'text/plain'}\n            if (key.key && key.value) {\n                this.addHeader(key.key, key.value);\n            } else if (Array.isArray(key)) {\n                // allow [{key:'content-type', value: 'text/plain'}]\n                key.forEach((i)=>{\n                    this.addHeader(i.key, i.value);\n                });\n            } else {\n                // allow {'content-type': 'text/plain'}\n                Object.keys(key).forEach((i)=>{\n                    this.addHeader(i, key[i]);\n                });\n            }\n            return this;\n        } else if (Array.isArray(value)) {\n            value.forEach((val)=>{\n                this.addHeader(key, val);\n            });\n            return this;\n        }\n        this._headers.push({\n            key: this._normalizeHeaderKey(key),\n            value\n        });\n        return this;\n    }\n    /**\n     * Retrieves the first mathcing value of a selected key\n     *\n     * @param {String} key Key to search for\n     * @retun {String} Value for the key\n     */ getHeader(key) {\n        key = this._normalizeHeaderKey(key);\n        for(let i = 0, len = this._headers.length; i < len; i++){\n            if (this._headers[i].key === key) {\n                return this._headers[i].value;\n            }\n        }\n    }\n    /**\n     * Sets body content for current node. If the value is a string, charset is added automatically\n     * to Content-Type (if it is text/*). If the value is a Buffer, you need to specify\n     * the charset yourself\n     *\n     * @param (String|Buffer) content Body content\n     * @return {Object} current node\n     */ setContent(content) {\n        this.content = content;\n        if (typeof this.content.pipe === \"function\") {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = (err)=>{\n                this.content.removeListener(\"error\", this._contentErrorHandler);\n                this.content = err;\n            };\n            this.content.once(\"error\", this._contentErrorHandler);\n        } else if (typeof this.content === \"string\") {\n            this._isPlainText = mimeFuncs.isPlainText(this.content);\n            if (this._isPlainText && mimeFuncs.hasLongerLines(this.content, 76)) {\n                // If there are lines longer than 76 symbols/bytes do not use 7bit\n                this._hasLongLines = true;\n            }\n        }\n        return this;\n    }\n    build(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        let stream = this.createReadStream();\n        let buf = [];\n        let buflen = 0;\n        let returned = false;\n        stream.on(\"readable\", ()=>{\n            let chunk;\n            while((chunk = stream.read()) !== null){\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n        });\n        stream.once(\"error\", (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n        stream.once(\"end\", (chunk)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            if (chunk && chunk.length) {\n                buf.push(chunk);\n                buflen += chunk.length;\n            }\n            return callback(null, Buffer.concat(buf, buflen));\n        });\n        return promise;\n    }\n    getTransferEncoding() {\n        let transferEncoding = false;\n        let contentType = (this.getHeader(\"Content-Type\") || \"\").toString().toLowerCase().trim();\n        if (this.content) {\n            transferEncoding = (this.getHeader(\"Content-Transfer-Encoding\") || \"\").toString().toLowerCase().trim();\n            if (!transferEncoding || ![\n                \"base64\",\n                \"quoted-printable\"\n            ].includes(transferEncoding)) {\n                if (/^text\\//i.test(contentType)) {\n                    // If there are no special symbols, no need to modify the text\n                    if (this._isPlainText && !this._hasLongLines) {\n                        transferEncoding = \"7bit\";\n                    } else if (typeof this.content === \"string\" || this.content instanceof Buffer) {\n                        // detect preferred encoding for string value\n                        transferEncoding = this._getTextEncoding(this.content) === \"Q\" ? \"quoted-printable\" : \"base64\";\n                    } else {\n                        // we can not check content for a stream, so either use preferred encoding or fallback to QP\n                        transferEncoding = this.textEncoding === \"B\" ? \"base64\" : \"quoted-printable\";\n                    }\n                } else if (!/^(multipart|message)\\//i.test(contentType)) {\n                    transferEncoding = transferEncoding || \"base64\";\n                }\n            }\n        }\n        return transferEncoding;\n    }\n    /**\n     * Builds the header block for the mime node. Append \\r\\n\\r\\n before writing the content\n     *\n     * @returns {String} Headers\n     */ buildHeaders() {\n        let transferEncoding = this.getTransferEncoding();\n        let headers = [];\n        if (transferEncoding) {\n            this.setHeader(\"Content-Transfer-Encoding\", transferEncoding);\n        }\n        if (this.filename && !this.getHeader(\"Content-Disposition\")) {\n            this.setHeader(\"Content-Disposition\", \"attachment\");\n        }\n        // Ensure mandatory header fields\n        if (this.rootNode === this) {\n            if (!this.getHeader(\"Date\")) {\n                this.setHeader(\"Date\", this.date.toUTCString().replace(/GMT/, \"+0000\"));\n            }\n            // ensure that Message-Id is present\n            this.messageId();\n            if (!this.getHeader(\"MIME-Version\")) {\n                this.setHeader(\"MIME-Version\", \"1.0\");\n            }\n        }\n        this._headers.forEach((header)=>{\n            let key = header.key;\n            let value = header.value;\n            let structured;\n            let param;\n            let options = {};\n            let formattedHeaders = [\n                \"From\",\n                \"Sender\",\n                \"To\",\n                \"Cc\",\n                \"Bcc\",\n                \"Reply-To\",\n                \"Date\",\n                \"References\"\n            ];\n            if (value && typeof value === \"object\" && !formattedHeaders.includes(key)) {\n                Object.keys(value).forEach((key)=>{\n                    if (key !== \"value\") {\n                        options[key] = value[key];\n                    }\n                });\n                value = (value.value || \"\").toString();\n                if (!value.trim()) {\n                    return;\n                }\n            }\n            if (options.prepared) {\n                // header value is\n                if (options.foldLines) {\n                    headers.push(mimeFuncs.foldLines(key + \": \" + value));\n                } else {\n                    headers.push(key + \": \" + value);\n                }\n                return;\n            }\n            switch(header.key){\n                case \"Content-Disposition\":\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    if (this.filename) {\n                        structured.params.filename = this.filename;\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    break;\n                case \"Content-Type\":\n                    structured = mimeFuncs.parseHeaderValue(value);\n                    this._handleContentType(structured);\n                    if (structured.value.match(/^text\\/plain\\b/) && typeof this.content === \"string\" && /[\\u0080-\\uFFFF]/.test(this.content)) {\n                        structured.params.charset = \"utf-8\";\n                    }\n                    value = mimeFuncs.buildHeaderValue(structured);\n                    if (this.filename) {\n                        // add support for non-compliant clients like QQ webmail\n                        // we can't build the value with buildHeaderValue as the value is non standard and\n                        // would be converted to parameter continuation encoding that we do not want\n                        param = this._encodeWords(this.filename);\n                        if (param !== this.filename || /[\\s'\"\\\\;:/=(),<>@[\\]?]|^-/.test(param)) {\n                            // include value in quotes if needed\n                            param = '\"' + param + '\"';\n                        }\n                        value += \"; name=\" + param;\n                    }\n                    break;\n                case \"Bcc\":\n                    if (!this.keepBcc) {\n                        // skip BCC values\n                        return;\n                    }\n                    break;\n            }\n            value = this._encodeHeaderValue(key, value);\n            // skip empty lines\n            if (!(value || \"\").toString().trim()) {\n                return;\n            }\n            if (typeof this.normalizeHeaderKey === \"function\") {\n                let normalized = this.normalizeHeaderKey(key, value);\n                if (normalized && typeof normalized === \"string\" && normalized.length) {\n                    key = normalized;\n                }\n            }\n            headers.push(mimeFuncs.foldLines(key + \": \" + value, 76));\n        });\n        return headers.join(\"\\r\\n\");\n    }\n    /**\n     * Streams the rfc2822 message from the current node. If this is a root node,\n     * mandatory header fields are set if missing (Date, Message-Id, MIME-Version)\n     *\n     * @return {String} Compiled message\n     */ createReadStream(options) {\n        options = options || {};\n        let stream = new PassThrough(options);\n        let outputStream = stream;\n        let transform;\n        this.stream(stream, options, (err)=>{\n            if (err) {\n                outputStream.emit(\"error\", err);\n                return;\n            }\n            stream.end();\n        });\n        for(let i = 0, len = this._transforms.length; i < len; i++){\n            transform = typeof this._transforms[i] === \"function\" ? this._transforms[i]() : this._transforms[i];\n            outputStream.once(\"error\", (err)=>{\n                transform.emit(\"error\", err);\n            });\n            outputStream = outputStream.pipe(transform);\n        }\n        // ensure terminating newline after possible user transforms\n        transform = new LastNewline();\n        outputStream.once(\"error\", (err)=>{\n            transform.emit(\"error\", err);\n        });\n        outputStream = outputStream.pipe(transform);\n        // dkim and stuff\n        for(let i = 0, len = this._processFuncs.length; i < len; i++){\n            transform = this._processFuncs[i];\n            outputStream = transform(outputStream);\n        }\n        if (this.newline) {\n            const winbreak = [\n                \"win\",\n                \"windows\",\n                \"dos\",\n                \"\\r\\n\"\n            ].includes(this.newline.toString().toLowerCase());\n            const newlineTransform = winbreak ? new LeWindows() : new LeUnix();\n            const stream = outputStream.pipe(newlineTransform);\n            outputStream.on(\"error\", (err)=>stream.emit(\"error\", err));\n            return stream;\n        }\n        return outputStream;\n    }\n    /**\n     * Appends a transform stream object to the transforms list. Final output\n     * is passed through this stream before exposing\n     *\n     * @param {Object} transform Read-Write stream\n     */ transform(transform) {\n        this._transforms.push(transform);\n    }\n    /**\n     * Appends a post process function. The functon is run after transforms and\n     * uses the following syntax\n     *\n     *   processFunc(input) -> outputStream\n     *\n     * @param {Object} processFunc Read-Write stream\n     */ processFunc(processFunc) {\n        this._processFuncs.push(processFunc);\n    }\n    stream(outputStream, options, done) {\n        let transferEncoding = this.getTransferEncoding();\n        let contentStream;\n        let localStream;\n        // protect actual callback against multiple triggering\n        let returned = false;\n        let callback = (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(err);\n        };\n        // for multipart nodes, push child nodes\n        // for content nodes end the stream\n        let finalize = ()=>{\n            let childId = 0;\n            let processChildNode = ()=>{\n                if (childId >= this.childNodes.length) {\n                    outputStream.write(\"\\r\\n--\" + this.boundary + \"--\\r\\n\");\n                    return callback();\n                }\n                let child = this.childNodes[childId++];\n                outputStream.write((childId > 1 ? \"\\r\\n\" : \"\") + \"--\" + this.boundary + \"\\r\\n\");\n                child.stream(outputStream, options, (err)=>{\n                    if (err) {\n                        return callback(err);\n                    }\n                    setImmediate(processChildNode);\n                });\n            };\n            if (this.multipart) {\n                setImmediate(processChildNode);\n            } else {\n                return callback();\n            }\n        };\n        // pushes node content\n        let sendContent = ()=>{\n            if (this.content) {\n                if (Object.prototype.toString.call(this.content) === \"[object Error]\") {\n                    // content is already errored\n                    return callback(this.content);\n                }\n                if (typeof this.content.pipe === \"function\") {\n                    this.content.removeListener(\"error\", this._contentErrorHandler);\n                    this._contentErrorHandler = (err)=>callback(err);\n                    this.content.once(\"error\", this._contentErrorHandler);\n                }\n                let createStream = ()=>{\n                    if ([\n                        \"quoted-printable\",\n                        \"base64\"\n                    ].includes(transferEncoding)) {\n                        contentStream = new (transferEncoding === \"base64\" ? base64 : qp).Encoder(options);\n                        contentStream.pipe(outputStream, {\n                            end: false\n                        });\n                        contentStream.once(\"end\", finalize);\n                        contentStream.once(\"error\", (err)=>callback(err));\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(contentStream);\n                    } else {\n                        // anything that is not QP or Base54 passes as-is\n                        localStream = this._getStream(this.content);\n                        localStream.pipe(outputStream, {\n                            end: false\n                        });\n                        localStream.once(\"end\", finalize);\n                    }\n                    localStream.once(\"error\", (err)=>callback(err));\n                };\n                if (this.content._resolve) {\n                    let chunks = [];\n                    let chunklen = 0;\n                    let returned = false;\n                    let sourceStream = this._getStream(this.content);\n                    sourceStream.on(\"error\", (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        callback(err);\n                    });\n                    sourceStream.on(\"readable\", ()=>{\n                        let chunk;\n                        while((chunk = sourceStream.read()) !== null){\n                            chunks.push(chunk);\n                            chunklen += chunk.length;\n                        }\n                    });\n                    sourceStream.on(\"end\", ()=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        this.content._resolve = false;\n                        this.content._resolvedValue = Buffer.concat(chunks, chunklen);\n                        setImmediate(createStream);\n                    });\n                } else {\n                    setImmediate(createStream);\n                }\n                return;\n            } else {\n                return setImmediate(finalize);\n            }\n        };\n        if (this._raw) {\n            setImmediate(()=>{\n                if (Object.prototype.toString.call(this._raw) === \"[object Error]\") {\n                    // content is already errored\n                    return callback(this._raw);\n                }\n                // remove default error handler (if set)\n                if (typeof this._raw.pipe === \"function\") {\n                    this._raw.removeListener(\"error\", this._contentErrorHandler);\n                }\n                let raw = this._getStream(this._raw);\n                raw.pipe(outputStream, {\n                    end: false\n                });\n                raw.on(\"error\", (err)=>outputStream.emit(\"error\", err));\n                raw.on(\"end\", finalize);\n            });\n        } else {\n            outputStream.write(this.buildHeaders() + \"\\r\\n\\r\\n\");\n            setImmediate(sendContent);\n        }\n    }\n    /**\n     * Sets envelope to be used instead of the generated one\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */ setEnvelope(envelope) {\n        let list;\n        this._envelope = {\n            from: false,\n            to: []\n        };\n        if (envelope.from) {\n            list = [];\n            this._convertAddresses(this._parseAddresses(envelope.from), list);\n            list = list.filter((address)=>address && address.address);\n            if (list.length && list[0]) {\n                this._envelope.from = list[0].address;\n            }\n        }\n        [\n            \"to\",\n            \"cc\",\n            \"bcc\"\n        ].forEach((key)=>{\n            if (envelope[key]) {\n                this._convertAddresses(this._parseAddresses(envelope[key]), this._envelope.to);\n            }\n        });\n        this._envelope.to = this._envelope.to.map((to)=>to.address).filter((address)=>address);\n        let standardFields = [\n            \"to\",\n            \"cc\",\n            \"bcc\",\n            \"from\"\n        ];\n        Object.keys(envelope).forEach((key)=>{\n            if (!standardFields.includes(key)) {\n                this._envelope[key] = envelope[key];\n            }\n        });\n        return this;\n    }\n    /**\n     * Generates and returns an object with parsed address fields\n     *\n     * @return {Object} Address object\n     */ getAddresses() {\n        let addresses = {};\n        this._headers.forEach((header)=>{\n            let key = header.key.toLowerCase();\n            if ([\n                \"from\",\n                \"sender\",\n                \"reply-to\",\n                \"to\",\n                \"cc\",\n                \"bcc\"\n            ].includes(key)) {\n                if (!Array.isArray(addresses[key])) {\n                    addresses[key] = [];\n                }\n                this._convertAddresses(this._parseAddresses(header.value), addresses[key]);\n            }\n        });\n        return addresses;\n    }\n    /**\n     * Generates and returns SMTP envelope with the sender address and a list of recipients addresses\n     *\n     * @return {Object} SMTP envelope in the form of {from: 'from@example.com', to: ['to@example.com']}\n     */ getEnvelope() {\n        if (this._envelope) {\n            return this._envelope;\n        }\n        let envelope = {\n            from: false,\n            to: []\n        };\n        this._headers.forEach((header)=>{\n            let list = [];\n            if (header.key === \"From\" || !envelope.from && [\n                \"Reply-To\",\n                \"Sender\"\n            ].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), list);\n                if (list.length && list[0]) {\n                    envelope.from = list[0].address;\n                }\n            } else if ([\n                \"To\",\n                \"Cc\",\n                \"Bcc\"\n            ].includes(header.key)) {\n                this._convertAddresses(this._parseAddresses(header.value), envelope.to);\n            }\n        });\n        envelope.to = envelope.to.map((to)=>to.address);\n        return envelope;\n    }\n    /**\n     * Returns Message-Id value. If it does not exist, then creates one\n     *\n     * @return {String} Message-Id value\n     */ messageId() {\n        let messageId = this.getHeader(\"Message-ID\");\n        // You really should define your own Message-Id field!\n        if (!messageId) {\n            messageId = this._generateMessageId();\n            this.setHeader(\"Message-ID\", messageId);\n        }\n        return messageId;\n    }\n    /**\n     * Sets pregenerated content that will be used as the output of this node\n     *\n     * @param {String|Buffer|Stream} Raw MIME contents\n     */ setRaw(raw) {\n        this._raw = raw;\n        if (this._raw && typeof this._raw.pipe === \"function\") {\n            // pre-stream handler. might be triggered if a stream is set as content\n            // and 'error' fires before anything is done with this stream\n            this._contentErrorHandler = (err)=>{\n                this._raw.removeListener(\"error\", this._contentErrorHandler);\n                this._raw = err;\n            };\n            this._raw.once(\"error\", this._contentErrorHandler);\n        }\n        return this;\n    }\n    /////// PRIVATE METHODS\n    /**\n     * Detects and returns handle to a stream related with the content.\n     *\n     * @param {Mixed} content Node content\n     * @returns {Object} Stream object\n     */ _getStream(content) {\n        let contentStream;\n        if (content._resolvedValue) {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(()=>{\n                try {\n                    contentStream.end(content._resolvedValue);\n                } catch (err) {\n                    contentStream.emit(\"error\", err);\n                }\n            });\n            return contentStream;\n        } else if (typeof content.pipe === \"function\") {\n            // assume as stream\n            return content;\n        } else if (content && typeof content.path === \"string\" && !content.href) {\n            if (this.disableFileAccess) {\n                contentStream = new PassThrough();\n                setImmediate(()=>contentStream.emit(\"error\", new Error(\"File access rejected for \" + content.path)));\n                return contentStream;\n            }\n            // read file\n            return fs.createReadStream(content.path);\n        } else if (content && typeof content.href === \"string\") {\n            if (this.disableUrlAccess) {\n                contentStream = new PassThrough();\n                setImmediate(()=>contentStream.emit(\"error\", new Error(\"Url access rejected for \" + content.href)));\n                return contentStream;\n            }\n            // fetch URL\n            return nmfetch(content.href, {\n                headers: content.httpHeaders\n            });\n        } else {\n            // pass string or buffer content as a stream\n            contentStream = new PassThrough();\n            setImmediate(()=>{\n                try {\n                    contentStream.end(content || \"\");\n                } catch (err) {\n                    contentStream.emit(\"error\", err);\n                }\n            });\n            return contentStream;\n        }\n    }\n    /**\n     * Parses addresses. Takes in a single address or an array or an\n     * array of address arrays (eg. To: [[first group], [second group],...])\n     *\n     * @param {Mixed} addresses Addresses to be parsed\n     * @return {Array} An array of address objects\n     */ _parseAddresses(addresses) {\n        return [].concat.apply([], [].concat(addresses).map((address)=>{\n            // eslint-disable-line prefer-spread\n            if (address && address.address) {\n                address.address = this._normalizeAddress(address.address);\n                address.name = address.name || \"\";\n                return [\n                    address\n                ];\n            }\n            return addressparser(address);\n        }));\n    }\n    /**\n     * Normalizes a header key, uses Camel-Case form, except for uppercase MIME-\n     *\n     * @param {String} key Key to be normalized\n     * @return {String} key in Camel-Case form\n     */ _normalizeHeaderKey(key) {\n        key = (key || \"\").toString()// no newlines in keys\n        .replace(/\\r?\\n|\\r/g, \" \").trim().toLowerCase()// use uppercase words, except MIME\n        .replace(/^X-SMTPAPI$|^(MIME|DKIM|ARC|BIMI)\\b|^[a-z]|-(SPF|FBL|ID|MD5)$|-[a-z]/gi, (c)=>c.toUpperCase())// special case\n        .replace(/^Content-Features$/i, \"Content-features\");\n        return key;\n    }\n    /**\n     * Checks if the content type is multipart and defines boundary if needed.\n     * Doesn't return anything, modifies object argument instead.\n     *\n     * @param {Object} structured Parsed header value for 'Content-Type' key\n     */ _handleContentType(structured) {\n        this.contentType = structured.value.trim().toLowerCase();\n        this.multipart = /^multipart\\//i.test(this.contentType) ? this.contentType.substr(this.contentType.indexOf(\"/\") + 1) : false;\n        if (this.multipart) {\n            this.boundary = structured.params.boundary = structured.params.boundary || this.boundary || this._generateBoundary();\n        } else {\n            this.boundary = false;\n        }\n    }\n    /**\n     * Generates a multipart boundary value\n     *\n     * @return {String} boundary value\n     */ _generateBoundary() {\n        return this.rootNode.boundaryPrefix + \"-\" + this.rootNode.baseBoundary + \"-Part_\" + this._nodeId;\n    }\n    /**\n     * Encodes a header value for use in the generated rfc2822 email.\n     *\n     * @param {String} key Header key\n     * @param {String} value Header value\n     */ _encodeHeaderValue(key, value) {\n        key = this._normalizeHeaderKey(key);\n        switch(key){\n            // Structured headers\n            case \"From\":\n            case \"Sender\":\n            case \"To\":\n            case \"Cc\":\n            case \"Bcc\":\n            case \"Reply-To\":\n                return this._convertAddresses(this._parseAddresses(value));\n            // values enclosed in <>\n            case \"Message-ID\":\n            case \"In-Reply-To\":\n            case \"Content-Id\":\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                if (value.charAt(0) !== \"<\") {\n                    value = \"<\" + value;\n                }\n                if (value.charAt(value.length - 1) !== \">\") {\n                    value = value + \">\";\n                }\n                return value;\n            // space separated list of values enclosed in <>\n            case \"References\":\n                value = [].concat.apply([], [].concat(value || \"\").map((elm)=>{\n                    // eslint-disable-line prefer-spread\n                    elm = (elm || \"\").toString().replace(/\\r?\\n|\\r/g, \" \").trim();\n                    return elm.replace(/<[^>]*>/g, (str)=>str.replace(/\\s/g, \"\")).split(/\\s+/);\n                })).map((elm)=>{\n                    if (elm.charAt(0) !== \"<\") {\n                        elm = \"<\" + elm;\n                    }\n                    if (elm.charAt(elm.length - 1) !== \">\") {\n                        elm = elm + \">\";\n                    }\n                    return elm;\n                });\n                return value.join(\" \").trim();\n            case \"Date\":\n                if (Object.prototype.toString.call(value) === \"[object Date]\") {\n                    return value.toUTCString().replace(/GMT/, \"+0000\");\n                }\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                return this._encodeWords(value);\n            case \"Content-Type\":\n            case \"Content-Disposition\":\n                // if it includes a filename then it is already encoded\n                return (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n            default:\n                value = (value || \"\").toString().replace(/\\r?\\n|\\r/g, \" \");\n                // encodeWords only encodes if needed, otherwise the original string is returned\n                return this._encodeWords(value);\n        }\n    }\n    /**\n     * Rebuilds address object using punycode and other adjustments\n     *\n     * @param {Array} addresses An array of address objects\n     * @param {Array} [uniqueList] An array to be populated with addresses\n     * @return {String} address string\n     */ _convertAddresses(addresses, uniqueList) {\n        let values = [];\n        uniqueList = uniqueList || [];\n        [].concat(addresses || []).forEach((address)=>{\n            if (address.address) {\n                address.address = this._normalizeAddress(address.address);\n                if (!address.name) {\n                    values.push(address.address.indexOf(\" \") >= 0 ? `<${address.address}>` : `${address.address}`);\n                } else if (address.name) {\n                    values.push(`${this._encodeAddressName(address.name)} <${address.address}>`);\n                }\n                if (address.address) {\n                    if (!uniqueList.filter((a)=>a.address === address.address).length) {\n                        uniqueList.push(address);\n                    }\n                }\n            } else if (address.group) {\n                let groupListAddresses = (address.group.length ? this._convertAddresses(address.group, uniqueList) : \"\").trim();\n                values.push(`${this._encodeAddressName(address.name)}:${groupListAddresses};`);\n            }\n        });\n        return values.join(\", \");\n    }\n    /**\n     * Normalizes an email address\n     *\n     * @param {Array} address An array of address objects\n     * @return {String} address string\n     */ _normalizeAddress(address) {\n        address = (address || \"\").toString().replace(/[\\x00-\\x1F<>]+/g, \" \") // remove unallowed characters\n        .trim();\n        let lastAt = address.lastIndexOf(\"@\");\n        if (lastAt < 0) {\n            // Bare username\n            return address;\n        }\n        let user = address.substr(0, lastAt);\n        let domain = address.substr(lastAt + 1);\n        // Usernames are not touched and are kept as is even if these include unicode\n        // Domains are punycoded by default\n        // 'jõgeva.ee' will be converted to 'xn--jgeva-dua.ee'\n        // non-unicode domains are left as is\n        let encodedDomain;\n        try {\n            encodedDomain = punycode.toASCII(domain.toLowerCase());\n        } catch (err) {\n        // keep as is?\n        }\n        if (user.indexOf(\" \") >= 0) {\n            if (user.charAt(0) !== '\"') {\n                user = '\"' + user;\n            }\n            if (user.substr(-1) !== '\"') {\n                user = user + '\"';\n            }\n        }\n        return `${user}@${encodedDomain}`;\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */ _encodeAddressName(name) {\n        if (!/^[\\w ']*$/.test(name)) {\n            if (/^[\\x20-\\x7e]*$/.test(name)) {\n                return '\"' + name.replace(/([\\\\\"])/g, \"\\\\$1\") + '\"';\n            } else {\n                return mimeFuncs.encodeWord(name, this._getTextEncoding(name), 52);\n            }\n        }\n        return name;\n    }\n    /**\n     * If needed, mime encodes the name part\n     *\n     * @param {String} name Name part of an address\n     * @returns {String} Mime word encoded string if needed\n     */ _encodeWords(value) {\n        // set encodeAll parameter to true even though it is against the recommendation of RFC2047,\n        // by default only words that include non-ascii should be converted into encoded words\n        // but some clients (eg. Zimbra) do not handle it properly and remove surrounding whitespace\n        return mimeFuncs.encodeWords(value, this._getTextEncoding(value), 52, true);\n    }\n    /**\n     * Detects best mime encoding for a text value\n     *\n     * @param {String} value Value to check for\n     * @return {String} either 'Q' or 'B'\n     */ _getTextEncoding(value) {\n        value = (value || \"\").toString();\n        let encoding = this.textEncoding;\n        let latinLen;\n        let nonLatinLen;\n        if (!encoding) {\n            // count latin alphabet symbols and 8-bit range symbols + control symbols\n            // if there are more latin characters, then use quoted-printable\n            // encoding, otherwise use base64\n            nonLatinLen = (value.match(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\u0080-\\uFFFF]/g) || []).length; // eslint-disable-line no-control-regex\n            latinLen = (value.match(/[a-z]/gi) || []).length;\n            // if there are more latin symbols than binary/unicode, then prefer Q, otherwise B\n            encoding = nonLatinLen < latinLen ? \"Q\" : \"B\";\n        }\n        return encoding;\n    }\n    /**\n     * Generates a message id\n     *\n     * @return {String} Random Message-ID value\n     */ _generateMessageId() {\n        return \"<\" + [\n            2,\n            2,\n            2,\n            6\n        ].reduce(// crux to generate UUID-like random strings\n        (prev, len)=>prev + \"-\" + crypto.randomBytes(len).toString(\"hex\"), crypto.randomBytes(4).toString(\"hex\")) + \"@\" + // try to use the domain of the FROM address or fallback to server hostname\n        (this.getEnvelope().from || this.hostname || \"localhost\").split(\"@\").pop() + \">\";\n    }\n}\nmodule.exports = MimeNode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/last-newline.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\nclass LastNewline extends Transform {\n    constructor(){\n        super();\n        this.lastByte = false;\n    }\n    _transform(chunk, encoding, done) {\n        if (chunk.length) {\n            this.lastByte = chunk[chunk.length - 1];\n        }\n        this.push(chunk);\n        done();\n    }\n    _flush(done) {\n        if (this.lastByte === 0x0a) {\n            return done();\n        }\n        if (this.lastByte === 0x0d) {\n            this.push(Buffer.from(\"\\n\"));\n            return done();\n        }\n        this.push(Buffer.from(\"\\r\\n\"));\n        return done();\n    }\n}\nmodule.exports = LastNewline;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xhc3QtbmV3bGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLHVEQUEyQjtBQUU3QyxNQUFNQyxvQkFBb0JGO0lBQ3RCRyxhQUFjO1FBQ1YsS0FBSztRQUNMLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBRUFDLFdBQVdDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUU7UUFDOUIsSUFBSUYsTUFBTUcsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDTCxRQUFRLEdBQUdFLEtBQUssQ0FBQ0EsTUFBTUcsTUFBTSxHQUFHLEVBQUU7UUFDM0M7UUFFQSxJQUFJLENBQUNDLElBQUksQ0FBQ0o7UUFDVkU7SUFDSjtJQUVBRyxPQUFPSCxJQUFJLEVBQUU7UUFDVCxJQUFJLElBQUksQ0FBQ0osUUFBUSxLQUFLLE1BQU07WUFDeEIsT0FBT0k7UUFDWDtRQUNBLElBQUksSUFBSSxDQUFDSixRQUFRLEtBQUssTUFBTTtZQUN4QixJQUFJLENBQUNNLElBQUksQ0FBQ0UsT0FBT0MsSUFBSSxDQUFDO1lBQ3RCLE9BQU9MO1FBQ1g7UUFDQSxJQUFJLENBQUNFLElBQUksQ0FBQ0UsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCLE9BQU9MO0lBQ1g7QUFDSjtBQUVBTSxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL21pbWUtbm9kZS9sYXN0LW5ld2xpbmUuanM/YTM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybTtcblxuY2xhc3MgTGFzdE5ld2xpbmUgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxhc3RCeXRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICAgICAgaWYgKGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0Qnl0ZSA9IGNodW5rW2NodW5rLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH1cblxuICAgIF9mbHVzaChkb25lKSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBhKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxhc3RCeXRlID09PSAweDBkKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goQnVmZmVyLmZyb20oJ1xcbicpKTtcbiAgICAgICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wdXNoKEJ1ZmZlci5mcm9tKCdcXHJcXG4nKSk7XG4gICAgICAgIHJldHVybiBkb25lKCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExhc3ROZXdsaW5lO1xuIl0sIm5hbWVzIjpbIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJMYXN0TmV3bGluZSIsImNvbnN0cnVjdG9yIiwibGFzdEJ5dGUiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImRvbmUiLCJsZW5ndGgiLCJwdXNoIiwiX2ZsdXNoIiwiQnVmZmVyIiwiZnJvbSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/last-newline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js":
/*!**********************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-unix.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Ensures that only <LF> is used for linebreaks\n *\n * @param {Object} options Stream options\n */ class LeWindows extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n        for(let i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x0d) {\n                // \\n\n                buf = chunk.slice(lastPos, i);\n                lastPos = i + 1;\n                this.push(buf);\n            }\n        }\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n        done();\n    }\n}\nmodule.exports = LeWindows;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXVuaXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRixPQUFPRSxTQUFTO0FBRWxDOzs7O0NBSUMsR0FDRCxNQUFNQyxrQkFBa0JEO0lBQ3BCRSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLGlCQUFpQjtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO0lBQy9CO0lBRUE7O0tBRUMsR0FDREMsV0FBV0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUlDLFVBQVU7UUFFZCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTU4sTUFBTU8sTUFBTSxFQUFFRixJQUFJQyxLQUFLRCxJQUFLO1lBQzlDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLEtBQUs7Z0JBQ0xGLE1BQU1ILE1BQU1RLEtBQUssQ0FBQ0osU0FBU0M7Z0JBQzNCRCxVQUFVQyxJQUFJO2dCQUNkLElBQUksQ0FBQ0ksSUFBSSxDQUFDTjtZQUNkO1FBQ0o7UUFDQSxJQUFJQyxXQUFXQSxVQUFVSixNQUFNTyxNQUFNLEVBQUU7WUFDbkNKLE1BQU1ILE1BQU1RLEtBQUssQ0FBQ0o7WUFDbEIsSUFBSSxDQUFDSyxJQUFJLENBQUNOO1FBQ2QsT0FBTyxJQUFJLENBQUNDLFNBQVM7WUFDakIsSUFBSSxDQUFDSyxJQUFJLENBQUNUO1FBQ2Q7UUFDQUU7SUFDSjtBQUNKO0FBRUFRLE9BQU9DLE9BQU8sR0FBR2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXVuaXguanM/OWEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgVHJhbnNmb3JtID0gc3RyZWFtLlRyYW5zZm9ybTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgb25seSA8TEY+IGlzIHVzZWQgZm9yIGxpbmVicmVha3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBTdHJlYW0gb3B0aW9uc1xuICovXG5jbGFzcyBMZVdpbmRvd3MgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIC8vIGluaXQgVHJhbnNmb3JtXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyBkb3RzXG4gICAgICovXG4gICAgX3RyYW5zZm9ybShjaHVuaywgZW5jb2RpbmcsIGRvbmUpIHtcbiAgICAgICAgbGV0IGJ1ZjtcbiAgICAgICAgbGV0IGxhc3RQb3MgPSAwO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGNodW5rW2ldID09PSAweDBkKSB7XG4gICAgICAgICAgICAgICAgLy8gXFxuXG4gICAgICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcywgaSk7XG4gICAgICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChidWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UG9zICYmIGxhc3RQb3MgPCBjaHVuay5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MpO1xuICAgICAgICAgICAgdGhpcy5wdXNoKGJ1Zik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWxhc3RQb3MpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgZG9uZSgpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZVdpbmRvd3M7XG4iXSwibmFtZXMiOlsic3RyZWFtIiwicmVxdWlyZSIsIlRyYW5zZm9ybSIsIkxlV2luZG93cyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiZG9uZSIsImJ1ZiIsImxhc3RQb3MiLCJpIiwibGVuIiwibGVuZ3RoIiwic2xpY2UiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-unix.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/mime-node/le-windows.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Ensures that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */ class LeWindows extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this.lastByte = false;\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let buf;\n        let lastPos = 0;\n        for(let i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x0a) {\n                // \\n\n                if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        this.push(buf);\n                    }\n                    this.push(Buffer.from(\"\\r\\n\"));\n                    lastPos = i + 1;\n                }\n            }\n        }\n        if (lastPos && lastPos < chunk.length) {\n            buf = chunk.slice(lastPos);\n            this.push(buf);\n        } else if (!lastPos) {\n            this.push(chunk);\n        }\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n}\nmodule.exports = LeWindows;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXdpbmRvd3MuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRixPQUFPRSxTQUFTO0FBRWxDOzs7O0NBSUMsR0FDRCxNQUFNQyxrQkFBa0JEO0lBQ3BCRSxZQUFZQyxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNOLGlCQUFpQjtRQUNqQixJQUFJLENBQUNBLE9BQU8sR0FBR0EsV0FBVyxDQUFDO1FBQzNCLElBQUksQ0FBQ0MsUUFBUSxHQUFHO0lBQ3BCO0lBRUE7O0tBRUMsR0FDREMsV0FBV0MsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtRQUM5QixJQUFJQztRQUNKLElBQUlDLFVBQVU7UUFFZCxJQUFLLElBQUlDLElBQUksR0FBR0MsTUFBTU4sTUFBTU8sTUFBTSxFQUFFRixJQUFJQyxLQUFLRCxJQUFLO1lBQzlDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLEtBQUs7Z0JBQ0wsSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBSyxJQUFJLENBQUNQLFFBQVEsS0FBSyxNQUFPO29CQUNoRSxJQUFJTyxJQUFJRCxTQUFTO3dCQUNiRCxNQUFNSCxNQUFNUSxLQUFLLENBQUNKLFNBQVNDO3dCQUMzQixJQUFJLENBQUNJLElBQUksQ0FBQ047b0JBQ2Q7b0JBQ0EsSUFBSSxDQUFDTSxJQUFJLENBQUNDLE9BQU9DLElBQUksQ0FBQztvQkFDdEJQLFVBQVVDLElBQUk7Z0JBQ2xCO1lBQ0o7UUFDSjtRQUVBLElBQUlELFdBQVdBLFVBQVVKLE1BQU1PLE1BQU0sRUFBRTtZQUNuQ0osTUFBTUgsTUFBTVEsS0FBSyxDQUFDSjtZQUNsQixJQUFJLENBQUNLLElBQUksQ0FBQ047UUFDZCxPQUFPLElBQUksQ0FBQ0MsU0FBUztZQUNqQixJQUFJLENBQUNLLElBQUksQ0FBQ1Q7UUFDZDtRQUVBLElBQUksQ0FBQ0YsUUFBUSxHQUFHRSxLQUFLLENBQUNBLE1BQU1PLE1BQU0sR0FBRyxFQUFFO1FBQ3ZDTDtJQUNKO0FBQ0o7QUFFQVUsT0FBT0MsT0FBTyxHQUFHbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvbWltZS1ub2RlL2xlLXdpbmRvd3MuanM/ZGEwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgVHJhbnNmb3JtID0gc3RyZWFtLlRyYW5zZm9ybTtcblxuLyoqXG4gKiBFbnN1cmVzIHRoYXQgb25seSA8Q1I+PExGPiBzZXF1ZW5jZXMgYXJlIHVzZWQgZm9yIGxpbmVicmVha3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBTdHJlYW0gb3B0aW9uc1xuICovXG5jbGFzcyBMZVdpbmRvd3MgZXh0ZW5kcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIC8vIGluaXQgVHJhbnNmb3JtXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMubGFzdEJ5dGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIGRvdHNcbiAgICAgKi9cbiAgICBfdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgZG9uZSkge1xuICAgICAgICBsZXQgYnVmO1xuICAgICAgICBsZXQgbGFzdFBvcyA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2h1bmtbaV0gPT09IDB4MGEpIHtcbiAgICAgICAgICAgICAgICAvLyBcXG5cbiAgICAgICAgICAgICAgICBpZiAoKGkgJiYgY2h1bmtbaSAtIDFdICE9PSAweDBkKSB8fCAoIWkgJiYgdGhpcy5sYXN0Qnl0ZSAhPT0gMHgwZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiBsYXN0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChidWYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChCdWZmZXIuZnJvbSgnXFxyXFxuJykpO1xuICAgICAgICAgICAgICAgICAgICBsYXN0UG9zID0gaSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhc3RQb3MgJiYgbGFzdFBvcyA8IGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcyk7XG4gICAgICAgICAgICB0aGlzLnB1c2goYnVmKTtcbiAgICAgICAgfSBlbHNlIGlmICghbGFzdFBvcykge1xuICAgICAgICAgICAgdGhpcy5wdXNoKGNodW5rKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdEJ5dGUgPSBjaHVua1tjaHVuay5sZW5ndGggLSAxXTtcbiAgICAgICAgZG9uZSgpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMZVdpbmRvd3M7XG4iXSwibmFtZXMiOlsic3RyZWFtIiwicmVxdWlyZSIsIlRyYW5zZm9ybSIsIkxlV2luZG93cyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImxhc3RCeXRlIiwiX3RyYW5zZm9ybSIsImNodW5rIiwiZW5jb2RpbmciLCJkb25lIiwiYnVmIiwibGFzdFBvcyIsImkiLCJsZW4iLCJsZW5ndGgiLCJzbGljZSIsInB1c2giLCJCdWZmZXIiLCJmcm9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/nodemailer.js":
/*!***************************************************!*\
  !*** ./node_modules/nodemailer/lib/nodemailer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Mailer = __webpack_require__(/*! ./mailer */ \"(rsc)/./node_modules/nodemailer/lib/mailer/index.js\");\nconst shared = __webpack_require__(/*! ./shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst SMTPPool = __webpack_require__(/*! ./smtp-pool */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\");\nconst SMTPTransport = __webpack_require__(/*! ./smtp-transport */ \"(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\");\nconst SendmailTransport = __webpack_require__(/*! ./sendmail-transport */ \"(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\");\nconst StreamTransport = __webpack_require__(/*! ./stream-transport */ \"(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\");\nconst JSONTransport = __webpack_require__(/*! ./json-transport */ \"(rsc)/./node_modules/nodemailer/lib/json-transport/index.js\");\nconst SESTransport = __webpack_require__(/*! ./ses-transport */ \"(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\");\nconst nmfetch = __webpack_require__(/*! ./fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst packageData = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst ETHEREAL_API = (process.env.ETHEREAL_API || \"https://api.nodemailer.com\").replace(/\\/+$/, \"\");\nconst ETHEREAL_WEB = (process.env.ETHEREAL_WEB || \"https://ethereal.email\").replace(/\\/+$/, \"\");\nconst ETHEREAL_CACHE = [\n    \"true\",\n    \"yes\",\n    \"y\",\n    \"1\"\n].includes((process.env.ETHEREAL_CACHE || \"yes\").toString().trim().toLowerCase());\nlet testAccount = false;\nmodule.exports.createTransport = function(transporter, defaults) {\n    let urlConfig;\n    let options;\n    let mailer;\n    if (// provided transporter is a configuration object, not transporter plugin\n    typeof transporter === \"object\" && typeof transporter.send !== \"function\" || // provided transporter looks like a connection url\n    typeof transporter === \"string\" && /^(smtps?|direct):/i.test(transporter)) {\n        if (urlConfig = typeof transporter === \"string\" ? transporter : transporter.url) {\n            // parse a configuration URL into configuration options\n            options = shared.parseConnectionUrl(urlConfig);\n        } else {\n            options = transporter;\n        }\n        if (options.pool) {\n            transporter = new SMTPPool(options);\n        } else if (options.sendmail) {\n            transporter = new SendmailTransport(options);\n        } else if (options.streamTransport) {\n            transporter = new StreamTransport(options);\n        } else if (options.jsonTransport) {\n            transporter = new JSONTransport(options);\n        } else if (options.SES) {\n            transporter = new SESTransport(options);\n        } else {\n            transporter = new SMTPTransport(options);\n        }\n    }\n    mailer = new Mailer(transporter, options, defaults);\n    return mailer;\n};\nmodule.exports.createTestAccount = function(apiUrl, callback) {\n    let promise;\n    if (!callback && typeof apiUrl === \"function\") {\n        callback = apiUrl;\n        apiUrl = false;\n    }\n    if (!callback) {\n        promise = new Promise((resolve, reject)=>{\n            callback = shared.callbackPromise(resolve, reject);\n        });\n    }\n    if (ETHEREAL_CACHE && testAccount) {\n        setImmediate(()=>callback(null, testAccount));\n        return promise;\n    }\n    apiUrl = apiUrl || ETHEREAL_API;\n    let chunks = [];\n    let chunklen = 0;\n    let req = nmfetch(apiUrl + \"/user\", {\n        contentType: \"application/json\",\n        method: \"POST\",\n        body: Buffer.from(JSON.stringify({\n            requestor: packageData.name,\n            version: packageData.version\n        }))\n    });\n    req.on(\"readable\", ()=>{\n        let chunk;\n        while((chunk = req.read()) !== null){\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n    req.once(\"error\", (err)=>callback(err));\n    req.once(\"end\", ()=>{\n        let res = Buffer.concat(chunks, chunklen);\n        let data;\n        let err;\n        try {\n            data = JSON.parse(res.toString());\n        } catch (E) {\n            err = E;\n        }\n        if (err) {\n            return callback(err);\n        }\n        if (data.status !== \"success\" || data.error) {\n            return callback(new Error(data.error || \"Request failed\"));\n        }\n        delete data.status;\n        testAccount = data;\n        callback(null, testAccount);\n    });\n    return promise;\n};\nmodule.exports.getTestMessageUrl = function(info) {\n    if (!info || !info.response) {\n        return false;\n    }\n    let infoProps = new Map();\n    info.response.replace(/\\[([^\\]]+)\\]$/, (m, props)=>{\n        props.replace(/\\b([A-Z0-9]+)=([^\\s]+)/g, (m, key, value)=>{\n            infoProps.set(key, value);\n        });\n    });\n    if (infoProps.has(\"STATUS\") && infoProps.has(\"MSGID\")) {\n        return (testAccount.web || ETHEREAL_WEB) + \"/message/\" + infoProps.get(\"MSGID\");\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/nodemailer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/qp/index.js":
/*!*************************************************!*\
  !*** ./node_modules/nodemailer/lib/qp/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Transform = (__webpack_require__(/*! stream */ \"stream\").Transform);\n/**\n * Encodes a Buffer into a Quoted-Printable encoded string\n *\n * @param {Buffer} buffer Buffer to convert\n * @returns {String} Quoted-Printable encoded string\n */ function encode(buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer, \"utf-8\");\n    }\n    // usable characters that do not need encoding\n    let ranges = [\n        // https://tools.ietf.org/html/rfc2045#section-6.7\n        [\n            0x09\n        ],\n        [\n            0x0a\n        ],\n        [\n            0x0d\n        ],\n        [\n            0x20,\n            0x3c\n        ],\n        [\n            0x3e,\n            0x7e\n        ] // >?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}\n    ];\n    let result = \"\";\n    let ord;\n    for(let i = 0, len = buffer.length; i < len; i++){\n        ord = buffer[i];\n        // if the char is in allowed range, then keep as is, unless it is a WS in the end of a line\n        if (checkRanges(ord, ranges) && !((ord === 0x20 || ord === 0x09) && (i === len - 1 || buffer[i + 1] === 0x0a || buffer[i + 1] === 0x0d))) {\n            result += String.fromCharCode(ord);\n            continue;\n        }\n        result += \"=\" + (ord < 0x10 ? \"0\" : \"\") + ord.toString(16).toUpperCase();\n    }\n    return result;\n}\n/**\n * Adds soft line breaks to a Quoted-Printable string\n *\n * @param {String} str Quoted-Printable encoded string that might need line wrapping\n * @param {Number} [lineLength=76] Maximum allowed length for a line\n * @returns {String} Soft-wrapped Quoted-Printable encoded string\n */ function wrap(str, lineLength) {\n    str = (str || \"\").toString();\n    lineLength = lineLength || 76;\n    if (str.length <= lineLength) {\n        return str;\n    }\n    let pos = 0;\n    let len = str.length;\n    let match, code, line;\n    let lineMargin = Math.floor(lineLength / 3);\n    let result = \"\";\n    // insert soft linebreaks where needed\n    while(pos < len){\n        line = str.substr(pos, lineLength);\n        if (match = line.match(/\\r\\n/)) {\n            line = line.substr(0, match.index + match[0].length);\n            result += line;\n            pos += line.length;\n            continue;\n        }\n        if (line.substr(-1) === \"\\n\") {\n            // nothing to change here\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (match = line.substr(-lineMargin).match(/\\n.*?$/)) {\n            // truncate to nearest line break\n            line = line.substr(0, line.length - (match[0].length - 1));\n            result += line;\n            pos += line.length;\n            continue;\n        } else if (line.length > lineLength - lineMargin && (match = line.substr(-lineMargin).match(/[ \\t.,!?][^ \\t.,!?]*$/))) {\n            // truncate to nearest space\n            line = line.substr(0, line.length - (match[0].length - 1));\n        } else if (line.match(/[=][\\da-f]{0,2}$/i)) {\n            // push incomplete encoding sequences to the next line\n            if (match = line.match(/[=][\\da-f]{0,1}$/i)) {\n                line = line.substr(0, line.length - match[0].length);\n            }\n            // ensure that utf-8 sequences are not split\n            while(line.length > 3 && line.length < len - pos && !line.match(/^(?:=[\\da-f]{2}){1,4}$/i) && (match = line.match(/[=][\\da-f]{2}$/gi))){\n                code = parseInt(match[0].substr(1, 2), 16);\n                if (code < 128) {\n                    break;\n                }\n                line = line.substr(0, line.length - 3);\n                if (code >= 0xc0) {\n                    break;\n                }\n            }\n        }\n        if (pos + line.length < len && line.substr(-1) !== \"\\n\") {\n            if (line.length === lineLength && line.match(/[=][\\da-f]{2}$/i)) {\n                line = line.substr(0, line.length - 3);\n            } else if (line.length === lineLength) {\n                line = line.substr(0, line.length - 1);\n            }\n            pos += line.length;\n            line += \"=\\r\\n\";\n        } else {\n            pos += line.length;\n        }\n        result += line;\n    }\n    return result;\n}\n/**\n * Helper function to check if a number is inside provided ranges\n *\n * @param {Number} nr Number to check for\n * @param {Array} ranges An Array of allowed values\n * @returns {Boolean} True if the value was found inside allowed ranges, false otherwise\n */ function checkRanges(nr, ranges) {\n    for(let i = ranges.length - 1; i >= 0; i--){\n        if (!ranges[i].length) {\n            continue;\n        }\n        if (ranges[i].length === 1 && nr === ranges[i][0]) {\n            return true;\n        }\n        if (ranges[i].length === 2 && nr >= ranges[i][0] && nr <= ranges[i][1]) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Creates a transform stream for encoding data to Quoted-Printable encoding\n *\n * @constructor\n * @param {Object} options Stream options\n * @param {Number} [options.lineLength=76] Maximum length for lines, set to false to disable wrapping\n */ class Encoder extends Transform {\n    constructor(options){\n        super();\n        // init Transform\n        this.options = options || {};\n        if (this.options.lineLength !== false) {\n            this.options.lineLength = this.options.lineLength || 76;\n        }\n        this._curLine = \"\";\n        this.inputBytes = 0;\n        this.outputBytes = 0;\n    }\n    _transform(chunk, encoding, done) {\n        let qp;\n        if (encoding !== \"buffer\") {\n            chunk = Buffer.from(chunk, encoding);\n        }\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n        this.inputBytes += chunk.length;\n        if (this.options.lineLength) {\n            qp = this._curLine + encode(chunk);\n            qp = wrap(qp, this.options.lineLength);\n            qp = qp.replace(/(^|\\n)([^\\n]*)$/, (match, lineBreak, lastLine)=>{\n                this._curLine = lastLine;\n                return lineBreak;\n            });\n            if (qp) {\n                this.outputBytes += qp.length;\n                this.push(qp);\n            }\n        } else {\n            qp = encode(chunk);\n            this.outputBytes += qp.length;\n            this.push(qp, \"ascii\");\n        }\n        done();\n    }\n    _flush(done) {\n        if (this._curLine) {\n            this.outputBytes += this._curLine.length;\n            this.push(this._curLine, \"ascii\");\n        }\n        done();\n    }\n}\n// expose to the world\nmodule.exports = {\n    encode,\n    wrap,\n    Encoder\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/qp/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/sendmail-transport/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst spawn = (__webpack_require__(/*! child_process */ \"child_process\").spawn);\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object for Sendmail\n *\n * Possible options can be the following:\n *\n *  * **path** optional path to sendmail binary\n *  * **newline** either 'windows' or 'unix'\n *  * **args** an array of arguments for the sendmail binary\n *\n * @constructor\n * @param {Object} optional config parameter for Sendmail\n */ class SendmailTransport {\n    constructor(options){\n        options = options || {};\n        // use a reference to spawn for mocking purposes\n        this._spawn = spawn;\n        this.options = options || {};\n        this.name = \"Sendmail\";\n        this.version = packageData.version;\n        this.path = \"sendmail\";\n        this.args = false;\n        this.winbreak = false;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"sendmail\"\n        });\n        if (options) {\n            if (typeof options === \"string\") {\n                this.path = options;\n            } else if (typeof options === \"object\") {\n                if (options.path) {\n                    this.path = options.path;\n                }\n                if (Array.isArray(options.args)) {\n                    this.args = options.args;\n                }\n                this.winbreak = [\n                    \"win\",\n                    \"windows\",\n                    \"dos\",\n                    \"\\r\\n\"\n                ].includes((options.newline || \"\").toString().toLowerCase());\n            }\n        }\n    }\n    /**\n     * <p>Compiles a mailcomposer message and forwards it to handler that sends it.</p>\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // Sendmail strips this header line by itself\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let args;\n        let sendmail;\n        let returned;\n        const hasInvalidAddresses = [].concat(envelope.from || []).concat(envelope.to || []).some((addr)=>/^-/.test(addr));\n        if (hasInvalidAddresses) {\n            return done(new Error(\"Can not send mail. Invalid envelope addresses.\"));\n        }\n        if (this.args) {\n            // force -i to keep single dots\n            args = [\n                \"-i\"\n            ].concat(this.args).concat(envelope.to);\n        } else {\n            args = [\n                \"-i\"\n            ].concat(envelope.from ? [\n                \"-f\",\n                envelope.from\n            ] : []).concat(envelope.to);\n        }\n        let callback = (err)=>{\n            if (returned) {\n                // ignore any additional responses, already done\n                return;\n            }\n            returned = true;\n            if (typeof done === \"function\") {\n                if (err) {\n                    return done(err);\n                } else {\n                    return done(null, {\n                        envelope: mail.data.envelope || mail.message.getEnvelope(),\n                        messageId,\n                        response: \"Messages queued for delivery\"\n                    });\n                }\n            }\n        };\n        try {\n            sendmail = this._spawn(this.path, args);\n        } catch (E) {\n            this.logger.error({\n                err: E,\n                tnx: \"spawn\",\n                messageId\n            }, \"Error occurred while spawning sendmail. %s\", E.message);\n            return callback(E);\n        }\n        if (sendmail) {\n            sendmail.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"spawn\",\n                    messageId\n                }, \"Error occurred when sending message %s. %s\", messageId, err.message);\n                callback(err);\n            });\n            sendmail.once(\"exit\", (code)=>{\n                if (!code) {\n                    return callback();\n                }\n                let err;\n                if (code === 127) {\n                    err = new Error(\"Sendmail command not found, process exited with code \" + code);\n                } else {\n                    err = new Error(\"Sendmail exited with code \" + code);\n                }\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error sending message %s to sendmail. %s\", messageId, err.message);\n                callback(err);\n            });\n            sendmail.once(\"close\", callback);\n            sendmail.stdin.on(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error occurred when piping message %s to sendmail. %s\", messageId, err.message);\n                callback(err);\n            });\n            let recipients = [].concat(envelope.to || []);\n            if (recipients.length > 3) {\n                recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n            }\n            this.logger.info({\n                tnx: \"send\",\n                messageId\n            }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n            let sourceStream = mail.message.createReadStream();\n            sourceStream.once(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"stdin\",\n                    messageId\n                }, \"Error occurred when generating message %s. %s\", messageId, err.message);\n                sendmail.kill(\"SIGINT\"); // do not deliver the message\n                callback(err);\n            });\n            sourceStream.pipe(sendmail.stdin);\n        } else {\n            return callback(new Error(\"sendmail was not found\"));\n        }\n    }\n}\nmodule.exports = SendmailTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/sendmail-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js":
/*!************************************************************!*\
  !*** ./node_modules/nodemailer/lib/ses-transport/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst LeWindows = __webpack_require__(/*! ../mime-node/le-windows */ \"(rsc)/./node_modules/nodemailer/lib/mime-node/le-windows.js\");\n/**\n * Generates a Transport object for AWS SES\n *\n * Possible options can be the following:\n *\n *  * **sendingRate** optional Number specifying how many messages per second should be delivered to SES\n *  * **maxConnections** optional Number specifying max number of parallel connections to SES\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class SESTransport extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        this.options = options || {};\n        this.ses = this.options.SES;\n        this.name = \"SESTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"ses-transport\"\n        });\n        // parallel sending connections\n        this.maxConnections = Number(this.options.maxConnections) || Infinity;\n        this.connections = 0;\n        // max messages per second\n        this.sendingRate = Number(this.options.sendingRate) || Infinity;\n        this.sendingRateTTL = null;\n        this.rateInterval = 1000; // milliseconds\n        this.rateMessages = [];\n        this.pending = [];\n        this.idling = true;\n        setImmediate(()=>{\n            if (this.idling) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Schedules a sending of a message\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, callback) {\n        if (this.connections >= this.maxConnections) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n        if (!this._checkSendingRate()) {\n            this.idling = false;\n            return this.pending.push({\n                mail,\n                callback\n            });\n        }\n        this._send(mail, (...args)=>{\n            setImmediate(()=>callback(...args));\n            this._sent();\n        });\n    }\n    _checkRatedQueue() {\n        if (this.connections >= this.maxConnections || !this._checkSendingRate()) {\n            return;\n        }\n        if (!this.pending.length) {\n            if (!this.idling) {\n                this.idling = true;\n                this.emit(\"idle\");\n            }\n            return;\n        }\n        let next = this.pending.shift();\n        this._send(next.mail, (...args)=>{\n            setImmediate(()=>next.callback(...args));\n            this._sent();\n        });\n    }\n    _checkSendingRate() {\n        clearTimeout(this.sendingRateTTL);\n        let now = Date.now();\n        let oldest = false;\n        // delete older messages\n        for(let i = this.rateMessages.length - 1; i >= 0; i--){\n            if (this.rateMessages[i].ts >= now - this.rateInterval && (!oldest || this.rateMessages[i].ts < oldest)) {\n                oldest = this.rateMessages[i].ts;\n            }\n            if (this.rateMessages[i].ts < now - this.rateInterval && !this.rateMessages[i].pending) {\n                this.rateMessages.splice(i, 1);\n            }\n        }\n        if (this.rateMessages.length < this.sendingRate) {\n            return true;\n        }\n        let delay = Math.max(oldest + 1001, now + 20);\n        this.sendingRateTTL = setTimeout(()=>this._checkRatedQueue(), now - delay);\n        try {\n            this.sendingRateTTL.unref();\n        } catch (E) {\n        // Ignore. Happens on envs with non-node timer implementation\n        }\n        return false;\n    }\n    _sent() {\n        this.connections--;\n        this._checkRatedQueue();\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */ isIdle() {\n        return this.idling;\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to SES\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ _send(mail, callback) {\n        let statObject = {\n            ts: Date.now(),\n            pending: true\n        };\n        this.connections++;\n        this.rateMessages.push(statObject);\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n        let getRawMessage = (next)=>{\n            // do not use Message-ID and Date in DKIM signature\n            if (!mail.data._dkim) {\n                mail.data._dkim = {};\n            }\n            if (mail.data._dkim.skipFields && typeof mail.data._dkim.skipFields === \"string\") {\n                mail.data._dkim.skipFields += \":date:message-id\";\n            } else {\n                mail.data._dkim.skipFields = \"date:message-id\";\n            }\n            let sourceStream = mail.message.createReadStream();\n            let stream = sourceStream.pipe(new LeWindows());\n            let chunks = [];\n            let chunklen = 0;\n            stream.on(\"readable\", ()=>{\n                let chunk;\n                while((chunk = stream.read()) !== null){\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n            sourceStream.once(\"error\", (err)=>stream.emit(\"error\", err));\n            stream.once(\"error\", (err)=>{\n                next(err);\n            });\n            stream.once(\"end\", ()=>next(null, Buffer.concat(chunks, chunklen)));\n        };\n        setImmediate(()=>getRawMessage((err, raw)=>{\n                if (err) {\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed creating message for %s. %s\", messageId, err.message);\n                    statObject.pending = false;\n                    return callback(err);\n                }\n                let sesMessage = {\n                    RawMessage: {\n                        // required\n                        Data: raw // required\n                    },\n                    Source: envelope.from,\n                    Destinations: envelope.to\n                };\n                Object.keys(mail.data.ses || {}).forEach((key)=>{\n                    sesMessage[key] = mail.data.ses[key];\n                });\n                let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n                let aws = this.ses.aws || {};\n                let getRegion = (cb)=>{\n                    if (ses.config && typeof ses.config.region === \"function\") {\n                        // promise\n                        return ses.config.region().then((region)=>cb(null, region)).catch((err)=>cb(err));\n                    }\n                    return cb(null, ses.config && ses.config.region || \"us-east-1\");\n                };\n                getRegion((err, region)=>{\n                    if (err || !region) {\n                        region = \"us-east-1\";\n                    }\n                    let sendPromise;\n                    if (typeof ses.send === \"function\" && aws.SendRawEmailCommand) {\n                        // v3 API\n                        sendPromise = ses.send(new aws.SendRawEmailCommand(sesMessage));\n                    } else {\n                        // v2 API\n                        sendPromise = ses.sendRawEmail(sesMessage).promise();\n                    }\n                    sendPromise.then((data)=>{\n                        if (region === \"us-east-1\") {\n                            region = \"email\";\n                        }\n                        statObject.pending = false;\n                        callback(null, {\n                            envelope: {\n                                from: envelope.from,\n                                to: envelope.to\n                            },\n                            messageId: \"<\" + data.MessageId + (!/@/.test(data.MessageId) ? \"@\" + region + \".amazonses.com\" : \"\") + \">\",\n                            response: data.MessageId,\n                            raw\n                        });\n                    }).catch((err)=>{\n                        this.logger.error({\n                            err,\n                            tnx: \"send\"\n                        }, \"Send error for %s: %s\", messageId, err.message);\n                        statObject.pending = false;\n                        callback(err);\n                    });\n                });\n            }));\n    }\n    /**\n     * Verifies SES configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        let ses = (this.ses.aws ? this.ses.ses : this.ses) || {};\n        let aws = this.ses.aws || {};\n        const sesMessage = {\n            RawMessage: {\n                // required\n                Data: \"From: invalid@invalid\\r\\nTo: invalid@invalid\\r\\n Subject: Invalid\\r\\n\\r\\nInvalid\"\n            },\n            Source: \"invalid@invalid\",\n            Destinations: [\n                \"invalid@invalid\"\n            ]\n        };\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        const cb = (err)=>{\n            if (err && (err.code || err.Code) !== \"InvalidParameterValue\") {\n                return callback(err);\n            }\n            return callback(null, true);\n        };\n        if (typeof ses.send === \"function\" && aws.SendRawEmailCommand) {\n            // v3 API\n            sesMessage.RawMessage.Data = Buffer.from(sesMessage.RawMessage.Data);\n            ses.send(new aws.SendRawEmailCommand(sesMessage), cb);\n        } else {\n            // v2 API\n            ses.sendRawEmail(sesMessage, cb);\n        }\n        return promise;\n    }\n}\nmodule.exports = SESTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/ses-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/shared/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/nodemailer/lib/shared/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint no-console: 0 */ \nconst urllib = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst DNS_TTL = 5 * 60 * 1000;\nlet networkInterfaces;\ntry {\n    networkInterfaces = os.networkInterfaces();\n} catch (err) {\n// fails on some systems\n}\nmodule.exports.networkInterfaces = networkInterfaces;\nconst isFamilySupported = (family, allowInternal)=>{\n    let networkInterfaces = module.exports.networkInterfaces;\n    if (!networkInterfaces) {\n        // hope for the best\n        return true;\n    }\n    const familySupported = // crux that replaces Object.values(networkInterfaces) as Object.values is not supported in nodejs v6\n    Object.keys(networkInterfaces).map((key)=>networkInterfaces[key])// crux that replaces .flat() as it is not supported in older Node versions (v10 and older)\n    .reduce((acc, val)=>acc.concat(val), []).filter((i)=>!i.internal || allowInternal).filter((i)=>i.family === \"IPv\" + family || i.family === family).length > 0;\n    return familySupported;\n};\nconst resolver = (family, hostname, options, callback)=>{\n    options = options || {};\n    const familySupported = isFamilySupported(family, options.allowInternalNetworkInterfaces);\n    if (!familySupported) {\n        return callback(null, []);\n    }\n    const resolver = dns.Resolver ? new dns.Resolver(options) : dns;\n    resolver[\"resolve\" + family](hostname, (err, addresses)=>{\n        if (err) {\n            switch(err.code){\n                case dns.NODATA:\n                case dns.NOTFOUND:\n                case dns.NOTIMP:\n                case dns.SERVFAIL:\n                case dns.CONNREFUSED:\n                case dns.REFUSED:\n                case \"EAI_AGAIN\":\n                    return callback(null, []);\n            }\n            return callback(err);\n        }\n        return callback(null, Array.isArray(addresses) ? addresses : [].concat(addresses || []));\n    });\n};\nconst dnsCache = module.exports.dnsCache = new Map();\nconst formatDNSValue = (value, extra)=>{\n    if (!value) {\n        return Object.assign({}, extra || {});\n    }\n    return Object.assign({\n        servername: value.servername,\n        host: !value.addresses || !value.addresses.length ? null : value.addresses.length === 1 ? value.addresses[0] : value.addresses[Math.floor(Math.random() * value.addresses.length)]\n    }, extra || {});\n};\nmodule.exports.resolveHostname = (options, callback)=>{\n    options = options || {};\n    if (!options.host && options.servername) {\n        options.host = options.servername;\n    }\n    if (!options.host || net.isIP(options.host)) {\n        // nothing to do here\n        let value = {\n            addresses: [\n                options.host\n            ],\n            servername: options.servername || false\n        };\n        return callback(null, formatDNSValue(value, {\n            cached: false\n        }));\n    }\n    let cached;\n    if (dnsCache.has(options.host)) {\n        cached = dnsCache.get(options.host);\n        if (!cached.expires || cached.expires >= Date.now()) {\n            return callback(null, formatDNSValue(cached.value, {\n                cached: true\n            }));\n        }\n    }\n    resolver(4, options.host, options, (err, addresses)=>{\n        if (err) {\n            if (cached) {\n                // ignore error, use expired value\n                return callback(null, formatDNSValue(cached.value, {\n                    cached: true,\n                    error: err\n                }));\n            }\n            return callback(err);\n        }\n        if (addresses && addresses.length) {\n            let value = {\n                addresses,\n                servername: options.servername || options.host\n            };\n            dnsCache.set(options.host, {\n                value,\n                expires: Date.now() + (options.dnsTtl || DNS_TTL)\n            });\n            return callback(null, formatDNSValue(value, {\n                cached: false\n            }));\n        }\n        resolver(6, options.host, options, (err, addresses)=>{\n            if (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(null, formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    }));\n                }\n                return callback(err);\n            }\n            if (addresses && addresses.length) {\n                let value = {\n                    addresses,\n                    servername: options.servername || options.host\n                };\n                dnsCache.set(options.host, {\n                    value,\n                    expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                });\n                return callback(null, formatDNSValue(value, {\n                    cached: false\n                }));\n            }\n            try {\n                dns.lookup(options.host, {\n                    all: true\n                }, (err, addresses)=>{\n                    if (err) {\n                        if (cached) {\n                            // ignore error, use expired value\n                            return callback(null, formatDNSValue(cached.value, {\n                                cached: true,\n                                error: err\n                            }));\n                        }\n                        return callback(err);\n                    }\n                    let address = addresses ? addresses.filter((addr)=>isFamilySupported(addr.family)).map((addr)=>addr.address).shift() : false;\n                    if (addresses && addresses.length && !address) {\n                        // there are addresses but none can be used\n                        console.warn(`Failed to resolve IPv${addresses[0].family} addresses with current network`);\n                    }\n                    if (!address && cached) {\n                        // nothing was found, fallback to cached value\n                        return callback(null, formatDNSValue(cached.value, {\n                            cached: true\n                        }));\n                    }\n                    let value = {\n                        addresses: address ? [\n                            address\n                        ] : [\n                            options.host\n                        ],\n                        servername: options.servername || options.host\n                    };\n                    dnsCache.set(options.host, {\n                        value,\n                        expires: Date.now() + (options.dnsTtl || DNS_TTL)\n                    });\n                    return callback(null, formatDNSValue(value, {\n                        cached: false\n                    }));\n                });\n            } catch (err) {\n                if (cached) {\n                    // ignore error, use expired value\n                    return callback(null, formatDNSValue(cached.value, {\n                        cached: true,\n                        error: err\n                    }));\n                }\n                return callback(err);\n            }\n        });\n    });\n};\n/**\n * Parses connection url to a structured configuration object\n *\n * @param {String} str Connection url\n * @return {Object} Configuration object\n */ module.exports.parseConnectionUrl = (str)=>{\n    str = str || \"\";\n    let options = {};\n    [\n        urllib.parse(str, true)\n    ].forEach((url)=>{\n        let auth;\n        switch(url.protocol){\n            case \"smtp:\":\n                options.secure = false;\n                break;\n            case \"smtps:\":\n                options.secure = true;\n                break;\n            case \"direct:\":\n                options.direct = true;\n                break;\n        }\n        if (!isNaN(url.port) && Number(url.port)) {\n            options.port = Number(url.port);\n        }\n        if (url.hostname) {\n            options.host = url.hostname;\n        }\n        if (url.auth) {\n            auth = url.auth.split(\":\");\n            if (!options.auth) {\n                options.auth = {};\n            }\n            options.auth.user = auth.shift();\n            options.auth.pass = auth.join(\":\");\n        }\n        Object.keys(url.query || {}).forEach((key)=>{\n            let obj = options;\n            let lKey = key;\n            let value = url.query[key];\n            if (!isNaN(value)) {\n                value = Number(value);\n            }\n            switch(value){\n                case \"true\":\n                    value = true;\n                    break;\n                case \"false\":\n                    value = false;\n                    break;\n            }\n            // tls is nested object\n            if (key.indexOf(\"tls.\") === 0) {\n                lKey = key.substr(4);\n                if (!options.tls) {\n                    options.tls = {};\n                }\n                obj = options.tls;\n            } else if (key.indexOf(\".\") >= 0) {\n                // ignore nested properties besides tls\n                return;\n            }\n            if (!(lKey in obj)) {\n                obj[lKey] = value;\n            }\n        });\n    });\n    return options;\n};\nmodule.exports._logFunc = (logger, level, defaults, data, message, ...args)=>{\n    let entry = {};\n    Object.keys(defaults || {}).forEach((key)=>{\n        if (key !== \"level\") {\n            entry[key] = defaults[key];\n        }\n    });\n    Object.keys(data || {}).forEach((key)=>{\n        if (key !== \"level\") {\n            entry[key] = data[key];\n        }\n    });\n    logger[level](entry, message, ...args);\n};\n/**\n * Returns a bunyan-compatible logger interface. Uses either provided logger or\n * creates a default console logger\n *\n * @param {Object} [options] Options object that might include 'logger' value\n * @return {Object} bunyan compatible logger\n */ module.exports.getLogger = (options, defaults)=>{\n    options = options || {};\n    let response = {};\n    let levels = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\",\n        \"fatal\"\n    ];\n    if (!options.logger) {\n        // use vanity logger\n        levels.forEach((level)=>{\n            response[level] = ()=>false;\n        });\n        return response;\n    }\n    let logger = options.logger;\n    if (options.logger === true) {\n        // create console logger\n        logger = createDefaultLogger(levels);\n    }\n    levels.forEach((level)=>{\n        response[level] = (data, message, ...args)=>{\n            module.exports._logFunc(logger, level, defaults, data, message, ...args);\n        };\n    });\n    return response;\n};\n/**\n * Wrapper for creating a callback that either resolves or rejects a promise\n * based on input\n *\n * @param {Function} resolve Function to run if callback is called\n * @param {Function} reject Function to run if callback ends with an error\n */ module.exports.callbackPromise = (resolve, reject)=>function() {\n        let args = Array.from(arguments);\n        let err = args.shift();\n        if (err) {\n            reject(err);\n        } else {\n            resolve(...args);\n        }\n    };\n/**\n * Resolves a String or a Buffer value for content value. Useful if the value\n * is a Stream or a file or an URL. If the value is a Stream, overwrites\n * the stream object with the resolved value (you can't stream a value twice).\n *\n * This is useful when you want to create a plugin that needs a content value,\n * for example the `html` or `text` value as a String or a Buffer but not as\n * a file path or an URL.\n *\n * @param {Object} data An object or an Array you want to resolve an element for\n * @param {String|Number} key Property name or an Array index\n * @param {Function} callback Callback function with (err, value)\n */ module.exports.resolveContent = (data, key, callback)=>{\n    let promise;\n    if (!callback) {\n        promise = new Promise((resolve, reject)=>{\n            callback = module.exports.callbackPromise(resolve, reject);\n        });\n    }\n    let content = data && data[key] && data[key].content || data[key];\n    let contentStream;\n    let encoding = (typeof data[key] === \"object\" && data[key].encoding || \"utf8\").toString().toLowerCase().replace(/[-_\\s]/g, \"\");\n    if (!content) {\n        return callback(null, content);\n    }\n    if (typeof content === \"object\") {\n        if (typeof content.pipe === \"function\") {\n            return resolveStream(content, (err, value)=>{\n                if (err) {\n                    return callback(err);\n                }\n                // we can't stream twice the same content, so we need\n                // to replace the stream object with the streaming result\n                if (data[key].content) {\n                    data[key].content = value;\n                } else {\n                    data[key] = value;\n                }\n                callback(null, value);\n            });\n        } else if (/^https?:\\/\\//i.test(content.path || content.href)) {\n            contentStream = nmfetch(content.path || content.href);\n            return resolveStream(contentStream, callback);\n        } else if (/^data:/i.test(content.path || content.href)) {\n            let parts = (content.path || content.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n            if (!parts) {\n                return callback(null, Buffer.from(0));\n            }\n            return callback(null, /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], \"base64\") : Buffer.from(decodeURIComponent(parts[2])));\n        } else if (content.path) {\n            return resolveStream(fs.createReadStream(content.path), callback);\n        }\n    }\n    if (typeof data[key].content === \"string\" && ![\n        \"utf8\",\n        \"usascii\",\n        \"ascii\"\n    ].includes(encoding)) {\n        content = Buffer.from(data[key].content, encoding);\n    }\n    // default action, return as is\n    setImmediate(()=>callback(null, content));\n    return promise;\n};\n/**\n * Copies properties from source objects to target objects\n */ module.exports.assign = function() {\n    let args = Array.from(arguments);\n    let target = args.shift() || {};\n    args.forEach((source)=>{\n        Object.keys(source || {}).forEach((key)=>{\n            if ([\n                \"tls\",\n                \"auth\"\n            ].includes(key) && source[key] && typeof source[key] === \"object\") {\n                // tls and auth are special keys that need to be enumerated separately\n                // other objects are passed as is\n                if (!target[key]) {\n                    // ensure that target has this key\n                    target[key] = {};\n                }\n                Object.keys(source[key]).forEach((subKey)=>{\n                    target[key][subKey] = source[key][subKey];\n                });\n            } else {\n                target[key] = source[key];\n            }\n        });\n    });\n    return target;\n};\nmodule.exports.encodeXText = (str)=>{\n    // ! 0x21\n    // + 0x2B\n    // = 0x3D\n    // ~ 0x7E\n    if (!/[^\\x21-\\x2A\\x2C-\\x3C\\x3E-\\x7E]/.test(str)) {\n        return str;\n    }\n    let buf = Buffer.from(str);\n    let result = \"\";\n    for(let i = 0, len = buf.length; i < len; i++){\n        let c = buf[i];\n        if (c < 0x21 || c > 0x7e || c === 0x2b || c === 0x3d) {\n            result += \"+\" + (c < 0x10 ? \"0\" : \"\") + c.toString(16).toUpperCase();\n        } else {\n            result += String.fromCharCode(c);\n        }\n    }\n    return result;\n};\n/**\n * Streams a stream value into a Buffer\n *\n * @param {Object} stream Readable stream\n * @param {Function} callback Callback function with (err, value)\n */ function resolveStream(stream, callback) {\n    let responded = false;\n    let chunks = [];\n    let chunklen = 0;\n    stream.on(\"error\", (err)=>{\n        if (responded) {\n            return;\n        }\n        responded = true;\n        callback(err);\n    });\n    stream.on(\"readable\", ()=>{\n        let chunk;\n        while((chunk = stream.read()) !== null){\n            chunks.push(chunk);\n            chunklen += chunk.length;\n        }\n    });\n    stream.on(\"end\", ()=>{\n        if (responded) {\n            return;\n        }\n        responded = true;\n        let value;\n        try {\n            value = Buffer.concat(chunks, chunklen);\n        } catch (E) {\n            return callback(E);\n        }\n        callback(null, value);\n    });\n}\n/**\n * Generates a bunyan-like logger that prints to console\n *\n * @returns {Object} Bunyan logger instance\n */ function createDefaultLogger(levels) {\n    let levelMaxLen = 0;\n    let levelNames = new Map();\n    levels.forEach((level)=>{\n        if (level.length > levelMaxLen) {\n            levelMaxLen = level.length;\n        }\n    });\n    levels.forEach((level)=>{\n        let levelName = level.toUpperCase();\n        if (levelName.length < levelMaxLen) {\n            levelName += \" \".repeat(levelMaxLen - levelName.length);\n        }\n        levelNames.set(level, levelName);\n    });\n    let print = (level, entry, message, ...args)=>{\n        let prefix = \"\";\n        if (entry) {\n            if (entry.tnx === \"server\") {\n                prefix = \"S: \";\n            } else if (entry.tnx === \"client\") {\n                prefix = \"C: \";\n            }\n            if (entry.sid) {\n                prefix = \"[\" + entry.sid + \"] \" + prefix;\n            }\n            if (entry.cid) {\n                prefix = \"[#\" + entry.cid + \"] \" + prefix;\n            }\n        }\n        message = util.format(message, ...args);\n        message.split(/\\r?\\n/).forEach((line)=>{\n            console.log(\"[%s] %s %s\", new Date().toISOString().substr(0, 19).replace(/T/, \" \"), levelNames.get(level), prefix + line);\n        });\n    };\n    let logger = {};\n    levels.forEach((level)=>{\n        logger[level] = print.bind(null, level);\n    });\n    return logger;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/shared/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js":
/*!********************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/data-stream.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst Transform = stream.Transform;\n/**\n * Escapes dots in the beginning of lines. Ends the stream with <CR><LF>.<CR><LF>\n * Also makes sure that only <CR><LF> sequences are used for linebreaks\n *\n * @param {Object} options Stream options\n */ class DataStream extends Transform {\n    constructor(options){\n        super(options);\n        // init Transform\n        this.options = options || {};\n        this._curLine = \"\";\n        this.inByteCount = 0;\n        this.outByteCount = 0;\n        this.lastByte = false;\n    }\n    /**\n     * Escapes dots\n     */ _transform(chunk, encoding, done) {\n        let chunks = [];\n        let chunklen = 0;\n        let i, len, lastPos = 0;\n        let buf;\n        if (!chunk || !chunk.length) {\n            return done();\n        }\n        if (typeof chunk === \"string\") {\n            chunk = Buffer.from(chunk);\n        }\n        this.inByteCount += chunk.length;\n        for(i = 0, len = chunk.length; i < len; i++){\n            if (chunk[i] === 0x2e) {\n                // .\n                if (i && chunk[i - 1] === 0x0a || !i && (!this.lastByte || this.lastByte === 0x0a)) {\n                    buf = chunk.slice(lastPos, i + 1);\n                    chunks.push(buf);\n                    chunks.push(Buffer.from(\".\"));\n                    chunklen += buf.length + 1;\n                    lastPos = i + 1;\n                }\n            } else if (chunk[i] === 0x0a) {\n                // .\n                if (i && chunk[i - 1] !== 0x0d || !i && this.lastByte !== 0x0d) {\n                    if (i > lastPos) {\n                        buf = chunk.slice(lastPos, i);\n                        chunks.push(buf);\n                        chunklen += buf.length + 2;\n                    } else {\n                        chunklen += 2;\n                    }\n                    chunks.push(Buffer.from(\"\\r\\n\"));\n                    lastPos = i + 1;\n                }\n            }\n        }\n        if (chunklen) {\n            // add last piece\n            if (lastPos < chunk.length) {\n                buf = chunk.slice(lastPos);\n                chunks.push(buf);\n                chunklen += buf.length;\n            }\n            this.outByteCount += chunklen;\n            this.push(Buffer.concat(chunks, chunklen));\n        } else {\n            this.outByteCount += chunk.length;\n            this.push(chunk);\n        }\n        this.lastByte = chunk[chunk.length - 1];\n        done();\n    }\n    /**\n     * Finalizes the stream with a dot on a single line\n     */ _flush(done) {\n        let buf;\n        if (this.lastByte === 0x0a) {\n            buf = Buffer.from(\".\\r\\n\");\n        } else if (this.lastByte === 0x0d) {\n            buf = Buffer.from(\"\\n.\\r\\n\");\n        } else {\n            buf = Buffer.from(\"\\r\\n.\\r\\n\");\n        }\n        this.outByteCount += buf.length;\n        this.push(buf);\n        done();\n    }\n}\nmodule.exports = DataStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvc210cC1jb25uZWN0aW9uL2RhdGEtc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsWUFBWUYsT0FBT0UsU0FBUztBQUVsQzs7Ozs7Q0FLQyxHQUNELE1BQU1DLG1CQUFtQkQ7SUFDckJFLFlBQVlDLE9BQU8sQ0FBRTtRQUNqQixLQUFLLENBQUNBO1FBQ04saUJBQWlCO1FBQ2pCLElBQUksQ0FBQ0EsT0FBTyxHQUFHQSxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDQyxRQUFRLEdBQUc7UUFFaEIsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxZQUFZLEdBQUc7UUFDcEIsSUFBSSxDQUFDQyxRQUFRLEdBQUc7SUFDcEI7SUFFQTs7S0FFQyxHQUNEQyxXQUFXQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFO1FBQzlCLElBQUlDLFNBQVMsRUFBRTtRQUNmLElBQUlDLFdBQVc7UUFDZixJQUFJQyxHQUNBQyxLQUNBQyxVQUFVO1FBQ2QsSUFBSUM7UUFFSixJQUFJLENBQUNSLFNBQVMsQ0FBQ0EsTUFBTVMsTUFBTSxFQUFFO1lBQ3pCLE9BQU9QO1FBQ1g7UUFFQSxJQUFJLE9BQU9GLFVBQVUsVUFBVTtZQUMzQkEsUUFBUVUsT0FBT0MsSUFBSSxDQUFDWDtRQUN4QjtRQUVBLElBQUksQ0FBQ0osV0FBVyxJQUFJSSxNQUFNUyxNQUFNO1FBRWhDLElBQUtKLElBQUksR0FBR0MsTUFBTU4sTUFBTVMsTUFBTSxFQUFFSixJQUFJQyxLQUFLRCxJQUFLO1lBQzFDLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQ25CLElBQUk7Z0JBQ0osSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBTSxFQUFDLElBQUksQ0FBQ1AsUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUSxLQUFLLElBQUcsR0FBSztvQkFDcEZVLE1BQU1SLE1BQU1ZLEtBQUssQ0FBQ0wsU0FBU0YsSUFBSTtvQkFDL0JGLE9BQU9VLElBQUksQ0FBQ0w7b0JBQ1pMLE9BQU9VLElBQUksQ0FBQ0gsT0FBT0MsSUFBSSxDQUFDO29CQUN4QlAsWUFBWUksSUFBSUMsTUFBTSxHQUFHO29CQUN6QkYsVUFBVUYsSUFBSTtnQkFDbEI7WUFDSixPQUFPLElBQUlMLEtBQUssQ0FBQ0ssRUFBRSxLQUFLLE1BQU07Z0JBQzFCLElBQUk7Z0JBQ0osSUFBSSxLQUFNTCxLQUFLLENBQUNLLElBQUksRUFBRSxLQUFLLFFBQVUsQ0FBQ0EsS0FBSyxJQUFJLENBQUNQLFFBQVEsS0FBSyxNQUFPO29CQUNoRSxJQUFJTyxJQUFJRSxTQUFTO3dCQUNiQyxNQUFNUixNQUFNWSxLQUFLLENBQUNMLFNBQVNGO3dCQUMzQkYsT0FBT1UsSUFBSSxDQUFDTDt3QkFDWkosWUFBWUksSUFBSUMsTUFBTSxHQUFHO29CQUM3QixPQUFPO3dCQUNITCxZQUFZO29CQUNoQjtvQkFDQUQsT0FBT1UsSUFBSSxDQUFDSCxPQUFPQyxJQUFJLENBQUM7b0JBQ3hCSixVQUFVRixJQUFJO2dCQUNsQjtZQUNKO1FBQ0o7UUFFQSxJQUFJRCxVQUFVO1lBQ1YsaUJBQWlCO1lBQ2pCLElBQUlHLFVBQVVQLE1BQU1TLE1BQU0sRUFBRTtnQkFDeEJELE1BQU1SLE1BQU1ZLEtBQUssQ0FBQ0w7Z0JBQ2xCSixPQUFPVSxJQUFJLENBQUNMO2dCQUNaSixZQUFZSSxJQUFJQyxNQUFNO1lBQzFCO1lBRUEsSUFBSSxDQUFDWixZQUFZLElBQUlPO1lBQ3JCLElBQUksQ0FBQ1MsSUFBSSxDQUFDSCxPQUFPSSxNQUFNLENBQUNYLFFBQVFDO1FBQ3BDLE9BQU87WUFDSCxJQUFJLENBQUNQLFlBQVksSUFBSUcsTUFBTVMsTUFBTTtZQUNqQyxJQUFJLENBQUNJLElBQUksQ0FBQ2I7UUFDZDtRQUVBLElBQUksQ0FBQ0YsUUFBUSxHQUFHRSxLQUFLLENBQUNBLE1BQU1TLE1BQU0sR0FBRyxFQUFFO1FBQ3ZDUDtJQUNKO0lBRUE7O0tBRUMsR0FDRGEsT0FBT2IsSUFBSSxFQUFFO1FBQ1QsSUFBSU07UUFDSixJQUFJLElBQUksQ0FBQ1YsUUFBUSxLQUFLLE1BQU07WUFDeEJVLE1BQU1FLE9BQU9DLElBQUksQ0FBQztRQUN0QixPQUFPLElBQUksSUFBSSxDQUFDYixRQUFRLEtBQUssTUFBTTtZQUMvQlUsTUFBTUUsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCLE9BQU87WUFDSEgsTUFBTUUsT0FBT0MsSUFBSSxDQUFDO1FBQ3RCO1FBQ0EsSUFBSSxDQUFDZCxZQUFZLElBQUlXLElBQUlDLE1BQU07UUFDL0IsSUFBSSxDQUFDSSxJQUFJLENBQUNMO1FBQ1ZOO0lBQ0o7QUFDSjtBQUVBYyxPQUFPQyxPQUFPLEdBQUd6QiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlbWFpbGVyL2xpYi9zbXRwLWNvbm5lY3Rpb24vZGF0YS1zdHJlYW0uanM/MDMzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgVHJhbnNmb3JtID0gc3RyZWFtLlRyYW5zZm9ybTtcblxuLyoqXG4gKiBFc2NhcGVzIGRvdHMgaW4gdGhlIGJlZ2lubmluZyBvZiBsaW5lcy4gRW5kcyB0aGUgc3RyZWFtIHdpdGggPENSPjxMRj4uPENSPjxMRj5cbiAqIEFsc28gbWFrZXMgc3VyZSB0aGF0IG9ubHkgPENSPjxMRj4gc2VxdWVuY2VzIGFyZSB1c2VkIGZvciBsaW5lYnJlYWtzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgU3RyZWFtIG9wdGlvbnNcbiAqL1xuY2xhc3MgRGF0YVN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgLy8gaW5pdCBUcmFuc2Zvcm1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5fY3VyTGluZSA9ICcnO1xuXG4gICAgICAgIHRoaXMuaW5CeXRlQ291bnQgPSAwO1xuICAgICAgICB0aGlzLm91dEJ5dGVDb3VudCA9IDA7XG4gICAgICAgIHRoaXMubGFzdEJ5dGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIGRvdHNcbiAgICAgKi9cbiAgICBfdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgZG9uZSkge1xuICAgICAgICBsZXQgY2h1bmtzID0gW107XG4gICAgICAgIGxldCBjaHVua2xlbiA9IDA7XG4gICAgICAgIGxldCBpLFxuICAgICAgICAgICAgbGVuLFxuICAgICAgICAgICAgbGFzdFBvcyA9IDA7XG4gICAgICAgIGxldCBidWY7XG5cbiAgICAgICAgaWYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmspO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbkJ5dGVDb3VudCArPSBjaHVuay5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gY2h1bmsubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaHVua1tpXSA9PT0gMHgyZSkge1xuICAgICAgICAgICAgICAgIC8vIC5cbiAgICAgICAgICAgICAgICBpZiAoKGkgJiYgY2h1bmtbaSAtIDFdID09PSAweDBhKSB8fCAoIWkgJiYgKCF0aGlzLmxhc3RCeXRlIHx8IHRoaXMubGFzdEJ5dGUgPT09IDB4MGEpKSkge1xuICAgICAgICAgICAgICAgICAgICBidWYgPSBjaHVuay5zbGljZShsYXN0UG9zLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKGJ1Zik7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKEJ1ZmZlci5mcm9tKCcuJykpO1xuICAgICAgICAgICAgICAgICAgICBjaHVua2xlbiArPSBidWYubGVuZ3RoICsgMTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFBvcyA9IGkgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2h1bmtbaV0gPT09IDB4MGEpIHtcbiAgICAgICAgICAgICAgICAvLyAuXG4gICAgICAgICAgICAgICAgaWYgKChpICYmIGNodW5rW2kgLSAxXSAhPT0gMHgwZCkgfHwgKCFpICYmIHRoaXMubGFzdEJ5dGUgIT09IDB4MGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gbGFzdFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmID0gY2h1bmsuc2xpY2UobGFzdFBvcywgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVua3MucHVzaChidWYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtsZW4gKz0gYnVmLmxlbmd0aCArIDI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaHVua2xlbiArPSAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKEJ1ZmZlci5mcm9tKCdcXHJcXG4nKSk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQb3MgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2h1bmtsZW4pIHtcbiAgICAgICAgICAgIC8vIGFkZCBsYXN0IHBpZWNlXG4gICAgICAgICAgICBpZiAobGFzdFBvcyA8IGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGJ1ZiA9IGNodW5rLnNsaWNlKGxhc3RQb3MpO1xuICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKGJ1Zik7XG4gICAgICAgICAgICAgICAgY2h1bmtsZW4gKz0gYnVmLmxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5vdXRCeXRlQ291bnQgKz0gY2h1bmtsZW47XG4gICAgICAgICAgICB0aGlzLnB1c2goQnVmZmVyLmNvbmNhdChjaHVua3MsIGNodW5rbGVuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm91dEJ5dGVDb3VudCArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnB1c2goY2h1bmspO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXN0Qnl0ZSA9IGNodW5rW2NodW5rLmxlbmd0aCAtIDFdO1xuICAgICAgICBkb25lKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluYWxpemVzIHRoZSBzdHJlYW0gd2l0aCBhIGRvdCBvbiBhIHNpbmdsZSBsaW5lXG4gICAgICovXG4gICAgX2ZsdXNoKGRvbmUpIHtcbiAgICAgICAgbGV0IGJ1ZjtcbiAgICAgICAgaWYgKHRoaXMubGFzdEJ5dGUgPT09IDB4MGEpIHtcbiAgICAgICAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKCcuXFxyXFxuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5sYXN0Qnl0ZSA9PT0gMHgwZCkge1xuICAgICAgICAgICAgYnVmID0gQnVmZmVyLmZyb20oJ1xcbi5cXHJcXG4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKCdcXHJcXG4uXFxyXFxuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vdXRCeXRlQ291bnQgKz0gYnVmLmxlbmd0aDtcbiAgICAgICAgdGhpcy5wdXNoKGJ1Zik7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVN0cmVhbTtcbiJdLCJuYW1lcyI6WyJzdHJlYW0iLCJyZXF1aXJlIiwiVHJhbnNmb3JtIiwiRGF0YVN0cmVhbSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIl9jdXJMaW5lIiwiaW5CeXRlQ291bnQiLCJvdXRCeXRlQ291bnQiLCJsYXN0Qnl0ZSIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiZG9uZSIsImNodW5rcyIsImNodW5rbGVuIiwiaSIsImxlbiIsImxhc3RQb3MiLCJidWYiLCJsZW5ndGgiLCJCdWZmZXIiLCJmcm9tIiwic2xpY2UiLCJwdXNoIiwiY29uY2F0IiwiX2ZsdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js":
/*!**************************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * Minimal HTTP/S proxy client\n */ const net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst urllib = __webpack_require__(/*! url */ \"url\");\n/**\n * Establishes proxied connection to destinationPort\n *\n * httpProxyClient(\"http://localhost:3128/\", 80, \"google.com\", function(err, socket){\n *     socket.write(\"GET / HTTP/1.0\\r\\n\\r\\n\");\n * });\n *\n * @param {String} proxyUrl proxy configuration, etg \"http://proxy.host:3128/\"\n * @param {Number} destinationPort Port to open in destination host\n * @param {String} destinationHost Destination hostname\n * @param {Function} callback Callback to run with the rocket object once connection is established\n */ function httpProxyClient(proxyUrl, destinationPort, destinationHost, callback) {\n    let proxy = urllib.parse(proxyUrl);\n    // create a socket connection to the proxy server\n    let options;\n    let connect;\n    let socket;\n    options = {\n        host: proxy.hostname,\n        port: Number(proxy.port) ? Number(proxy.port) : proxy.protocol === \"https:\" ? 443 : 80\n    };\n    if (proxy.protocol === \"https:\") {\n        // we can use untrusted proxies as long as we verify actual SMTP certificates\n        options.rejectUnauthorized = false;\n        connect = tls.connect.bind(tls);\n    } else {\n        connect = net.connect.bind(net);\n    }\n    // Error harness for initial connection. Once connection is established, the responsibility\n    // to handle errors is passed to whoever uses this socket\n    let finished = false;\n    let tempSocketErr = (err)=>{\n        if (finished) {\n            return;\n        }\n        finished = true;\n        try {\n            socket.destroy();\n        } catch (E) {\n        // ignore\n        }\n        callback(err);\n    };\n    let timeoutErr = ()=>{\n        let err = new Error(\"Proxy socket timed out\");\n        err.code = \"ETIMEDOUT\";\n        tempSocketErr(err);\n    };\n    socket = connect(options, ()=>{\n        if (finished) {\n            return;\n        }\n        let reqHeaders = {\n            Host: destinationHost + \":\" + destinationPort,\n            Connection: \"close\"\n        };\n        if (proxy.auth) {\n            reqHeaders[\"Proxy-Authorization\"] = \"Basic \" + Buffer.from(proxy.auth).toString(\"base64\");\n        }\n        socket.write(// HTTP method\n        \"CONNECT \" + destinationHost + \":\" + destinationPort + \" HTTP/1.1\\r\\n\" + // HTTP request headers\n        Object.keys(reqHeaders).map((key)=>key + \": \" + reqHeaders[key]).join(\"\\r\\n\") + // End request\n        \"\\r\\n\\r\\n\");\n        let headers = \"\";\n        let onSocketData = (chunk)=>{\n            let match;\n            let remainder;\n            if (finished) {\n                return;\n            }\n            headers += chunk.toString(\"binary\");\n            if (match = headers.match(/\\r\\n\\r\\n/)) {\n                socket.removeListener(\"data\", onSocketData);\n                remainder = headers.substr(match.index + match[0].length);\n                headers = headers.substr(0, match.index);\n                if (remainder) {\n                    socket.unshift(Buffer.from(remainder, \"binary\"));\n                }\n                // proxy connection is now established\n                finished = true;\n                // check response code\n                match = headers.match(/^HTTP\\/\\d+\\.\\d+ (\\d+)/i);\n                if (!match || (match[1] || \"\").charAt(0) !== \"2\") {\n                    try {\n                        socket.destroy();\n                    } catch (E) {\n                    // ignore\n                    }\n                    return callback(new Error(\"Invalid response from proxy\" + (match && \": \" + match[1] || \"\")));\n                }\n                socket.removeListener(\"error\", tempSocketErr);\n                socket.removeListener(\"timeout\", timeoutErr);\n                socket.setTimeout(0);\n                return callback(null, socket);\n            }\n        };\n        socket.on(\"data\", onSocketData);\n    });\n    socket.setTimeout(httpProxyClient.timeout || 30 * 1000);\n    socket.on(\"timeout\", timeoutErr);\n    socket.once(\"error\", tempSocketErr);\n}\nmodule.exports = httpProxyClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/http-proxy-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-connection/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageInfo = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst DataStream = __webpack_require__(/*! ./data-stream */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/data-stream.js\");\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n// default timeout values in ms\nconst CONNECTION_TIMEOUT = 2 * 60 * 1000; // how much to wait for the connection to be established\nconst SOCKET_TIMEOUT = 10 * 60 * 1000; // how much to wait for socket inactivity before disconnecting the client\nconst GREETING_TIMEOUT = 30 * 1000; // how much to wait after connection is established but SMTP greeting is not receieved\nconst DNS_TIMEOUT = 30 * 1000; // how much to wait for resolveHostname\n/**\n * Generates a SMTP connection object\n *\n * Optional options object takes the following possible properties:\n *\n *  * **port** - is the port to connect to (defaults to 587 or 465)\n *  * **host** - is the hostname or IP address to connect to (defaults to 'localhost')\n *  * **secure** - use SSL\n *  * **ignoreTLS** - ignore server support for STARTTLS\n *  * **requireTLS** - forces the client to use STARTTLS\n *  * **name** - the name of the client server\n *  * **localAddress** - outbound address to bind to (see: http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener)\n *  * **greetingTimeout** - Time to wait in ms until greeting message is received from the server (defaults to 10000)\n *  * **connectionTimeout** - how many milliseconds to wait for the connection to establish\n *  * **socketTimeout** - Time of inactivity until the connection is closed (defaults to 1 hour)\n *  * **dnsTimeout** - Time to wait in ms for the DNS requests to be resolved (defaults to 30 seconds)\n *  * **lmtp** - if true, uses LMTP instead of SMTP protocol\n *  * **logger** - bunyan compatible logger interface\n *  * **debug** - if true pass SMTP traffic to the logger\n *  * **tls** - options for createCredentials\n *  * **socket** - existing socket to use instead of creating a new one (see: http://nodejs.org/api/net.html#net_class_net_socket)\n *  * **secured** - boolean indicates that the provided socket has already been upgraded to tls\n *\n * @constructor\n * @namespace SMTP Client module\n * @param {Object} [options] Option properties\n */ class SMTPConnection extends EventEmitter {\n    constructor(options){\n        super(options);\n        this.id = crypto.randomBytes(8).toString(\"base64\").replace(/\\W/g, \"\");\n        this.stage = \"init\";\n        this.options = options || {};\n        this.secureConnection = !!this.options.secure;\n        this.alreadySecured = !!this.options.secured;\n        this.port = Number(this.options.port) || (this.secureConnection ? 465 : 587);\n        this.host = this.options.host || \"localhost\";\n        this.allowInternalNetworkInterfaces = this.options.allowInternalNetworkInterfaces || false;\n        if (typeof this.options.secure === \"undefined\" && this.port === 465) {\n            // if secure option is not set but port is 465, then default to secure\n            this.secureConnection = true;\n        }\n        this.name = this.options.name || this._getHostname();\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-connection\",\n            sid: this.id\n        });\n        this.customAuth = new Map();\n        Object.keys(this.options.customAuth || {}).forEach((key)=>{\n            let mapKey = (key || \"\").toString().trim().toUpperCase();\n            if (!mapKey) {\n                return;\n            }\n            this.customAuth.set(mapKey, this.options.customAuth[key]);\n        });\n        /**\n         * Expose version nr, just for the reference\n         * @type {String}\n         */ this.version = packageInfo.version;\n        /**\n         * If true, then the user is authenticated\n         * @type {Boolean}\n         */ this.authenticated = false;\n        /**\n         * If set to true, this instance is no longer active\n         * @private\n         */ this.destroyed = false;\n        /**\n         * Defines if the current connection is secure or not. If not,\n         * STARTTLS can be used if available\n         * @private\n         */ this.secure = !!this.secureConnection;\n        /**\n         * Store incomplete messages coming from the server\n         * @private\n         */ this._remainder = \"\";\n        /**\n         * Unprocessed responses from the server\n         * @type {Array}\n         */ this._responseQueue = [];\n        this.lastServerResponse = false;\n        /**\n         * The socket connecting to the server\n         * @publick\n         */ this._socket = false;\n        /**\n         * Lists supported auth mechanisms\n         * @private\n         */ this._supportedAuth = [];\n        /**\n         * Set to true, if EHLO response includes \"AUTH\".\n         * If false then authentication is not tried\n         */ this.allowsAuth = false;\n        /**\n         * Includes current envelope (from, to)\n         * @private\n         */ this._envelope = false;\n        /**\n         * Lists supported extensions\n         * @private\n         */ this._supportedExtensions = [];\n        /**\n         * Defines the maximum allowed size for a single message\n         * @private\n         */ this._maxAllowedSize = 0;\n        /**\n         * Function queue to run if a data chunk comes from the server\n         * @private\n         */ this._responseActions = [];\n        this._recipientQueue = [];\n        /**\n         * Timeout variable for waiting the greeting\n         * @private\n         */ this._greetingTimeout = false;\n        /**\n         * Timeout variable for waiting the connection to start\n         * @private\n         */ this._connectionTimeout = false;\n        /**\n         * If the socket is deemed already closed\n         * @private\n         */ this._destroyed = false;\n        /**\n         * If the socket is already being closed\n         * @private\n         */ this._closing = false;\n        /**\n         * Callbacks for socket's listeners\n         */ this._onSocketData = (chunk)=>this._onData(chunk);\n        this._onSocketError = (error)=>this._onError(error, \"ESOCKET\", false, \"CONN\");\n        this._onSocketClose = ()=>this._onClose();\n        this._onSocketEnd = ()=>this._onEnd();\n        this._onSocketTimeout = ()=>this._onTimeout();\n    }\n    /**\n     * Creates a connection to a SMTP server and sets up connection\n     * listener\n     */ connect(connectCallback) {\n        if (typeof connectCallback === \"function\") {\n            this.once(\"connect\", ()=>{\n                this.logger.debug({\n                    tnx: \"smtp\"\n                }, \"SMTP handshake finished\");\n                connectCallback();\n            });\n            const isDestroyedMessage = this._isDestroyedMessage(\"connect\");\n            if (isDestroyedMessage) {\n                return connectCallback(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"CONN\"));\n            }\n        }\n        let opts = {\n            port: this.port,\n            host: this.host,\n            allowInternalNetworkInterfaces: this.allowInternalNetworkInterfaces,\n            timeout: this.options.dnsTimeout || DNS_TIMEOUT\n        };\n        if (this.options.localAddress) {\n            opts.localAddress = this.options.localAddress;\n        }\n        let setupConnectionHandlers = ()=>{\n            this._connectionTimeout = setTimeout(()=>{\n                this._onError(\"Connection timeout\", \"ETIMEDOUT\", false, \"CONN\");\n            }, this.options.connectionTimeout || CONNECTION_TIMEOUT);\n            this._socket.on(\"error\", this._onSocketError);\n        };\n        if (this.options.connection) {\n            // connection is already opened\n            this._socket = this.options.connection;\n            if (this.secureConnection && !this.alreadySecured) {\n                setImmediate(()=>this._upgradeConnection((err)=>{\n                        if (err) {\n                            this._onError(new Error(\"Error initiating TLS - \" + (err.message || err)), \"ETLS\", false, \"CONN\");\n                            return;\n                        }\n                        this._onConnect();\n                    }));\n            } else {\n                setImmediate(()=>this._onConnect());\n            }\n            return;\n        } else if (this.options.socket) {\n            // socket object is set up but not yet connected\n            this._socket = this.options.socket;\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket.connect(this.port, this.host, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        } else if (this.secureConnection) {\n            // connect using tls\n            if (this.options.tls) {\n                Object.keys(this.options.tls).forEach((key)=>{\n                    opts[key] = this.options.tls[key];\n                });\n            }\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = tls.connect(opts, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        } else {\n            // connect using plaintext\n            return shared.resolveHostname(opts, (err, resolved)=>{\n                if (err) {\n                    return setImmediate(()=>this._onError(err, \"EDNS\", false, \"CONN\"));\n                }\n                this.logger.debug({\n                    tnx: \"dns\",\n                    source: opts.host,\n                    resolved: resolved.host,\n                    cached: !!resolved.cached\n                }, \"Resolved %s as %s [cache %s]\", opts.host, resolved.host, resolved.cached ? \"hit\" : \"miss\");\n                Object.keys(resolved).forEach((key)=>{\n                    if (key.charAt(0) !== \"_\" && resolved[key]) {\n                        opts[key] = resolved[key];\n                    }\n                });\n                try {\n                    this._socket = net.connect(opts, ()=>{\n                        this._socket.setKeepAlive(true);\n                        this._onConnect();\n                    });\n                    setupConnectionHandlers();\n                } catch (E) {\n                    return setImmediate(()=>this._onError(E, \"ECONNECTION\", false, \"CONN\"));\n                }\n            });\n        }\n    }\n    /**\n     * Sends QUIT\n     */ quit() {\n        this._sendCommand(\"QUIT\");\n        this._responseActions.push(this.close);\n    }\n    /**\n     * Closes the connection to the server\n     */ close() {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        this._responseActions = [];\n        // allow to run this function only once\n        if (this._closing) {\n            return;\n        }\n        this._closing = true;\n        let closeMethod = \"end\";\n        if (this.stage === \"init\") {\n            // Close the socket immediately when connection timed out\n            closeMethod = \"destroy\";\n        }\n        this.logger.debug({\n            tnx: \"smtp\"\n        }, 'Closing connection to the server using \"%s\"', closeMethod);\n        let socket = this._socket && this._socket.socket || this._socket;\n        if (socket && !socket.destroyed) {\n            try {\n                this._socket[closeMethod]();\n            } catch (E) {\n            // just ignore\n            }\n        }\n        this._destroy();\n    }\n    /**\n     * Authenticate user\n     */ login(authData, callback) {\n        const isDestroyedMessage = this._isDestroyedMessage(\"login\");\n        if (isDestroyedMessage) {\n            return callback(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"API\"));\n        }\n        this._auth = authData || {};\n        // Select SASL authentication method\n        this._authMethod = (this._auth.method || \"\").toString().trim().toUpperCase() || false;\n        if (!this._authMethod && this._auth.oauth2 && !this._auth.credentials) {\n            this._authMethod = \"XOAUTH2\";\n        } else if (!this._authMethod || this._authMethod === \"XOAUTH2\" && !this._auth.oauth2) {\n            // use first supported\n            this._authMethod = (this._supportedAuth[0] || \"PLAIN\").toUpperCase().trim();\n        }\n        if (this._authMethod !== \"XOAUTH2\" && (!this._auth.credentials || !this._auth.credentials.user || !this._auth.credentials.pass)) {\n            if (this._auth.user && this._auth.pass) {\n                this._auth.credentials = {\n                    user: this._auth.user,\n                    pass: this._auth.pass,\n                    options: this._auth.options\n                };\n            } else {\n                return callback(this._formatError('Missing credentials for \"' + this._authMethod + '\"', \"EAUTH\", false, \"API\"));\n            }\n        }\n        if (this.customAuth.has(this._authMethod)) {\n            let handler = this.customAuth.get(this._authMethod);\n            let lastResponse;\n            let returned = false;\n            let resolve = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                this.logger.info({\n                    tnx: \"smtp\",\n                    username: this._auth.user,\n                    action: \"authenticated\",\n                    method: this._authMethod\n                }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n                this.authenticated = true;\n                callback(null, true);\n            };\n            let reject = (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                callback(this._formatError(err, \"EAUTH\", lastResponse, \"AUTH \" + this._authMethod));\n            };\n            let handlerResponse = handler({\n                auth: this._auth,\n                method: this._authMethod,\n                extensions: [].concat(this._supportedExtensions),\n                authMethods: [].concat(this._supportedAuth),\n                maxAllowedSize: this._maxAllowedSize || false,\n                sendCommand: (cmd, done)=>{\n                    let promise;\n                    if (!done) {\n                        promise = new Promise((resolve, reject)=>{\n                            done = shared.callbackPromise(resolve, reject);\n                        });\n                    }\n                    this._responseActions.push((str)=>{\n                        lastResponse = str;\n                        let codes = str.match(/^(\\d+)(?:\\s(\\d+\\.\\d+\\.\\d+))?\\s/);\n                        let data = {\n                            command: cmd,\n                            response: str\n                        };\n                        if (codes) {\n                            data.status = Number(codes[1]) || 0;\n                            if (codes[2]) {\n                                data.code = codes[2];\n                            }\n                            data.text = str.substr(codes[0].length);\n                        } else {\n                            data.text = str;\n                            data.status = 0; // just in case we need to perform numeric comparisons\n                        }\n                        done(null, data);\n                    });\n                    setImmediate(()=>this._sendCommand(cmd));\n                    return promise;\n                },\n                resolve,\n                reject\n            });\n            if (handlerResponse && typeof handlerResponse.catch === \"function\") {\n                // a promise was returned\n                handlerResponse.then(resolve).catch(reject);\n            }\n            return;\n        }\n        switch(this._authMethod){\n            case \"XOAUTH2\":\n                this._handleXOauth2Token(false, callback);\n                return;\n            case \"LOGIN\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTH_LOGIN_USER(str, callback);\n                });\n                this._sendCommand(\"AUTH LOGIN\");\n                return;\n            case \"PLAIN\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTHComplete(str, callback);\n                });\n                this._sendCommand(\"AUTH PLAIN \" + Buffer.from(//this._auth.user+'\\u0000'+\n                \"\\x00\" + // skip authorization identity as it causes problems with some servers\n                this._auth.credentials.user + \"\\x00\" + this._auth.credentials.pass, \"utf-8\").toString(\"base64\"), // log entry without passwords\n                \"AUTH PLAIN \" + Buffer.from(//this._auth.user+'\\u0000'+\n                \"\\x00\" + // skip authorization identity as it causes problems with some servers\n                this._auth.credentials.user + \"\\x00\" + \"/* secret */\", \"utf-8\").toString(\"base64\"));\n                return;\n            case \"CRAM-MD5\":\n                this._responseActions.push((str)=>{\n                    this._actionAUTH_CRAM_MD5(str, callback);\n                });\n                this._sendCommand(\"AUTH CRAM-MD5\");\n                return;\n        }\n        return callback(this._formatError('Unknown authentication method \"' + this._authMethod + '\"', \"EAUTH\", false, \"API\"));\n    }\n    /**\n     * Sends a message\n     *\n     * @param {Object} envelope Envelope object, {from: addr, to: [addr]}\n     * @param {Object} message String, Buffer or a Stream\n     * @param {Function} callback Callback to return once sending is completed\n     */ send(envelope, message, done) {\n        if (!message) {\n            return done(this._formatError(\"Empty message\", \"EMESSAGE\", false, \"API\"));\n        }\n        const isDestroyedMessage = this._isDestroyedMessage(\"send message\");\n        if (isDestroyedMessage) {\n            return done(this._formatError(isDestroyedMessage, \"ECONNECTION\", false, \"API\"));\n        }\n        // reject larger messages than allowed\n        if (this._maxAllowedSize && envelope.size > this._maxAllowedSize) {\n            return setImmediate(()=>{\n                done(this._formatError(\"Message size larger than allowed \" + this._maxAllowedSize, \"EMESSAGE\", false, \"MAIL FROM\"));\n            });\n        }\n        // ensure that callback is only called once\n        let returned = false;\n        let callback = function() {\n            if (returned) {\n                return;\n            }\n            returned = true;\n            done(...arguments);\n        };\n        if (typeof message.on === \"function\") {\n            message.on(\"error\", (err)=>callback(this._formatError(err, \"ESTREAM\", false, \"API\")));\n        }\n        let startTime = Date.now();\n        this._setEnvelope(envelope, (err, info)=>{\n            if (err) {\n                return callback(err);\n            }\n            let envelopeTime = Date.now();\n            let stream = this._createSendStream((err, str)=>{\n                if (err) {\n                    return callback(err);\n                }\n                info.envelopeTime = envelopeTime - startTime;\n                info.messageTime = Date.now() - envelopeTime;\n                info.messageSize = stream.outByteCount;\n                info.response = str;\n                return callback(null, info);\n            });\n            if (typeof message.pipe === \"function\") {\n                message.pipe(stream);\n            } else {\n                stream.write(message);\n                stream.end();\n            }\n        });\n    }\n    /**\n     * Resets connection state\n     *\n     * @param {Function} callback Callback to return once connection is reset\n     */ reset(callback) {\n        this._sendCommand(\"RSET\");\n        this._responseActions.push((str)=>{\n            if (str.charAt(0) !== \"2\") {\n                return callback(this._formatError(\"Could not reset session state. response=\" + str, \"EPROTOCOL\", str, \"RSET\"));\n            }\n            this._envelope = false;\n            return callback(null, true);\n        });\n    }\n    /**\n     * Connection listener that is run when the connection to\n     * the server is opened\n     *\n     * @event\n     */ _onConnect() {\n        clearTimeout(this._connectionTimeout);\n        this.logger.info({\n            tnx: \"network\",\n            localAddress: this._socket.localAddress,\n            localPort: this._socket.localPort,\n            remoteAddress: this._socket.remoteAddress,\n            remotePort: this._socket.remotePort\n        }, \"%s established to %s:%s\", this.secure ? \"Secure connection\" : \"Connection\", this._socket.remoteAddress, this._socket.remotePort);\n        if (this._destroyed) {\n            // Connection was established after we already had canceled it\n            this.close();\n            return;\n        }\n        this.stage = \"connected\";\n        // clear existing listeners for the socket\n        this._socket.removeListener(\"data\", this._onSocketData);\n        this._socket.removeListener(\"timeout\", this._onSocketTimeout);\n        this._socket.removeListener(\"close\", this._onSocketClose);\n        this._socket.removeListener(\"end\", this._onSocketEnd);\n        this._socket.on(\"data\", this._onSocketData);\n        this._socket.once(\"close\", this._onSocketClose);\n        this._socket.once(\"end\", this._onSocketEnd);\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT);\n        this._socket.on(\"timeout\", this._onSocketTimeout);\n        this._greetingTimeout = setTimeout(()=>{\n            // if still waiting for greeting, give up\n            if (this._socket && !this._destroyed && this._responseActions[0] === this._actionGreeting) {\n                this._onError(\"Greeting never received\", \"ETIMEDOUT\", false, \"CONN\");\n            }\n        }, this.options.greetingTimeout || GREETING_TIMEOUT);\n        this._responseActions.push(this._actionGreeting);\n        // we have a 'data' listener set up so resume socket if it was paused\n        this._socket.resume();\n    }\n    /**\n     * 'data' listener for data coming from the server\n     *\n     * @event\n     * @param {Buffer} chunk Data chunk coming from the server\n     */ _onData(chunk) {\n        if (this._destroyed || !chunk || !chunk.length) {\n            return;\n        }\n        let data = (chunk || \"\").toString(\"binary\");\n        let lines = (this._remainder + data).split(/\\r?\\n/);\n        let lastline;\n        this._remainder = lines.pop();\n        for(let i = 0, len = lines.length; i < len; i++){\n            if (this._responseQueue.length) {\n                lastline = this._responseQueue[this._responseQueue.length - 1];\n                if (/^\\d+-/.test(lastline.split(\"\\n\").pop())) {\n                    this._responseQueue[this._responseQueue.length - 1] += \"\\n\" + lines[i];\n                    continue;\n                }\n            }\n            this._responseQueue.push(lines[i]);\n        }\n        if (this._responseQueue.length) {\n            lastline = this._responseQueue[this._responseQueue.length - 1];\n            if (/^\\d+-/.test(lastline.split(\"\\n\").pop())) {\n                return;\n            }\n        }\n        this._processResponse();\n    }\n    /**\n     * 'error' listener for the socket\n     *\n     * @event\n     * @param {Error} err Error object\n     * @param {String} type Error name\n     */ _onError(err, type, data, command) {\n        clearTimeout(this._connectionTimeout);\n        clearTimeout(this._greetingTimeout);\n        if (this._destroyed) {\n            // just ignore, already closed\n            // this might happen when a socket is canceled because of reached timeout\n            // but the socket timeout error itself receives only after\n            return;\n        }\n        err = this._formatError(err, type, data, command);\n        this.logger.error(data, err.message);\n        this.emit(\"error\", err);\n        this.close();\n    }\n    _formatError(message, type, response, command) {\n        let err;\n        if (/Error\\]$/i.test(Object.prototype.toString.call(message))) {\n            err = message;\n        } else {\n            err = new Error(message);\n        }\n        if (type && type !== \"Error\") {\n            err.code = type;\n        }\n        if (response) {\n            err.response = response;\n            err.message += \": \" + response;\n        }\n        let responseCode = typeof response === \"string\" && Number((response.match(/^\\d+/) || [])[0]) || false;\n        if (responseCode) {\n            err.responseCode = responseCode;\n        }\n        if (command) {\n            err.command = command;\n        }\n        return err;\n    }\n    /**\n     * 'close' listener for the socket\n     *\n     * @event\n     */ _onClose() {\n        let serverResponse = false;\n        if (this._remainder && this._remainder.trim()) {\n            if (this.options.debug || this.options.transactionLog) {\n                this.logger.debug({\n                    tnx: \"server\"\n                }, this._remainder.replace(/\\r?\\n$/, \"\"));\n            }\n            this.lastServerResponse = serverResponse = this._remainder.trim();\n        }\n        this.logger.info({\n            tnx: \"network\"\n        }, \"Connection closed\");\n        if (this.upgrading && !this._destroyed) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ETLS\", serverResponse, \"CONN\");\n        } else if (![\n            this._actionGreeting,\n            this.close\n        ].includes(this._responseActions[0]) && !this._destroyed) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ECONNECTION\", serverResponse, \"CONN\");\n        } else if (/^[45]\\d{2}\\b/.test(serverResponse)) {\n            return this._onError(new Error(\"Connection closed unexpectedly\"), \"ECONNECTION\", serverResponse, \"CONN\");\n        }\n        this._destroy();\n    }\n    /**\n     * 'end' listener for the socket\n     *\n     * @event\n     */ _onEnd() {\n        if (this._socket && !this._socket.destroyed) {\n            this._socket.destroy();\n        }\n    }\n    /**\n     * 'timeout' listener for the socket\n     *\n     * @event\n     */ _onTimeout() {\n        return this._onError(new Error(\"Timeout\"), \"ETIMEDOUT\", false, \"CONN\");\n    }\n    /**\n     * Destroys the client, emits 'end'\n     */ _destroy() {\n        if (this._destroyed) {\n            return;\n        }\n        this._destroyed = true;\n        this.emit(\"end\");\n    }\n    /**\n     * Upgrades the connection to TLS\n     *\n     * @param {Function} callback Callback function to run when the connection\n     *        has been secured\n     */ _upgradeConnection(callback) {\n        // do not remove all listeners or it breaks node v0.10 as there's\n        // apparently a 'finish' event set that would be cleared as well\n        // we can safely keep 'error', 'end', 'close' etc. events\n        this._socket.removeListener(\"data\", this._onSocketData); // incoming data is going to be gibberish from this point onwards\n        this._socket.removeListener(\"timeout\", this._onSocketTimeout); // timeout will be re-set for the new socket object\n        let socketPlain = this._socket;\n        let opts = {\n            socket: this._socket,\n            host: this.host\n        };\n        Object.keys(this.options.tls || {}).forEach((key)=>{\n            opts[key] = this.options.tls[key];\n        });\n        this.upgrading = true;\n        // tls.connect is not an asynchronous function however it may still throw errors and requires to be wrapped with try/catch\n        try {\n            this._socket = tls.connect(opts, ()=>{\n                this.secure = true;\n                this.upgrading = false;\n                this._socket.on(\"data\", this._onSocketData);\n                socketPlain.removeListener(\"close\", this._onSocketClose);\n                socketPlain.removeListener(\"end\", this._onSocketEnd);\n                return callback(null, true);\n            });\n        } catch (err) {\n            return callback(err);\n        }\n        this._socket.on(\"error\", this._onSocketError);\n        this._socket.once(\"close\", this._onSocketClose);\n        this._socket.once(\"end\", this._onSocketEnd);\n        this._socket.setTimeout(this.options.socketTimeout || SOCKET_TIMEOUT); // 10 min.\n        this._socket.on(\"timeout\", this._onSocketTimeout);\n        // resume in case the socket was paused\n        socketPlain.resume();\n    }\n    /**\n     * Processes queued responses from the server\n     *\n     * @param {Boolean} force If true, ignores _processing flag\n     */ _processResponse() {\n        if (!this._responseQueue.length) {\n            return false;\n        }\n        let str = this.lastServerResponse = (this._responseQueue.shift() || \"\").toString();\n        if (/^\\d+-/.test(str.split(\"\\n\").pop())) {\n            // keep waiting for the final part of multiline response\n            return;\n        }\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug({\n                tnx: \"server\"\n            }, str.replace(/\\r?\\n$/, \"\"));\n        }\n        if (!str.trim()) {\n            // skip unexpected empty lines\n            setImmediate(()=>this._processResponse());\n        }\n        let action = this._responseActions.shift();\n        if (typeof action === \"function\") {\n            action.call(this, str);\n            setImmediate(()=>this._processResponse());\n        } else {\n            return this._onError(new Error(\"Unexpected Response\"), \"EPROTOCOL\", str, \"CONN\");\n        }\n    }\n    /**\n     * Send a command to the server, append \\r\\n\n     *\n     * @param {String} str String to be sent to the server\n     * @param {String} logStr Optional string to be used for logging instead of the actual string\n     */ _sendCommand(str, logStr) {\n        if (this._destroyed) {\n            // Connection already closed, can't send any more data\n            return;\n        }\n        if (this._socket.destroyed) {\n            return this.close();\n        }\n        if (this.options.debug || this.options.transactionLog) {\n            this.logger.debug({\n                tnx: \"client\"\n            }, (logStr || str || \"\").toString().replace(/\\r?\\n$/, \"\"));\n        }\n        this._socket.write(Buffer.from(str + \"\\r\\n\", \"utf-8\"));\n    }\n    /**\n     * Initiates a new message by submitting envelope data, starting with\n     * MAIL FROM: command\n     *\n     * @param {Object} envelope Envelope object in the form of\n     *        {from:'...', to:['...']}\n     *        or\n     *        {from:{address:'...',name:'...'}, to:[address:'...',name:'...']}\n     */ _setEnvelope(envelope, callback) {\n        let args = [];\n        let useSmtpUtf8 = false;\n        this._envelope = envelope || {};\n        this._envelope.from = (this._envelope.from && this._envelope.from.address || this._envelope.from || \"\").toString().trim();\n        this._envelope.to = [].concat(this._envelope.to || []).map((to)=>(to && to.address || to || \"\").toString().trim());\n        if (!this._envelope.to.length) {\n            return callback(this._formatError(\"No recipients defined\", \"EENVELOPE\", false, \"API\"));\n        }\n        if (this._envelope.from && /[\\r\\n<>]/.test(this._envelope.from)) {\n            return callback(this._formatError(\"Invalid sender \" + JSON.stringify(this._envelope.from), \"EENVELOPE\", false, \"API\"));\n        }\n        // check if the sender address uses only ASCII characters,\n        // otherwise require usage of SMTPUTF8 extension\n        if (/[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n            useSmtpUtf8 = true;\n        }\n        for(let i = 0, len = this._envelope.to.length; i < len; i++){\n            if (!this._envelope.to[i] || /[\\r\\n<>]/.test(this._envelope.to[i])) {\n                return callback(this._formatError(\"Invalid recipient \" + JSON.stringify(this._envelope.to[i]), \"EENVELOPE\", false, \"API\"));\n            }\n            // check if the recipients addresses use only ASCII characters,\n            // otherwise require usage of SMTPUTF8 extension\n            if (/[\\x80-\\uFFFF]/.test(this._envelope.to[i])) {\n                useSmtpUtf8 = true;\n            }\n        }\n        // clone the recipients array for latter manipulation\n        this._envelope.rcptQueue = JSON.parse(JSON.stringify(this._envelope.to || []));\n        this._envelope.rejected = [];\n        this._envelope.rejectedErrors = [];\n        this._envelope.accepted = [];\n        if (this._envelope.dsn) {\n            try {\n                this._envelope.dsn = this._setDsnEnvelope(this._envelope.dsn);\n            } catch (err) {\n                return callback(this._formatError(\"Invalid DSN \" + err.message, \"EENVELOPE\", false, \"API\"));\n            }\n        }\n        this._responseActions.push((str)=>{\n            this._actionMAIL(str, callback);\n        });\n        // If the server supports SMTPUTF8 and the envelope includes an internationalized\n        // email address then append SMTPUTF8 keyword to the MAIL FROM command\n        if (useSmtpUtf8 && this._supportedExtensions.includes(\"SMTPUTF8\")) {\n            args.push(\"SMTPUTF8\");\n            this._usingSmtpUtf8 = true;\n        }\n        // If the server supports 8BITMIME and the message might contain non-ascii bytes\n        // then append the 8BITMIME keyword to the MAIL FROM command\n        if (this._envelope.use8BitMime && this._supportedExtensions.includes(\"8BITMIME\")) {\n            args.push(\"BODY=8BITMIME\");\n            this._using8BitMime = true;\n        }\n        if (this._envelope.size && this._supportedExtensions.includes(\"SIZE\")) {\n            args.push(\"SIZE=\" + this._envelope.size);\n        }\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the MAIL FROM command\n        if (this._envelope.dsn && this._supportedExtensions.includes(\"DSN\")) {\n            if (this._envelope.dsn.ret) {\n                args.push(\"RET=\" + shared.encodeXText(this._envelope.dsn.ret));\n            }\n            if (this._envelope.dsn.envid) {\n                args.push(\"ENVID=\" + shared.encodeXText(this._envelope.dsn.envid));\n            }\n        }\n        this._sendCommand(\"MAIL FROM:<\" + this._envelope.from + \">\" + (args.length ? \" \" + args.join(\" \") : \"\"));\n    }\n    _setDsnEnvelope(params) {\n        let ret = (params.ret || params.return || \"\").toString().toUpperCase() || null;\n        if (ret) {\n            switch(ret){\n                case \"HDRS\":\n                case \"HEADERS\":\n                    ret = \"HDRS\";\n                    break;\n                case \"FULL\":\n                case \"BODY\":\n                    ret = \"FULL\";\n                    break;\n            }\n        }\n        if (ret && ![\n            \"FULL\",\n            \"HDRS\"\n        ].includes(ret)) {\n            throw new Error(\"ret: \" + JSON.stringify(ret));\n        }\n        let envid = (params.envid || params.id || \"\").toString() || null;\n        let notify = params.notify || null;\n        if (notify) {\n            if (typeof notify === \"string\") {\n                notify = notify.split(\",\");\n            }\n            notify = notify.map((n)=>n.trim().toUpperCase());\n            let validNotify = [\n                \"NEVER\",\n                \"SUCCESS\",\n                \"FAILURE\",\n                \"DELAY\"\n            ];\n            let invaliNotify = notify.filter((n)=>!validNotify.includes(n));\n            if (invaliNotify.length || notify.length > 1 && notify.includes(\"NEVER\")) {\n                throw new Error(\"notify: \" + JSON.stringify(notify.join(\",\")));\n            }\n            notify = notify.join(\",\");\n        }\n        let orcpt = (params.recipient || params.orcpt || \"\").toString() || null;\n        if (orcpt && orcpt.indexOf(\";\") < 0) {\n            orcpt = \"rfc822;\" + orcpt;\n        }\n        return {\n            ret,\n            envid,\n            notify,\n            orcpt\n        };\n    }\n    _getDsnRcptToArgs() {\n        let args = [];\n        // If the server supports DSN and the envelope includes an DSN prop\n        // then append DSN params to the RCPT TO command\n        if (this._envelope.dsn && this._supportedExtensions.includes(\"DSN\")) {\n            if (this._envelope.dsn.notify) {\n                args.push(\"NOTIFY=\" + shared.encodeXText(this._envelope.dsn.notify));\n            }\n            if (this._envelope.dsn.orcpt) {\n                args.push(\"ORCPT=\" + shared.encodeXText(this._envelope.dsn.orcpt));\n            }\n        }\n        return args.length ? \" \" + args.join(\" \") : \"\";\n    }\n    _createSendStream(callback) {\n        let dataStream = new DataStream();\n        let logStream;\n        if (this.options.lmtp) {\n            this._envelope.accepted.forEach((recipient, i)=>{\n                let final = i === this._envelope.accepted.length - 1;\n                this._responseActions.push((str)=>{\n                    this._actionLMTPStream(recipient, final, str, callback);\n                });\n            });\n        } else {\n            this._responseActions.push((str)=>{\n                this._actionSMTPStream(str, callback);\n            });\n        }\n        dataStream.pipe(this._socket, {\n            end: false\n        });\n        if (this.options.debug) {\n            logStream = new PassThrough();\n            logStream.on(\"readable\", ()=>{\n                let chunk;\n                while(chunk = logStream.read()){\n                    this.logger.debug({\n                        tnx: \"message\"\n                    }, chunk.toString(\"binary\").replace(/\\r?\\n$/, \"\"));\n                }\n            });\n            dataStream.pipe(logStream);\n        }\n        dataStream.once(\"end\", ()=>{\n            this.logger.info({\n                tnx: \"message\",\n                inByteCount: dataStream.inByteCount,\n                outByteCount: dataStream.outByteCount\n            }, \"<%s bytes encoded mime message (source size %s bytes)>\", dataStream.outByteCount, dataStream.inByteCount);\n        });\n        return dataStream;\n    }\n    /** ACTIONS **/ /**\n     * Will be run after the connection is created and the server sends\n     * a greeting. If the incoming message starts with 220 initiate\n     * SMTP session by sending EHLO command\n     *\n     * @param {String} str Message from the server\n     */ _actionGreeting(str) {\n        clearTimeout(this._greetingTimeout);\n        if (str.substr(0, 3) !== \"220\") {\n            this._onError(new Error(\"Invalid greeting. response=\" + str), \"EPROTOCOL\", str, \"CONN\");\n            return;\n        }\n        if (this.options.lmtp) {\n            this._responseActions.push(this._actionLHLO);\n            this._sendCommand(\"LHLO \" + this.name);\n        } else {\n            this._responseActions.push(this._actionEHLO);\n            this._sendCommand(\"EHLO \" + this.name);\n        }\n    }\n    /**\n     * Handles server response for LHLO command. If it yielded in\n     * error, emit 'error', otherwise treat this as an EHLO response\n     *\n     * @param {String} str Message from the server\n     */ _actionLHLO(str) {\n        if (str.charAt(0) !== \"2\") {\n            this._onError(new Error(\"Invalid LHLO. response=\" + str), \"EPROTOCOL\", str, \"LHLO\");\n            return;\n        }\n        this._actionEHLO(str);\n    }\n    /**\n     * Handles server response for EHLO command. If it yielded in\n     * error, try HELO instead, otherwise initiate TLS negotiation\n     * if STARTTLS is supported by the server or move into the\n     * authentication phase.\n     *\n     * @param {String} str Message from the server\n     */ _actionEHLO(str) {\n        let match;\n        if (str.substr(0, 3) === \"421\") {\n            this._onError(new Error(\"Server terminates connection. response=\" + str), \"ECONNECTION\", str, \"EHLO\");\n            return;\n        }\n        if (str.charAt(0) !== \"2\") {\n            if (this.options.requireTLS) {\n                this._onError(new Error(\"EHLO failed but HELO does not support required STARTTLS. response=\" + str), \"ECONNECTION\", str, \"EHLO\");\n                return;\n            }\n            // Try HELO instead\n            this._responseActions.push(this._actionHELO);\n            this._sendCommand(\"HELO \" + this.name);\n            return;\n        }\n        this._ehloLines = str.split(/\\r?\\n/).map((line)=>line.replace(/^\\d+[ -]/, \"\").trim()).filter((line)=>line).slice(1);\n        // Detect if the server supports STARTTLS\n        if (!this.secure && !this.options.ignoreTLS && (/[ -]STARTTLS\\b/im.test(str) || this.options.requireTLS)) {\n            this._sendCommand(\"STARTTLS\");\n            this._responseActions.push(this._actionSTARTTLS);\n            return;\n        }\n        // Detect if the server supports SMTPUTF8\n        if (/[ -]SMTPUTF8\\b/im.test(str)) {\n            this._supportedExtensions.push(\"SMTPUTF8\");\n        }\n        // Detect if the server supports DSN\n        if (/[ -]DSN\\b/im.test(str)) {\n            this._supportedExtensions.push(\"DSN\");\n        }\n        // Detect if the server supports 8BITMIME\n        if (/[ -]8BITMIME\\b/im.test(str)) {\n            this._supportedExtensions.push(\"8BITMIME\");\n        }\n        // Detect if the server supports PIPELINING\n        if (/[ -]PIPELINING\\b/im.test(str)) {\n            this._supportedExtensions.push(\"PIPELINING\");\n        }\n        // Detect if the server supports AUTH\n        if (/[ -]AUTH\\b/i.test(str)) {\n            this.allowsAuth = true;\n        }\n        // Detect if the server supports PLAIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)PLAIN/i.test(str)) {\n            this._supportedAuth.push(\"PLAIN\");\n        }\n        // Detect if the server supports LOGIN auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)LOGIN/i.test(str)) {\n            this._supportedAuth.push(\"LOGIN\");\n        }\n        // Detect if the server supports CRAM-MD5 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)CRAM-MD5/i.test(str)) {\n            this._supportedAuth.push(\"CRAM-MD5\");\n        }\n        // Detect if the server supports XOAUTH2 auth\n        if (/[ -]AUTH(?:(\\s+|=)[^\\n]*\\s+|\\s+|=)XOAUTH2/i.test(str)) {\n            this._supportedAuth.push(\"XOAUTH2\");\n        }\n        // Detect if the server supports SIZE extensions (and the max allowed size)\n        if (match = str.match(/[ -]SIZE(?:[ \\t]+(\\d+))?/im)) {\n            this._supportedExtensions.push(\"SIZE\");\n            this._maxAllowedSize = Number(match[1]) || 0;\n        }\n        this.emit(\"connect\");\n    }\n    /**\n     * Handles server response for HELO command. If it yielded in\n     * error, emit 'error', otherwise move into the authentication phase.\n     *\n     * @param {String} str Message from the server\n     */ _actionHELO(str) {\n        if (str.charAt(0) !== \"2\") {\n            this._onError(new Error(\"Invalid HELO. response=\" + str), \"EPROTOCOL\", str, \"HELO\");\n            return;\n        }\n        // assume that authentication is enabled (most probably is not though)\n        this.allowsAuth = true;\n        this.emit(\"connect\");\n    }\n    /**\n     * Handles server response for STARTTLS command. If there's an error\n     * try HELO instead, otherwise initiate TLS upgrade. If the upgrade\n     * succeedes restart the EHLO\n     *\n     * @param {String} str Message from the server\n     */ _actionSTARTTLS(str) {\n        if (str.charAt(0) !== \"2\") {\n            if (this.options.opportunisticTLS) {\n                this.logger.info({\n                    tnx: \"smtp\"\n                }, \"Failed STARTTLS upgrade, continuing unencrypted\");\n                return this.emit(\"connect\");\n            }\n            this._onError(new Error(\"Error upgrading connection with STARTTLS\"), \"ETLS\", str, \"STARTTLS\");\n            return;\n        }\n        this._upgradeConnection((err, secured)=>{\n            if (err) {\n                this._onError(new Error(\"Error initiating TLS - \" + (err.message || err)), \"ETLS\", false, \"STARTTLS\");\n                return;\n            }\n            this.logger.info({\n                tnx: \"smtp\"\n            }, \"Connection upgraded with STARTTLS\");\n            if (secured) {\n                // restart session\n                if (this.options.lmtp) {\n                    this._responseActions.push(this._actionLHLO);\n                    this._sendCommand(\"LHLO \" + this.name);\n                } else {\n                    this._responseActions.push(this._actionEHLO);\n                    this._sendCommand(\"EHLO \" + this.name);\n                }\n            } else {\n                this.emit(\"connect\");\n            }\n        });\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 VXNlcm5hbWU6' (base64 for 'Username:'). Data to be sent as\n     * response needs to be base64 encoded username. We do not need\n     * exact match but settle with 334 response in general as some\n     * hosts invalidly use a longer message than VXNlcm5hbWU6\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_LOGIN_USER(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 VXNlcm5hbWU6'\n            callback(this._formatError('Invalid login sequence while waiting for \"334 VXNlcm5hbWU6\"', \"EAUTH\", str, \"AUTH LOGIN\"));\n            return;\n        }\n        this._responseActions.push((str)=>{\n            this._actionAUTH_LOGIN_PASS(str, callback);\n        });\n        this._sendCommand(Buffer.from(this._auth.credentials.user + \"\", \"utf-8\").toString(\"base64\"));\n    }\n    /**\n     * Handle the response for AUTH CRAM-MD5 command. We are expecting\n     * '334 <challenge string>'. Data to be sent as response needs to be\n     * base64 decoded challenge string, MD5 hashed using the password as\n     * a HMAC key, prefixed by the username and a space, and finally all\n     * base64 encoded again.\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_CRAM_MD5(str, callback) {\n        let challengeMatch = str.match(/^334\\s+(.+)$/);\n        let challengeString = \"\";\n        if (!challengeMatch) {\n            return callback(this._formatError(\"Invalid login sequence while waiting for server challenge string\", \"EAUTH\", str, \"AUTH CRAM-MD5\"));\n        } else {\n            challengeString = challengeMatch[1];\n        }\n        // Decode from base64\n        let base64decoded = Buffer.from(challengeString, \"base64\").toString(\"ascii\"), hmacMD5 = crypto.createHmac(\"md5\", this._auth.credentials.pass);\n        hmacMD5.update(base64decoded);\n        let prepended = this._auth.credentials.user + \" \" + hmacMD5.digest(\"hex\");\n        this._responseActions.push((str)=>{\n            this._actionAUTH_CRAM_MD5_PASS(str, callback);\n        });\n        this._sendCommand(Buffer.from(prepended).toString(\"base64\"), // hidden hash for logs\n        Buffer.from(this._auth.credentials.user + \" /* secret */\").toString(\"base64\"));\n    }\n    /**\n     * Handles the response to CRAM-MD5 authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_CRAM_MD5_PASS(str, callback) {\n        if (!str.match(/^235\\s+/)) {\n            return callback(this._formatError('Invalid login sequence while waiting for \"235\"', \"EAUTH\", str, \"AUTH CRAM-MD5\"));\n        }\n        this.logger.info({\n            tnx: \"smtp\",\n            username: this._auth.user,\n            action: \"authenticated\",\n            method: this._authMethod\n        }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n        this.authenticated = true;\n        callback(null, true);\n    }\n    /**\n     * Handle the response for AUTH LOGIN command. We are expecting\n     * '334 UGFzc3dvcmQ6' (base64 for 'Password:'). Data to be sent as\n     * response needs to be base64 encoded password.\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTH_LOGIN_PASS(str, callback) {\n        if (!/^334[ -]/.test(str)) {\n            // expecting '334 UGFzc3dvcmQ6'\n            return callback(this._formatError('Invalid login sequence while waiting for \"334 UGFzc3dvcmQ6\"', \"EAUTH\", str, \"AUTH LOGIN\"));\n        }\n        this._responseActions.push((str)=>{\n            this._actionAUTHComplete(str, callback);\n        });\n        this._sendCommand(Buffer.from((this._auth.credentials.pass || \"\").toString(), \"utf-8\").toString(\"base64\"), // Hidden pass for logs\n        Buffer.from(\"/* secret */\", \"utf-8\").toString(\"base64\"));\n    }\n    /**\n     * Handles the response for authentication, if there's no error,\n     * the user can be considered logged in. Start waiting for a message to send\n     *\n     * @param {String} str Message from the server\n     */ _actionAUTHComplete(str, isRetry, callback) {\n        if (!callback && typeof isRetry === \"function\") {\n            callback = isRetry;\n            isRetry = false;\n        }\n        if (str.substr(0, 3) === \"334\") {\n            this._responseActions.push((str)=>{\n                if (isRetry || this._authMethod !== \"XOAUTH2\") {\n                    this._actionAUTHComplete(str, true, callback);\n                } else {\n                    // fetch a new OAuth2 access token\n                    setImmediate(()=>this._handleXOauth2Token(true, callback));\n                }\n            });\n            this._sendCommand(\"\");\n            return;\n        }\n        if (str.charAt(0) !== \"2\") {\n            this.logger.info({\n                tnx: \"smtp\",\n                username: this._auth.user,\n                action: \"authfail\",\n                method: this._authMethod\n            }, \"User %s failed to authenticate\", JSON.stringify(this._auth.user));\n            return callback(this._formatError(\"Invalid login\", \"EAUTH\", str, \"AUTH \" + this._authMethod));\n        }\n        this.logger.info({\n            tnx: \"smtp\",\n            username: this._auth.user,\n            action: \"authenticated\",\n            method: this._authMethod\n        }, \"User %s authenticated\", JSON.stringify(this._auth.user));\n        this.authenticated = true;\n        callback(null, true);\n    }\n    /**\n     * Handle response for a MAIL FROM: command\n     *\n     * @param {String} str Message from the server\n     */ _actionMAIL(str, callback) {\n        let message, curRecipient;\n        if (Number(str.charAt(0)) !== 2) {\n            if (this._usingSmtpUtf8 && /^550 /.test(str) && /[\\x80-\\uFFFF]/.test(this._envelope.from)) {\n                message = \"Internationalized mailbox name not allowed\";\n            } else {\n                message = \"Mail command failed\";\n            }\n            return callback(this._formatError(message, \"EENVELOPE\", str, \"MAIL FROM\"));\n        }\n        if (!this._envelope.rcptQueue.length) {\n            return callback(this._formatError(\"Can't send mail - no recipients defined\", \"EENVELOPE\", false, \"API\"));\n        } else {\n            this._recipientQueue = [];\n            if (this._supportedExtensions.includes(\"PIPELINING\")) {\n                while(this._envelope.rcptQueue.length){\n                    curRecipient = this._envelope.rcptQueue.shift();\n                    this._recipientQueue.push(curRecipient);\n                    this._responseActions.push((str)=>{\n                        this._actionRCPT(str, callback);\n                    });\n                    this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n                }\n            } else {\n                curRecipient = this._envelope.rcptQueue.shift();\n                this._recipientQueue.push(curRecipient);\n                this._responseActions.push((str)=>{\n                    this._actionRCPT(str, callback);\n                });\n                this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n            }\n        }\n    }\n    /**\n     * Handle response for a RCPT TO: command\n     *\n     * @param {String} str Message from the server\n     */ _actionRCPT(str, callback) {\n        let message, err, curRecipient = this._recipientQueue.shift();\n        if (Number(str.charAt(0)) !== 2) {\n            // this is a soft error\n            if (this._usingSmtpUtf8 && /^553 /.test(str) && /[\\x80-\\uFFFF]/.test(curRecipient)) {\n                message = \"Internationalized mailbox name not allowed\";\n            } else {\n                message = \"Recipient command failed\";\n            }\n            this._envelope.rejected.push(curRecipient);\n            // store error for the failed recipient\n            err = this._formatError(message, \"EENVELOPE\", str, \"RCPT TO\");\n            err.recipient = curRecipient;\n            this._envelope.rejectedErrors.push(err);\n        } else {\n            this._envelope.accepted.push(curRecipient);\n        }\n        if (!this._envelope.rcptQueue.length && !this._recipientQueue.length) {\n            if (this._envelope.rejected.length < this._envelope.to.length) {\n                this._responseActions.push((str)=>{\n                    this._actionDATA(str, callback);\n                });\n                this._sendCommand(\"DATA\");\n            } else {\n                err = this._formatError(\"Can't send mail - all recipients were rejected\", \"EENVELOPE\", str, \"RCPT TO\");\n                err.rejected = this._envelope.rejected;\n                err.rejectedErrors = this._envelope.rejectedErrors;\n                return callback(err);\n            }\n        } else if (this._envelope.rcptQueue.length) {\n            curRecipient = this._envelope.rcptQueue.shift();\n            this._recipientQueue.push(curRecipient);\n            this._responseActions.push((str)=>{\n                this._actionRCPT(str, callback);\n            });\n            this._sendCommand(\"RCPT TO:<\" + curRecipient + \">\" + this._getDsnRcptToArgs());\n        }\n    }\n    /**\n     * Handle response for a DATA command\n     *\n     * @param {String} str Message from the server\n     */ _actionDATA(str, callback) {\n        // response should be 354 but according to this issue https://github.com/eleith/emailjs/issues/24\n        // some servers might use 250 instead, so lets check for 2 or 3 as the first digit\n        if (!/^[23]/.test(str)) {\n            return callback(this._formatError(\"Data command failed\", \"EENVELOPE\", str, \"DATA\"));\n        }\n        let response = {\n            accepted: this._envelope.accepted,\n            rejected: this._envelope.rejected\n        };\n        if (this._ehloLines && this._ehloLines.length) {\n            response.ehlo = this._ehloLines;\n        }\n        if (this._envelope.rejectedErrors.length) {\n            response.rejectedErrors = this._envelope.rejectedErrors;\n        }\n        callback(null, response);\n    }\n    /**\n     * Handle response for a DATA stream when using SMTP\n     * We expect a single response that defines if the sending succeeded or failed\n     *\n     * @param {String} str Message from the server\n     */ _actionSMTPStream(str, callback) {\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            return callback(this._formatError(\"Message failed\", \"EMESSAGE\", str, \"DATA\"));\n        } else {\n            // Message sent succesfully\n            return callback(null, str);\n        }\n    }\n    /**\n     * Handle response for a DATA stream\n     * We expect a separate response for every recipient. All recipients can either\n     * succeed or fail separately\n     *\n     * @param {String} recipient The recipient this response applies to\n     * @param {Boolean} final Is this the final recipient?\n     * @param {String} str Message from the server\n     */ _actionLMTPStream(recipient, final, str, callback) {\n        let err;\n        if (Number(str.charAt(0)) !== 2) {\n            // Message failed\n            err = this._formatError(\"Message failed for recipient \" + recipient, \"EMESSAGE\", str, \"DATA\");\n            err.recipient = recipient;\n            this._envelope.rejected.push(recipient);\n            this._envelope.rejectedErrors.push(err);\n            for(let i = 0, len = this._envelope.accepted.length; i < len; i++){\n                if (this._envelope.accepted[i] === recipient) {\n                    this._envelope.accepted.splice(i, 1);\n                }\n            }\n        }\n        if (final) {\n            return callback(null, str);\n        }\n    }\n    _handleXOauth2Token(isRetry, callback) {\n        this._auth.oauth2.getToken(isRetry, (err, accessToken)=>{\n            if (err) {\n                this.logger.info({\n                    tnx: \"smtp\",\n                    username: this._auth.user,\n                    action: \"authfail\",\n                    method: this._authMethod\n                }, \"User %s failed to authenticate\", JSON.stringify(this._auth.user));\n                return callback(this._formatError(err, \"EAUTH\", false, \"AUTH XOAUTH2\"));\n            }\n            this._responseActions.push((str)=>{\n                this._actionAUTHComplete(str, isRetry, callback);\n            });\n            this._sendCommand(\"AUTH XOAUTH2 \" + this._auth.oauth2.buildXOAuth2Token(accessToken), //  Hidden for logs\n            \"AUTH XOAUTH2 \" + this._auth.oauth2.buildXOAuth2Token(\"/* secret */\"));\n        });\n    }\n    /**\n     *\n     * @param {string} command\n     * @private\n     */ _isDestroyedMessage(command) {\n        if (this._destroyed) {\n            return \"Cannot \" + command + \" - smtp connection is already destroyed.\";\n        }\n        if (this._socket) {\n            if (this._socket.destroyed) {\n                return \"Cannot \" + command + \" - smtp connection socket is already destroyed.\";\n            }\n            if (!this._socket.writable) {\n                return \"Cannot \" + command + \" - smtp connection socket is already half-closed.\";\n            }\n        }\n    }\n    _getHostname() {\n        // defaul hostname is machine hostname or [IP]\n        let defaultHostname;\n        try {\n            defaultHostname = os.hostname() || \"\";\n        } catch (err) {\n            // fails on windows 7\n            defaultHostname = \"localhost\";\n        }\n        // ignore if not FQDN\n        if (!defaultHostname || defaultHostname.indexOf(\".\") < 0) {\n            defaultHostname = \"[127.0.0.1]\";\n        }\n        // IP should be enclosed in []\n        if (defaultHostname.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/)) {\n            defaultHostname = \"[\" + defaultHostname + \"]\";\n        }\n        return defaultHostname;\n    }\n}\nmodule.exports = SMTPConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js":
/*!********************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst PoolResource = __webpack_require__(/*! ./pool-resource */ \"(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\");\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n/**\n * Creates a SMTP pool transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options SMTP Connection options\n */ class SMTPPool extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        if (typeof options === \"string\") {\n            options = {\n                url: options\n            };\n        }\n        let urlData;\n        let service = options.service;\n        if (typeof options.getSocket === \"function\") {\n            this.getSocket = options.getSocket;\n        }\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n        this.options = shared.assign(false, options, urlData, service && wellKnown(service) // wellknown options\n        );\n        this.options.maxConnections = this.options.maxConnections || 5;\n        this.options.maxMessages = this.options.maxMessages || 100;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-pool\"\n        });\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n        this.name = \"SMTP (pool)\";\n        this.version = packageData.version + \"[client:\" + connection.version + \"]\";\n        this._rateLimit = {\n            counter: 0,\n            timeout: null,\n            waiting: [],\n            checkpoint: false,\n            delta: Number(this.options.rateDelta) || 1000,\n            limit: Number(this.options.rateLimit) || 0\n        };\n        this._closed = false;\n        this._queue = [];\n        this._connections = [];\n        this._connectionCounter = 0;\n        this.idling = true;\n        setImmediate(()=>{\n            if (this.idling) {\n                this.emit(\"idle\");\n            }\n        });\n    }\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */ getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(()=>callback(null, false));\n    }\n    /**\n     * Queues an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        if (this._closed) {\n            return false;\n        }\n        this._queue.push({\n            mail,\n            requeueAttempts: 0,\n            callback\n        });\n        if (this.idling && this._queue.length >= this.options.maxConnections) {\n            this.idling = false;\n        }\n        setImmediate(()=>this._processMessages());\n        return true;\n    }\n    /**\n     * Closes all connections in the pool. If there is a message being sent, the connection\n     * is closed later\n     */ close() {\n        let connection;\n        let len = this._connections.length;\n        this._closed = true;\n        // clear rate limit timer if it exists\n        clearTimeout(this._rateLimit.timeout);\n        if (!len && !this._queue.length) {\n            return;\n        }\n        // remove all available connections\n        for(let i = len - 1; i >= 0; i--){\n            if (this._connections[i] && this._connections[i].available) {\n                connection = this._connections[i];\n                connection.close();\n                this.logger.info({\n                    tnx: \"connection\",\n                    cid: connection.id,\n                    action: \"removed\"\n                }, \"Connection #%s removed\", connection.id);\n            }\n        }\n        if (len && !this._connections.length) {\n            this.logger.debug({\n                tnx: \"connection\"\n            }, \"All connections removed\");\n        }\n        if (!this._queue.length) {\n            return;\n        }\n        // make sure that entire queue would be cleaned\n        let invokeCallbacks = ()=>{\n            if (!this._queue.length) {\n                this.logger.debug({\n                    tnx: \"connection\"\n                }, \"Pending queue entries cleared\");\n                return;\n            }\n            let entry = this._queue.shift();\n            if (entry && typeof entry.callback === \"function\") {\n                try {\n                    entry.callback(new Error(\"Connection pool was closed\"));\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n            }\n            setImmediate(invokeCallbacks);\n        };\n        setImmediate(invokeCallbacks);\n    }\n    /**\n     * Check the queue and available connections. If there is a message to be sent and there is\n     * an available connection, then use this connection to send the mail\n     */ _processMessages() {\n        let connection;\n        let i, len;\n        // do nothing if already closed\n        if (this._closed) {\n            return;\n        }\n        // do nothing if queue is empty\n        if (!this._queue.length) {\n            if (!this.idling) {\n                // no pending jobs\n                this.idling = true;\n                this.emit(\"idle\");\n            }\n            return;\n        }\n        // find first available connection\n        for(i = 0, len = this._connections.length; i < len; i++){\n            if (this._connections[i].available) {\n                connection = this._connections[i];\n                break;\n            }\n        }\n        if (!connection && this._connections.length < this.options.maxConnections) {\n            connection = this._createConnection();\n        }\n        if (!connection) {\n            // no more free connection slots available\n            this.idling = false;\n            return;\n        }\n        // check if there is free space in the processing queue\n        if (!this.idling && this._queue.length < this.options.maxConnections) {\n            this.idling = true;\n            this.emit(\"idle\");\n        }\n        let entry = connection.queueEntry = this._queue.shift();\n        entry.messageId = (connection.queueEntry.mail.message.getHeader(\"message-id\") || \"\").replace(/[<>\\s]/g, \"\");\n        connection.available = false;\n        this.logger.debug({\n            tnx: \"pool\",\n            cid: connection.id,\n            messageId: entry.messageId,\n            action: \"assign\"\n        }, \"Assigned message <%s> to #%s (%s)\", entry.messageId, connection.id, connection.messages + 1);\n        if (this._rateLimit.limit) {\n            this._rateLimit.counter++;\n            if (!this._rateLimit.checkpoint) {\n                this._rateLimit.checkpoint = Date.now();\n            }\n        }\n        connection.send(entry.mail, (err, info)=>{\n            // only process callback if current handler is not changed\n            if (entry === connection.queueEntry) {\n                try {\n                    entry.callback(err, info);\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n                connection.queueEntry = false;\n            }\n        });\n    }\n    /**\n     * Creates a new pool resource\n     */ _createConnection() {\n        let connection = new PoolResource(this);\n        connection.id = ++this._connectionCounter;\n        this.logger.info({\n            tnx: \"pool\",\n            cid: connection.id,\n            action: \"conection\"\n        }, \"Created new pool resource #%s\", connection.id);\n        // resource comes available\n        connection.on(\"available\", ()=>{\n            this.logger.debug({\n                tnx: \"connection\",\n                cid: connection.id,\n                action: \"available\"\n            }, \"Connection #%s became available\", connection.id);\n            if (this._closed) {\n                // if already closed run close() that will remove this connections from connections list\n                this.close();\n            } else {\n                // check if there's anything else to send\n                this._processMessages();\n            }\n        });\n        // resource is terminated with an error\n        connection.once(\"error\", (err)=>{\n            if (err.code !== \"EMAXLIMIT\") {\n                this.logger.error({\n                    err,\n                    tnx: \"pool\",\n                    cid: connection.id\n                }, \"Pool Error for #%s: %s\", connection.id, err.message);\n            } else {\n                this.logger.debug({\n                    tnx: \"pool\",\n                    cid: connection.id,\n                    action: \"maxlimit\"\n                }, \"Max messages limit exchausted for #%s\", connection.id);\n            }\n            if (connection.queueEntry) {\n                try {\n                    connection.queueEntry.callback(err);\n                } catch (E) {\n                    this.logger.error({\n                        err: E,\n                        tnx: \"callback\",\n                        cid: connection.id\n                    }, \"Callback error for #%s: %s\", connection.id, E.message);\n                }\n                connection.queueEntry = false;\n            }\n            // remove the erroneus connection from connections list\n            this._removeConnection(connection);\n            this._continueProcessing();\n        });\n        connection.once(\"close\", ()=>{\n            this.logger.info({\n                tnx: \"connection\",\n                cid: connection.id,\n                action: \"closed\"\n            }, \"Connection #%s was closed\", connection.id);\n            this._removeConnection(connection);\n            if (connection.queueEntry) {\n                // If the connection closed when sending, add the message to the queue again\n                // if max number of requeues is not reached yet\n                // Note that we must wait a bit.. because the callback of the 'error' handler might be called\n                // in the next event loop\n                setTimeout(()=>{\n                    if (connection.queueEntry) {\n                        if (this._shouldRequeuOnConnectionClose(connection.queueEntry)) {\n                            this._requeueEntryOnConnectionClose(connection);\n                        } else {\n                            this._failDeliveryOnConnectionClose(connection);\n                        }\n                    }\n                    this._continueProcessing();\n                }, 50);\n            } else {\n                this._continueProcessing();\n            }\n        });\n        this._connections.push(connection);\n        return connection;\n    }\n    _shouldRequeuOnConnectionClose(queueEntry) {\n        if (this.options.maxRequeues === undefined || this.options.maxRequeues < 0) {\n            return true;\n        }\n        return queueEntry.requeueAttempts < this.options.maxRequeues;\n    }\n    _failDeliveryOnConnectionClose(connection) {\n        if (connection.queueEntry && connection.queueEntry.callback) {\n            try {\n                connection.queueEntry.callback(new Error(\"Reached maximum number of retries after connection was closed\"));\n            } catch (E) {\n                this.logger.error({\n                    err: E,\n                    tnx: \"callback\",\n                    messageId: connection.queueEntry.messageId,\n                    cid: connection.id\n                }, \"Callback error for #%s: %s\", connection.id, E.message);\n            }\n            connection.queueEntry = false;\n        }\n    }\n    _requeueEntryOnConnectionClose(connection) {\n        connection.queueEntry.requeueAttempts = connection.queueEntry.requeueAttempts + 1;\n        this.logger.debug({\n            tnx: \"pool\",\n            cid: connection.id,\n            messageId: connection.queueEntry.messageId,\n            action: \"requeue\"\n        }, \"Re-queued message <%s> for #%s. Attempt: #%s\", connection.queueEntry.messageId, connection.id, connection.queueEntry.requeueAttempts);\n        this._queue.unshift(connection.queueEntry);\n        connection.queueEntry = false;\n    }\n    /**\n     * Continue to process message if the pool hasn't closed\n     */ _continueProcessing() {\n        if (this._closed) {\n            this.close();\n        } else {\n            setTimeout(()=>this._processMessages(), 100);\n        }\n    }\n    /**\n     * Remove resource from pool\n     *\n     * @param {Object} connection The PoolResource to remove\n     */ _removeConnection(connection) {\n        let index = this._connections.indexOf(connection);\n        if (index !== -1) {\n            this._connections.splice(index, 1);\n        }\n    }\n    /**\n     * Checks if connections have hit current rate limit and if so, queues the availability callback\n     *\n     * @param {Function} callback Callback function to run once rate limiter has been cleared\n     */ _checkRateLimit(callback) {\n        if (!this._rateLimit.limit) {\n            return callback();\n        }\n        let now = Date.now();\n        if (this._rateLimit.counter < this._rateLimit.limit) {\n            return callback();\n        }\n        this._rateLimit.waiting.push(callback);\n        if (this._rateLimit.checkpoint <= now - this._rateLimit.delta) {\n            return this._clearRateLimit();\n        } else if (!this._rateLimit.timeout) {\n            this._rateLimit.timeout = setTimeout(()=>this._clearRateLimit(), this._rateLimit.delta - (now - this._rateLimit.checkpoint));\n            this._rateLimit.checkpoint = now;\n        }\n    }\n    /**\n     * Clears current rate limit limitation and runs paused callback\n     */ _clearRateLimit() {\n        clearTimeout(this._rateLimit.timeout);\n        this._rateLimit.timeout = null;\n        this._rateLimit.counter = 0;\n        this._rateLimit.checkpoint = false;\n        // resume all paused connections\n        while(this._rateLimit.waiting.length){\n            let cb = this._rateLimit.waiting.shift();\n            setImmediate(cb);\n        }\n    }\n    /**\n     * Returns true if there are free slots in the queue\n     */ isIdle() {\n        return this.idling;\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        let auth = new PoolResource(this).auth;\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            let returned = false;\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error(\"Connection closed\"));\n            });\n            let finalize = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        finalize();\n                    });\n                } else if (!auth && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error(\"Authentication info was not provided\");\n                    err.code = \"NoAuth\";\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n        return promise;\n    }\n}\n// expose to the world\nmodule.exports = SMTPPool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js":
/*!****************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-pool/pool-resource.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst assign = (__webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\").assign);\nconst XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\n/**\n * Creates an element for the pool\n *\n * @constructor\n * @param {Object} options SMTPPool instance\n */ class PoolResource extends EventEmitter {\n    constructor(pool){\n        super();\n        this.pool = pool;\n        this.options = pool.options;\n        this.logger = this.pool.logger;\n        if (this.options.auth) {\n            switch((this.options.auth.type || \"\").toString().toUpperCase()){\n                case \"OAUTH2\":\n                    {\n                        let oauth2 = new XOAuth2(this.options.auth, this.logger);\n                        oauth2.provisionCallback = this.pool.mailer && this.pool.mailer.get(\"oauth2_provision_cb\") || oauth2.provisionCallback;\n                        this.auth = {\n                            type: \"OAUTH2\",\n                            user: this.options.auth.user,\n                            oauth2,\n                            method: \"XOAUTH2\"\n                        };\n                        oauth2.on(\"token\", (token)=>this.pool.mailer.emit(\"token\", token));\n                        oauth2.on(\"error\", (err)=>this.emit(\"error\", err));\n                        break;\n                    }\n                default:\n                    if (!this.options.auth.user && !this.options.auth.pass) {\n                        break;\n                    }\n                    this.auth = {\n                        type: (this.options.auth.type || \"\").toString().toUpperCase() || \"LOGIN\",\n                        user: this.options.auth.user,\n                        credentials: {\n                            user: this.options.auth.user || \"\",\n                            pass: this.options.auth.pass,\n                            options: this.options.auth.options\n                        },\n                        method: (this.options.auth.method || \"\").trim().toUpperCase() || this.options.authMethod || false\n                    };\n            }\n        }\n        this._connection = false;\n        this._connected = false;\n        this.messages = 0;\n        this.available = true;\n    }\n    /**\n     * Initiates a connection to the SMTP server\n     *\n     * @param {Function} callback Callback function to run once the connection is established or failed\n     */ connect(callback) {\n        this.pool.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            this.connection = new SMTPConnection(options);\n            this.connection.once(\"error\", (err)=>{\n                this.emit(\"error\", err);\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(err);\n            });\n            this.connection.once(\"end\", ()=>{\n                this.close();\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                let timer = setTimeout(()=>{\n                    if (returned) {\n                        return;\n                    }\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error(\"Unexpected socket close\");\n                    if (this.connection && this.connection._socket && this.connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = \"ETLS\";\n                    }\n                    callback(err);\n                }, 1000);\n                try {\n                    timer.unref();\n                } catch (E) {\n                // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n            this.connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                if (this.auth && (this.connection.allowsAuth || options.forceAuth)) {\n                    this.connection.login(this.auth, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        returned = true;\n                        if (err) {\n                            this.connection.close();\n                            this.emit(\"error\", err);\n                            return callback(err);\n                        }\n                        this._connected = true;\n                        callback(null, true);\n                    });\n                } else {\n                    returned = true;\n                    this._connected = true;\n                    return callback(null, true);\n                }\n            });\n        });\n    }\n    /**\n     * Sends an e-mail to be sent using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        if (!this._connected) {\n            return this.connect((err)=>{\n                if (err) {\n                    return callback(err);\n                }\n                return this.send(mail, callback);\n            });\n        }\n        let envelope = mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId,\n            cid: this.id\n        }, \"Sending message %s using #%s to <%s>\", messageId, this.id, recipients.join(\", \"));\n        if (mail.data.dsn) {\n            envelope.dsn = mail.data.dsn;\n        }\n        this.connection.send(envelope, mail.message.createReadStream(), (err, info)=>{\n            this.messages++;\n            if (err) {\n                this.connection.close();\n                this.emit(\"error\", err);\n                return callback(err);\n            }\n            info.envelope = {\n                from: envelope.from,\n                to: envelope.to\n            };\n            info.messageId = messageId;\n            setImmediate(()=>{\n                let err;\n                if (this.messages >= this.options.maxMessages) {\n                    err = new Error(\"Resource exhausted\");\n                    err.code = \"EMAXLIMIT\";\n                    this.connection.close();\n                    this.emit(\"error\", err);\n                } else {\n                    this.pool._checkRateLimit(()=>{\n                        this.available = true;\n                        this.emit(\"available\");\n                    });\n                }\n            });\n            callback(null, info);\n        });\n    }\n    /**\n     * Closes the connection\n     */ close() {\n        this._connected = false;\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        if (this.connection) {\n            this.connection.close();\n        }\n        this.emit(\"close\");\n    }\n}\nmodule.exports = PoolResource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-pool/pool-resource.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/nodemailer/lib/smtp-transport/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst SMTPConnection = __webpack_require__(/*! ../smtp-connection */ \"(rsc)/./node_modules/nodemailer/lib/smtp-connection/index.js\");\nconst wellKnown = __webpack_require__(/*! ../well-known */ \"(rsc)/./node_modules/nodemailer/lib/well-known/index.js\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\nconst XOAuth2 = __webpack_require__(/*! ../xoauth2 */ \"(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\");\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\n/**\n * Creates a SMTP transport object for Nodemailer\n *\n * @constructor\n * @param {Object} options Connection options\n */ class SMTPTransport extends EventEmitter {\n    constructor(options){\n        super();\n        options = options || {};\n        if (typeof options === \"string\") {\n            options = {\n                url: options\n            };\n        }\n        let urlData;\n        let service = options.service;\n        if (typeof options.getSocket === \"function\") {\n            this.getSocket = options.getSocket;\n        }\n        if (options.url) {\n            urlData = shared.parseConnectionUrl(options.url);\n            service = service || urlData.service;\n        }\n        this.options = shared.assign(false, options, urlData, service && wellKnown(service) // wellknown options\n        );\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"smtp-transport\"\n        });\n        // temporary object\n        let connection = new SMTPConnection(this.options);\n        this.name = \"SMTP\";\n        this.version = packageData.version + \"[client:\" + connection.version + \"]\";\n        if (this.options.auth) {\n            this.auth = this.getAuth({});\n        }\n    }\n    /**\n     * Placeholder function for creating proxy sockets. This method immediatelly returns\n     * without a socket\n     *\n     * @param {Object} options Connection options\n     * @param {Function} callback Callback function to run with the socket keys\n     */ getSocket(options, callback) {\n        // return immediatelly\n        return setImmediate(()=>callback(null, false));\n    }\n    getAuth(authOpts) {\n        if (!authOpts) {\n            return this.auth;\n        }\n        let hasAuth = false;\n        let authData = {};\n        if (this.options.auth && typeof this.options.auth === \"object\") {\n            Object.keys(this.options.auth).forEach((key)=>{\n                hasAuth = true;\n                authData[key] = this.options.auth[key];\n            });\n        }\n        if (authOpts && typeof authOpts === \"object\") {\n            Object.keys(authOpts).forEach((key)=>{\n                hasAuth = true;\n                authData[key] = authOpts[key];\n            });\n        }\n        if (!hasAuth) {\n            return false;\n        }\n        switch((authData.type || \"\").toString().toUpperCase()){\n            case \"OAUTH2\":\n                {\n                    if (!authData.service && !authData.user) {\n                        return false;\n                    }\n                    let oauth2 = new XOAuth2(authData, this.logger);\n                    oauth2.provisionCallback = this.mailer && this.mailer.get(\"oauth2_provision_cb\") || oauth2.provisionCallback;\n                    oauth2.on(\"token\", (token)=>this.mailer.emit(\"token\", token));\n                    oauth2.on(\"error\", (err)=>this.emit(\"error\", err));\n                    return {\n                        type: \"OAUTH2\",\n                        user: authData.user,\n                        oauth2,\n                        method: \"XOAUTH2\"\n                    };\n                }\n            default:\n                return {\n                    type: (authData.type || \"\").toString().toUpperCase() || \"LOGIN\",\n                    user: authData.user,\n                    credentials: {\n                        user: authData.user || \"\",\n                        pass: authData.pass,\n                        options: authData.options\n                    },\n                    method: (authData.method || \"\").trim().toUpperCase() || this.options.authMethod || false\n                };\n        }\n    }\n    /**\n     * Sends an e-mail using the selected settings\n     *\n     * @param {Object} mail Mail object\n     * @param {Function} callback Callback function\n     */ send(mail, callback) {\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let returned = false;\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                // only copy options if we need to modify it\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                let timer = setTimeout(()=>{\n                    if (returned) {\n                        return;\n                    }\n                    returned = true;\n                    // still have not returned, this means we have an unexpected connection close\n                    let err = new Error(\"Unexpected socket close\");\n                    if (connection && connection._socket && connection._socket.upgrading) {\n                        // starttls connection errors\n                        err.code = \"ETLS\";\n                    }\n                    callback(err);\n                }, 1000);\n                try {\n                    timer.unref();\n                } catch (E) {\n                // Ignore. Happens on envs with non-node timer implementation\n                }\n            });\n            let sendMessage = ()=>{\n                let envelope = mail.message.getEnvelope();\n                let messageId = mail.message.messageId();\n                let recipients = [].concat(envelope.to || []);\n                if (recipients.length > 3) {\n                    recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n                }\n                if (mail.data.dsn) {\n                    envelope.dsn = mail.data.dsn;\n                }\n                this.logger.info({\n                    tnx: \"send\",\n                    messageId\n                }, \"Sending message %s to <%s>\", messageId, recipients.join(\", \"));\n                connection.send(envelope, mail.message.createReadStream(), (err, info)=>{\n                    returned = true;\n                    connection.close();\n                    if (err) {\n                        this.logger.error({\n                            err,\n                            tnx: \"send\"\n                        }, \"Send error for %s: %s\", messageId, err.message);\n                        return callback(err);\n                    }\n                    info.envelope = {\n                        from: envelope.from,\n                        to: envelope.to\n                    };\n                    info.messageId = messageId;\n                    try {\n                        return callback(null, info);\n                    } catch (E) {\n                        this.logger.error({\n                            err: E,\n                            tnx: \"callback\"\n                        }, \"Callback error for %s: %s\", messageId, E.message);\n                    }\n                });\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                let auth = this.getAuth(mail.data.auth);\n                if (auth && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(auth, (err)=>{\n                        if (auth && auth !== this.auth && auth.oauth2) {\n                            auth.oauth2.removeAllListeners();\n                        }\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        sendMessage();\n                    });\n                } else {\n                    sendMessage();\n                }\n            });\n        });\n    }\n    /**\n     * Verifies SMTP configuration\n     *\n     * @param {Function} callback Callback function\n     */ verify(callback) {\n        let promise;\n        if (!callback) {\n            promise = new Promise((resolve, reject)=>{\n                callback = shared.callbackPromise(resolve, reject);\n            });\n        }\n        this.getSocket(this.options, (err, socketOptions)=>{\n            if (err) {\n                return callback(err);\n            }\n            let options = this.options;\n            if (socketOptions && socketOptions.connection) {\n                this.logger.info({\n                    tnx: \"proxy\",\n                    remoteAddress: socketOptions.connection.remoteAddress,\n                    remotePort: socketOptions.connection.remotePort,\n                    destHost: options.host || \"\",\n                    destPort: options.port || \"\",\n                    action: \"connected\"\n                }, \"Using proxied socket from %s:%s to %s:%s\", socketOptions.connection.remoteAddress, socketOptions.connection.remotePort, options.host || \"\", options.port || \"\");\n                options = shared.assign(false, options);\n                Object.keys(socketOptions).forEach((key)=>{\n                    options[key] = socketOptions[key];\n                });\n            }\n            let connection = new SMTPConnection(options);\n            let returned = false;\n            connection.once(\"error\", (err)=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.close();\n                return callback(err);\n            });\n            connection.once(\"end\", ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                return callback(new Error(\"Connection closed\"));\n            });\n            let finalize = ()=>{\n                if (returned) {\n                    return;\n                }\n                returned = true;\n                connection.quit();\n                return callback(null, true);\n            };\n            connection.connect(()=>{\n                if (returned) {\n                    return;\n                }\n                let authData = this.getAuth({});\n                if (authData && (connection.allowsAuth || options.forceAuth)) {\n                    connection.login(authData, (err)=>{\n                        if (returned) {\n                            return;\n                        }\n                        if (err) {\n                            returned = true;\n                            connection.close();\n                            return callback(err);\n                        }\n                        finalize();\n                    });\n                } else if (!authData && connection.allowsAuth && options.forceAuth) {\n                    let err = new Error(\"Authentication info was not provided\");\n                    err.code = \"NoAuth\";\n                    returned = true;\n                    connection.close();\n                    return callback(err);\n                } else {\n                    finalize();\n                }\n            });\n        });\n        return promise;\n    }\n    /**\n     * Releases resources\n     */ close() {\n        if (this.auth && this.auth.oauth2) {\n            this.auth.oauth2.removeAllListeners();\n        }\n        this.emit(\"close\");\n    }\n}\n// expose to the world\nmodule.exports = SMTPTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/smtp-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/nodemailer/lib/stream-transport/index.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst packageData = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/nodemailer/package.json\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * Generates a Transport object for streaming\n *\n * Possible options can be the following:\n *\n *  * **buffer** if true, then returns the message as a Buffer object instead of a stream\n *  * **newline** either 'windows' or 'unix'\n *\n * @constructor\n * @param {Object} optional config parameter\n */ class StreamTransport {\n    constructor(options){\n        options = options || {};\n        this.options = options || {};\n        this.name = \"StreamTransport\";\n        this.version = packageData.version;\n        this.logger = shared.getLogger(this.options, {\n            component: this.options.component || \"stream-transport\"\n        });\n        this.winbreak = [\n            \"win\",\n            \"windows\",\n            \"dos\",\n            \"\\r\\n\"\n        ].includes((options.newline || \"\").toString().toLowerCase());\n    }\n    /**\n     * Compiles a mailcomposer message and forwards it to handler that sends it\n     *\n     * @param {Object} emailMessage MailComposer object\n     * @param {Function} callback Callback function to run when the sending is completed\n     */ send(mail, done) {\n        // We probably need this in the output\n        mail.message.keepBcc = true;\n        let envelope = mail.data.envelope || mail.message.getEnvelope();\n        let messageId = mail.message.messageId();\n        let recipients = [].concat(envelope.to || []);\n        if (recipients.length > 3) {\n            recipients.push(\"...and \" + recipients.splice(2).length + \" more\");\n        }\n        this.logger.info({\n            tnx: \"send\",\n            messageId\n        }, \"Sending message %s to <%s> using %s line breaks\", messageId, recipients.join(\", \"), this.winbreak ? \"<CR><LF>\" : \"<LF>\");\n        setImmediate(()=>{\n            let stream;\n            try {\n                stream = mail.message.createReadStream();\n            } catch (E) {\n                this.logger.error({\n                    err: E,\n                    tnx: \"send\",\n                    messageId\n                }, \"Creating send stream failed for %s. %s\", messageId, E.message);\n                return done(E);\n            }\n            if (!this.options.buffer) {\n                stream.once(\"error\", (err)=>{\n                    this.logger.error({\n                        err,\n                        tnx: \"send\",\n                        messageId\n                    }, \"Failed creating message for %s. %s\", messageId, err.message);\n                });\n                return done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: stream\n                });\n            }\n            let chunks = [];\n            let chunklen = 0;\n            stream.on(\"readable\", ()=>{\n                let chunk;\n                while((chunk = stream.read()) !== null){\n                    chunks.push(chunk);\n                    chunklen += chunk.length;\n                }\n            });\n            stream.once(\"error\", (err)=>{\n                this.logger.error({\n                    err,\n                    tnx: \"send\",\n                    messageId\n                }, \"Failed creating message for %s. %s\", messageId, err.message);\n                return done(err);\n            });\n            stream.on(\"end\", ()=>done(null, {\n                    envelope: mail.data.envelope || mail.message.getEnvelope(),\n                    messageId,\n                    message: Buffer.concat(chunks, chunklen)\n                }));\n        });\n    }\n}\nmodule.exports = StreamTransport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/stream-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst services = __webpack_require__(/*! ./services.json */ \"(rsc)/./node_modules/nodemailer/lib/well-known/services.json\");\nconst normalized = {};\nObject.keys(services).forEach((key)=>{\n    let service = services[key];\n    normalized[normalizeKey(key)] = normalizeService(service);\n    [].concat(service.aliases || []).forEach((alias)=>{\n        normalized[normalizeKey(alias)] = normalizeService(service);\n    });\n    [].concat(service.domains || []).forEach((domain)=>{\n        normalized[normalizeKey(domain)] = normalizeService(service);\n    });\n});\nfunction normalizeKey(key) {\n    return key.replace(/[^a-zA-Z0-9.-]/g, \"\").toLowerCase();\n}\nfunction normalizeService(service) {\n    let filter = [\n        \"domains\",\n        \"aliases\"\n    ];\n    let response = {};\n    Object.keys(service).forEach((key)=>{\n        if (filter.indexOf(key) < 0) {\n            response[key] = service[key];\n        }\n    });\n    return response;\n}\n/**\n * Resolves SMTP config for given key. Key can be a name (like 'Gmail'), alias (like 'Google Mail') or\n * an email address (like 'test@googlemail.com').\n *\n * @param {String} key [description]\n * @returns {Object} SMTP config or false if not found\n */ module.exports = function(key) {\n    key = normalizeKey(key.split(\"@\").pop());\n    return normalized[key] || false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZW1haWxlci9saWIvd2VsbC1rbm93bi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVdDLG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1DLGFBQWEsQ0FBQztBQUVwQkMsT0FBT0MsSUFBSSxDQUFDSixVQUFVSyxPQUFPLENBQUNDLENBQUFBO0lBQzFCLElBQUlDLFVBQVVQLFFBQVEsQ0FBQ00sSUFBSTtJQUUzQkosVUFBVSxDQUFDTSxhQUFhRixLQUFLLEdBQUdHLGlCQUFpQkY7SUFFakQsRUFBRSxDQUFDRyxNQUFNLENBQUNILFFBQVFJLE9BQU8sSUFBSSxFQUFFLEVBQUVOLE9BQU8sQ0FBQ08sQ0FBQUE7UUFDckNWLFVBQVUsQ0FBQ00sYUFBYUksT0FBTyxHQUFHSCxpQkFBaUJGO0lBQ3ZEO0lBRUEsRUFBRSxDQUFDRyxNQUFNLENBQUNILFFBQVFNLE9BQU8sSUFBSSxFQUFFLEVBQUVSLE9BQU8sQ0FBQ1MsQ0FBQUE7UUFDckNaLFVBQVUsQ0FBQ00sYUFBYU0sUUFBUSxHQUFHTCxpQkFBaUJGO0lBQ3hEO0FBQ0o7QUFFQSxTQUFTQyxhQUFhRixHQUFHO0lBQ3JCLE9BQU9BLElBQUlTLE9BQU8sQ0FBQyxtQkFBbUIsSUFBSUMsV0FBVztBQUN6RDtBQUVBLFNBQVNQLGlCQUFpQkYsT0FBTztJQUM3QixJQUFJVSxTQUFTO1FBQUM7UUFBVztLQUFVO0lBQ25DLElBQUlDLFdBQVcsQ0FBQztJQUVoQmYsT0FBT0MsSUFBSSxDQUFDRyxTQUFTRixPQUFPLENBQUNDLENBQUFBO1FBQ3pCLElBQUlXLE9BQU9FLE9BQU8sQ0FBQ2IsT0FBTyxHQUFHO1lBQ3pCWSxRQUFRLENBQUNaLElBQUksR0FBR0MsT0FBTyxDQUFDRCxJQUFJO1FBQ2hDO0lBQ0o7SUFFQSxPQUFPWTtBQUNYO0FBRUE7Ozs7OztDQU1DLEdBQ0RFLE9BQU9DLE9BQU8sR0FBRyxTQUFVZixHQUFHO0lBQzFCQSxNQUFNRSxhQUFhRixJQUFJZ0IsS0FBSyxDQUFDLEtBQUtDLEdBQUc7SUFDckMsT0FBT3JCLFVBQVUsQ0FBQ0ksSUFBSSxJQUFJO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25vZGVtYWlsZXIvbGliL3dlbGwta25vd24vaW5kZXguanM/YzcxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHNlcnZpY2VzID0gcmVxdWlyZSgnLi9zZXJ2aWNlcy5qc29uJyk7XG5jb25zdCBub3JtYWxpemVkID0ge307XG5cbk9iamVjdC5rZXlzKHNlcnZpY2VzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgbGV0IHNlcnZpY2UgPSBzZXJ2aWNlc1trZXldO1xuXG4gICAgbm9ybWFsaXplZFtub3JtYWxpemVLZXkoa2V5KV0gPSBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpO1xuXG4gICAgW10uY29uY2F0KHNlcnZpY2UuYWxpYXNlcyB8fCBbXSkuZm9yRWFjaChhbGlhcyA9PiB7XG4gICAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplS2V5KGFsaWFzKV0gPSBub3JtYWxpemVTZXJ2aWNlKHNlcnZpY2UpO1xuICAgIH0pO1xuXG4gICAgW10uY29uY2F0KHNlcnZpY2UuZG9tYWlucyB8fCBbXSkuZm9yRWFjaChkb21haW4gPT4ge1xuICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZUtleShkb21haW4pXSA9IG5vcm1hbGl6ZVNlcnZpY2Uoc2VydmljZSk7XG4gICAgfSk7XG59KTtcblxuZnVuY3Rpb24gbm9ybWFsaXplS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkucmVwbGFjZSgvW15hLXpBLVowLTkuLV0vZywgJycpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNlcnZpY2Uoc2VydmljZSkge1xuICAgIGxldCBmaWx0ZXIgPSBbJ2RvbWFpbnMnLCAnYWxpYXNlcyddO1xuICAgIGxldCByZXNwb25zZSA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoc2VydmljZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyLmluZGV4T2Yoa2V5KSA8IDApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSBzZXJ2aWNlW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyBTTVRQIGNvbmZpZyBmb3IgZ2l2ZW4ga2V5LiBLZXkgY2FuIGJlIGEgbmFtZSAobGlrZSAnR21haWwnKSwgYWxpYXMgKGxpa2UgJ0dvb2dsZSBNYWlsJykgb3JcbiAqIGFuIGVtYWlsIGFkZHJlc3MgKGxpa2UgJ3Rlc3RAZ29vZ2xlbWFpbC5jb20nKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IFtkZXNjcmlwdGlvbl1cbiAqIEByZXR1cm5zIHtPYmplY3R9IFNNVFAgY29uZmlnIG9yIGZhbHNlIGlmIG5vdCBmb3VuZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgPSBub3JtYWxpemVLZXkoa2V5LnNwbGl0KCdAJykucG9wKCkpO1xuICAgIHJldHVybiBub3JtYWxpemVkW2tleV0gfHwgZmFsc2U7XG59O1xuIl0sIm5hbWVzIjpbInNlcnZpY2VzIiwicmVxdWlyZSIsIm5vcm1hbGl6ZWQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNlcnZpY2UiLCJub3JtYWxpemVLZXkiLCJub3JtYWxpemVTZXJ2aWNlIiwiY29uY2F0IiwiYWxpYXNlcyIsImFsaWFzIiwiZG9tYWlucyIsImRvbWFpbiIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImZpbHRlciIsInJlc3BvbnNlIiwiaW5kZXhPZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJzcGxpdCIsInBvcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/well-known/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js":
/*!******************************************************!*\
  !*** ./node_modules/nodemailer/lib/xoauth2/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Stream = (__webpack_require__(/*! stream */ \"stream\").Stream);\nconst nmfetch = __webpack_require__(/*! ../fetch */ \"(rsc)/./node_modules/nodemailer/lib/fetch/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/nodemailer/lib/shared/index.js\");\n/**\n * XOAUTH2 access_token generator for Gmail.\n * Create client ID for web applications in Google API console to use it.\n * See Offline Access for receiving the needed refreshToken for an user\n * https://developers.google.com/accounts/docs/OAuth2WebServer#offline\n *\n * Usage for generating access tokens with a custom method using provisionCallback:\n * provisionCallback(user, renew, callback)\n *   * user is the username to get the token for\n *   * renew is a boolean that if true indicates that existing token failed and needs to be renewed\n *   * callback is the callback to run with (error, accessToken [, expires])\n *     * accessToken is a string\n *     * expires is an optional expire time in milliseconds\n * If provisionCallback is used, then Nodemailer does not try to attempt generating the token by itself\n *\n * @constructor\n * @param {Object} options Client information for token generation\n * @param {String} options.user User e-mail address\n * @param {String} options.clientId Client ID value\n * @param {String} options.clientSecret Client secret value\n * @param {String} options.refreshToken Refresh token for an user\n * @param {String} options.accessUrl Endpoint for token generation, defaults to 'https://accounts.google.com/o/oauth2/token'\n * @param {String} options.accessToken An existing valid accessToken\n * @param {String} options.privateKey Private key for JSW\n * @param {Number} options.expires Optional Access Token expire time in ms\n * @param {Number} options.timeout Optional TTL for Access Token in seconds\n * @param {Function} options.provisionCallback Function to run when a new access token is required\n */ class XOAuth2 extends Stream {\n    constructor(options, logger){\n        super();\n        this.options = options || {};\n        if (options && options.serviceClient) {\n            if (!options.privateKey || !options.user) {\n                setImmediate(()=>this.emit(\"error\", new Error('Options \"privateKey\" and \"user\" are required for service account!')));\n                return;\n            }\n            let serviceRequestTimeout = Math.min(Math.max(Number(this.options.serviceRequestTimeout) || 0, 0), 3600);\n            this.options.serviceRequestTimeout = serviceRequestTimeout || 5 * 60;\n        }\n        this.logger = shared.getLogger({\n            logger\n        }, {\n            component: this.options.component || \"OAuth2\"\n        });\n        this.provisionCallback = typeof this.options.provisionCallback === \"function\" ? this.options.provisionCallback : false;\n        this.options.accessUrl = this.options.accessUrl || \"https://accounts.google.com/o/oauth2/token\";\n        this.options.customHeaders = this.options.customHeaders || {};\n        this.options.customParams = this.options.customParams || {};\n        this.accessToken = this.options.accessToken || false;\n        if (this.options.expires && Number(this.options.expires)) {\n            this.expires = this.options.expires;\n        } else {\n            let timeout = Math.max(Number(this.options.timeout) || 0, 0);\n            this.expires = timeout && Date.now() + timeout * 1000 || 0;\n        }\n    }\n    /**\n     * Returns or generates (if previous has expired) a XOAuth2 token\n     *\n     * @param {Boolean} renew If false then use cached access token (if available)\n     * @param {Function} callback Callback function with error object and token string\n     */ getToken(renew, callback) {\n        if (!renew && this.accessToken && (!this.expires || this.expires > Date.now())) {\n            return callback(null, this.accessToken);\n        }\n        let generateCallback = (...args)=>{\n            if (args[0]) {\n                this.logger.error({\n                    err: args[0],\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"renew\"\n                }, \"Failed generating new Access Token for %s\", this.options.user);\n            } else {\n                this.logger.info({\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"renew\"\n                }, \"Generated new Access Token for %s\", this.options.user);\n            }\n            callback(...args);\n        };\n        if (this.provisionCallback) {\n            this.provisionCallback(this.options.user, !!renew, (err, accessToken, expires)=>{\n                if (!err && accessToken) {\n                    this.accessToken = accessToken;\n                    this.expires = expires || 0;\n                }\n                generateCallback(err, accessToken);\n            });\n        } else {\n            this.generateToken(generateCallback);\n        }\n    }\n    /**\n     * Updates token values\n     *\n     * @param {String} accessToken New access token\n     * @param {Number} timeout Access token lifetime in seconds\n     *\n     * Emits 'token': { user: User email-address, accessToken: the new accessToken, timeout: TTL in seconds}\n     */ updateToken(accessToken, timeout) {\n        this.accessToken = accessToken;\n        timeout = Math.max(Number(timeout) || 0, 0);\n        this.expires = timeout && Date.now() + timeout * 1000 || 0;\n        this.emit(\"token\", {\n            user: this.options.user,\n            accessToken: accessToken || \"\",\n            expires: this.expires\n        });\n    }\n    /**\n     * Generates a new XOAuth2 token with the credentials provided at initialization\n     *\n     * @param {Function} callback Callback function with error object and token string\n     */ generateToken(callback) {\n        let urlOptions;\n        let loggedUrlOptions;\n        if (this.options.serviceClient) {\n            // service account - https://developers.google.com/identity/protocols/OAuth2ServiceAccount\n            let iat = Math.floor(Date.now() / 1000); // unix time\n            let tokenData = {\n                iss: this.options.serviceClient,\n                scope: this.options.scope || \"https://mail.google.com/\",\n                sub: this.options.user,\n                aud: this.options.accessUrl,\n                iat,\n                exp: iat + this.options.serviceRequestTimeout\n            };\n            let token;\n            try {\n                token = this.jwtSignRS256(tokenData);\n            } catch (err) {\n                return callback(new Error(\"Can't generate token. Check your auth options\"));\n            }\n            urlOptions = {\n                grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                assertion: token\n            };\n            loggedUrlOptions = {\n                grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n                assertion: tokenData\n            };\n        } else {\n            if (!this.options.refreshToken) {\n                return callback(new Error(\"Can't create new access token for user\"));\n            }\n            // web app - https://developers.google.com/identity/protocols/OAuth2WebServer\n            urlOptions = {\n                client_id: this.options.clientId || \"\",\n                client_secret: this.options.clientSecret || \"\",\n                refresh_token: this.options.refreshToken,\n                grant_type: \"refresh_token\"\n            };\n            loggedUrlOptions = {\n                client_id: this.options.clientId || \"\",\n                client_secret: (this.options.clientSecret || \"\").substr(0, 6) + \"...\",\n                refresh_token: (this.options.refreshToken || \"\").substr(0, 6) + \"...\",\n                grant_type: \"refresh_token\"\n            };\n        }\n        Object.keys(this.options.customParams).forEach((key)=>{\n            urlOptions[key] = this.options.customParams[key];\n            loggedUrlOptions[key] = this.options.customParams[key];\n        });\n        this.logger.debug({\n            tnx: \"OAUTH2\",\n            user: this.options.user,\n            action: \"generate\"\n        }, \"Requesting token using: %s\", JSON.stringify(loggedUrlOptions));\n        this.postRequest(this.options.accessUrl, urlOptions, this.options, (error, body)=>{\n            let data;\n            if (error) {\n                return callback(error);\n            }\n            try {\n                data = JSON.parse(body.toString());\n            } catch (E) {\n                return callback(E);\n            }\n            if (!data || typeof data !== \"object\") {\n                this.logger.debug({\n                    tnx: \"OAUTH2\",\n                    user: this.options.user,\n                    action: \"post\"\n                }, \"Response: %s\", (body || \"\").toString());\n                return callback(new Error(\"Invalid authentication response\"));\n            }\n            let logData = {};\n            Object.keys(data).forEach((key)=>{\n                if (key !== \"access_token\") {\n                    logData[key] = data[key];\n                } else {\n                    logData[key] = (data[key] || \"\").toString().substr(0, 6) + \"...\";\n                }\n            });\n            this.logger.debug({\n                tnx: \"OAUTH2\",\n                user: this.options.user,\n                action: \"post\"\n            }, \"Response: %s\", JSON.stringify(logData));\n            if (data.error) {\n                // Error Response : https://tools.ietf.org/html/rfc6749#section-5.2\n                let errorMessage = data.error;\n                if (data.error_description) {\n                    errorMessage += \": \" + data.error_description;\n                }\n                if (data.error_uri) {\n                    errorMessage += \" (\" + data.error_uri + \")\";\n                }\n                return callback(new Error(errorMessage));\n            }\n            if (data.access_token) {\n                this.updateToken(data.access_token, data.expires_in);\n                return callback(null, this.accessToken);\n            }\n            return callback(new Error(\"No access token\"));\n        });\n    }\n    /**\n     * Converts an access_token and user id into a base64 encoded XOAuth2 token\n     *\n     * @param {String} [accessToken] Access token string\n     * @return {String} Base64 encoded token for IMAP or SMTP login\n     */ buildXOAuth2Token(accessToken) {\n        let authData = [\n            \"user=\" + (this.options.user || \"\"),\n            \"auth=Bearer \" + (accessToken || this.accessToken),\n            \"\",\n            \"\"\n        ];\n        return Buffer.from(authData.join(\"\\x01\"), \"utf-8\").toString(\"base64\");\n    }\n    /**\n     * Custom POST request handler.\n     * This is only needed to keep paths short in Windows – usually this module\n     * is a dependency of a dependency and if it tries to require something\n     * like the request module the paths get way too long to handle for Windows.\n     * As we do only a simple POST request we do not actually require complicated\n     * logic support (no redirects, no nothing) anyway.\n     *\n     * @param {String} url Url to POST to\n     * @param {String|Buffer} payload Payload to POST\n     * @param {Function} callback Callback function with (err, buff)\n     */ postRequest(url, payload, params, callback) {\n        let returned = false;\n        let chunks = [];\n        let chunklen = 0;\n        let req = nmfetch(url, {\n            method: \"post\",\n            headers: params.customHeaders,\n            body: payload,\n            allowErrorResponse: true\n        });\n        req.on(\"readable\", ()=>{\n            let chunk;\n            while((chunk = req.read()) !== null){\n                chunks.push(chunk);\n                chunklen += chunk.length;\n            }\n        });\n        req.once(\"error\", (err)=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(err);\n        });\n        req.once(\"end\", ()=>{\n            if (returned) {\n                return;\n            }\n            returned = true;\n            return callback(null, Buffer.concat(chunks, chunklen));\n        });\n    }\n    /**\n     * Encodes a buffer or a string into Base64url format\n     *\n     * @param {Buffer|String} data The data to convert\n     * @return {String} The encoded string\n     */ toBase64URL(data) {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data);\n        }\n        return data.toString(\"base64\").replace(/[=]+/g, \"\") // remove '='s\n        .replace(/\\+/g, \"-\") // '+' → '-'\n        .replace(/\\//g, \"_\"); // '/' → '_'\n    }\n    /**\n     * Creates a JSON Web Token signed with RS256 (SHA256 + RSA)\n     *\n     * @param {Object} payload The payload to include in the generated token\n     * @return {String} The generated and signed token\n     */ jwtSignRS256(payload) {\n        payload = [\n            '{\"alg\":\"RS256\",\"typ\":\"JWT\"}',\n            JSON.stringify(payload)\n        ].map((val)=>this.toBase64URL(val)).join(\".\");\n        let signature = crypto.createSign(\"RSA-SHA256\").update(payload).sign(this.options.privateKey);\n        return payload + \".\" + this.toBase64URL(signature);\n    }\n}\nmodule.exports = XOAuth2;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/nodemailer/lib/xoauth2/index.js\n");

/***/ }),

/***/ "(rsc)/./src/app/api/email/route.js":
/*!************************************!*\
  !*** ./src/app/api/email/route.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var nodemailer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nodemailer */ \"(rsc)/./node_modules/nodemailer/lib/nodemailer.js\");\n\n\nasync function GET(req, res) {\n    const { searchParams } = new URL(req.url);\n    let toEmail = searchParams.get(\"email\");\n    let transporter = nodemailer__WEBPACK_IMPORTED_MODULE_1__.createTransport({\n        host: \"mail.teamrabbil.com\",\n        port: 25,\n        secure: false,\n        auth: {\n            user: \"info@teamrabbil.com\",\n            pass: \"~sR4[bhaC[Qs\"\n        },\n        tls: {\n            rejectUnauthorized: false\n        }\n    });\n    let myEmail = {\n        form: \"Test Email From Next JS Application<info@teamrabbil.com>\",\n        to: toEmail,\n        subject: \"Test Email From Next JS Application\",\n        text: \"Test Email From Next JS Application\"\n    };\n    try {\n        let result = await transporter.sendMail(myEmail);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            msg: result\n        });\n    } catch (e) {\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            msg: \"Failed \"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9lbWFpbC9yb3V0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkM7QUFDUDtBQUM3QixlQUFlRSxJQUFJQyxHQUFHLEVBQUVDLEdBQUc7SUFDaEMsTUFBTSxFQUFFQyxZQUFZLEVBQUUsR0FBRyxJQUFJQyxJQUFJSCxJQUFJSSxHQUFHO0lBQ3hDLElBQUlDLFVBQVVILGFBQWFJLEdBQUcsQ0FBQztJQUUvQixJQUFJQyxjQUFjVCx1REFBMEIsQ0FBQztRQUMzQ1csTUFBTTtRQUNOQyxNQUFNO1FBQ05DLFFBQVE7UUFDUkMsTUFBTTtZQUNKQyxNQUFNO1lBQ05DLE1BQU07UUFDUjtRQUNBQyxLQUFLO1lBQUVDLG9CQUFvQjtRQUFNO0lBQ25DO0lBRUEsSUFBSUMsVUFBVTtRQUNaQyxNQUFNO1FBQ05DLElBQUlkO1FBQ0plLFNBQVM7UUFDVEMsTUFBTTtJQUNSO0lBRUEsSUFBSTtRQUNGLElBQUlDLFNBQVMsTUFBTWYsWUFBWWdCLFFBQVEsQ0FBQ047UUFDeEMsT0FBT3BCLGtGQUFZQSxDQUFDMkIsSUFBSSxDQUFDO1lBQUVDLEtBQUtIO1FBQU87SUFDekMsRUFBRSxPQUFPSSxHQUFHO1FBQ1YsT0FBTzdCLGtGQUFZQSxDQUFDMkIsSUFBSSxDQUFDO1lBQUVDLEtBQUs7UUFBVTtJQUM1QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vc3JjL2FwcC9hcGkvZW1haWwvcm91dGUuanM/N2MwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcclxuaW1wb3J0IG5vZGVtYWlsZXIgZnJvbSBcIm5vZGVtYWlsZXJcIjtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXEsIHJlcykge1xyXG4gIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcS51cmwpO1xyXG4gIGxldCB0b0VtYWlsID0gc2VhcmNoUGFyYW1zLmdldChcImVtYWlsXCIpO1xyXG5cclxuICBsZXQgdHJhbnNwb3J0ZXIgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XHJcbiAgICBob3N0OiBcIm1haWwudGVhbXJhYmJpbC5jb21cIixcclxuICAgIHBvcnQ6IDI1LFxyXG4gICAgc2VjdXJlOiBmYWxzZSxcclxuICAgIGF1dGg6IHtcclxuICAgICAgdXNlcjogXCJpbmZvQHRlYW1yYWJiaWwuY29tXCIsXHJcbiAgICAgIHBhc3M6IFwifnNSNFtiaGFDW1FzXCIsXHJcbiAgICB9LFxyXG4gICAgdGxzOiB7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfSxcclxuICB9KTtcclxuXHJcbiAgbGV0IG15RW1haWwgPSB7XHJcbiAgICBmb3JtOiBcIlRlc3QgRW1haWwgRnJvbSBOZXh0IEpTIEFwcGxpY2F0aW9uPGluZm9AdGVhbXJhYmJpbC5jb20+XCIsXHJcbiAgICB0bzogdG9FbWFpbCxcclxuICAgIHN1YmplY3Q6IFwiVGVzdCBFbWFpbCBGcm9tIE5leHQgSlMgQXBwbGljYXRpb25cIixcclxuICAgIHRleHQ6IFwiVGVzdCBFbWFpbCBGcm9tIE5leHQgSlMgQXBwbGljYXRpb25cIixcclxuICB9O1xyXG5cclxuICB0cnkge1xyXG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRyYW5zcG9ydGVyLnNlbmRNYWlsKG15RW1haWwpO1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgbXNnOiByZXN1bHQgfSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgbXNnOiBcIkZhaWxlZCBcIiB9KTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIm5vZGVtYWlsZXIiLCJHRVQiLCJyZXEiLCJyZXMiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJ0b0VtYWlsIiwiZ2V0IiwidHJhbnNwb3J0ZXIiLCJjcmVhdGVUcmFuc3BvcnQiLCJob3N0IiwicG9ydCIsInNlY3VyZSIsImF1dGgiLCJ1c2VyIiwicGFzcyIsInRscyIsInJlamVjdFVuYXV0aG9yaXplZCIsIm15RW1haWwiLCJmb3JtIiwidG8iLCJzdWJqZWN0IiwidGV4dCIsInJlc3VsdCIsInNlbmRNYWlsIiwianNvbiIsIm1zZyIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/email/route.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/action-async-storage.js":
/*!**************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/action-async-storage.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"actionAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return actionAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst actionAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=action-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FjdGlvbi1hc3luYy1zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTztBQUNYLENBQUMsRUFBQztBQUNGSCxzREFBcUQ7SUFDakRJLFlBQVk7SUFDWkMsS0FBSztRQUNELE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyxxQkFBcUJDLG1CQUFPQSxDQUFDLHlHQUF1QjtBQUMxRCxNQUFNRixxQkFBcUIsQ0FBQyxHQUFHQyxtQkFBbUJFLHVCQUF1QjtBQUV6RSxJQUFJLENBQUMsT0FBT1AsUUFBUVEsT0FBTyxLQUFLLGNBQWUsT0FBT1IsUUFBUVEsT0FBTyxLQUFLLFlBQVlSLFFBQVFRLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT1IsUUFBUVEsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS1gsT0FBT0MsY0FBYyxDQUFDQyxRQUFRUSxPQUFPLEVBQUUsY0FBYztRQUFFUCxPQUFPO0lBQUs7SUFDbkVILE9BQU9ZLE1BQU0sQ0FBQ1YsUUFBUVEsT0FBTyxFQUFFUjtJQUMvQlcsT0FBT1gsT0FBTyxHQUFHQSxRQUFRUSxPQUFPO0FBQ2xDLEVBRUEsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hY3Rpb24tYXN5bmMtc3RvcmFnZS5qcz8xOTAzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWN0aW9uQXN5bmNTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb25Bc3luY1N0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBfYXN5bmNsb2NhbHN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hc3luYy1sb2NhbC1zdG9yYWdlXCIpO1xuY29uc3QgYWN0aW9uQXN5bmNTdG9yYWdlID0gKDAsIF9hc3luY2xvY2Fsc3RvcmFnZS5jcmVhdGVBc3luY0xvY2FsU3RvcmFnZSkoKTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWN0aW9uLWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImFjdGlvbkFzeW5jU3RvcmFnZSIsIl9hc3luY2xvY2Fsc3RvcmFnZSIsInJlcXVpcmUiLCJjcmVhdGVBc3luY0xvY2FsU3RvcmFnZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/action-async-storage.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/async-local-storage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/async-local-storage.js ***!
  \*************************************************************************/
/***/ ((module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"createAsyncLocalStorage\", ({\n    enumerable: true,\n    get: function() {\n        return createAsyncLocalStorage;\n    }\n}));\nconst sharedAsyncLocalStorageNotAvailableError = new Error(\"Invariant: AsyncLocalStorage accessed in runtime where it is not available\");\nclass FakeAsyncLocalStorage {\n    disable() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    getStore() {\n        // This fake implementation of AsyncLocalStorage always returns `undefined`.\n        return undefined;\n    }\n    run() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    exit() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n    enterWith() {\n        throw sharedAsyncLocalStorageNotAvailableError;\n    }\n}\nconst maybeGlobalAsyncLocalStorage = globalThis.AsyncLocalStorage;\nfunction createAsyncLocalStorage() {\n    if (maybeGlobalAsyncLocalStorage) {\n        return new maybeGlobalAsyncLocalStorage();\n    }\n    return new FakeAsyncLocalStorage();\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=async-local-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL2FzeW5jLWxvY2FsLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILDJEQUEwRDtJQUN0REksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLDJDQUEyQyxJQUFJQyxNQUFNO0FBQzNELE1BQU1DO0lBQ0ZDLFVBQVU7UUFDTixNQUFNSDtJQUNWO0lBQ0FJLFdBQVc7UUFDUCw0RUFBNEU7UUFDNUUsT0FBT0M7SUFDWDtJQUNBQyxNQUFNO1FBQ0YsTUFBTU47SUFDVjtJQUNBTyxPQUFPO1FBQ0gsTUFBTVA7SUFDVjtJQUNBUSxZQUFZO1FBQ1IsTUFBTVI7SUFDVjtBQUNKO0FBQ0EsTUFBTVMsK0JBQStCQyxXQUFXQyxpQkFBaUI7QUFDakUsU0FBU1o7SUFDTCxJQUFJVSw4QkFBOEI7UUFDOUIsT0FBTyxJQUFJQTtJQUNmO0lBQ0EsT0FBTyxJQUFJUDtBQUNmO0FBRUEsSUFBSSxDQUFDLE9BQU9QLFFBQVFpQixPQUFPLEtBQUssY0FBZSxPQUFPakIsUUFBUWlCLE9BQU8sS0FBSyxZQUFZakIsUUFBUWlCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2pCLFFBQVFpQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLcEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRaUIsT0FBTyxFQUFFLGNBQWM7UUFBRWhCLE9BQU87SUFBSztJQUNuRUgsT0FBT3FCLE1BQU0sQ0FBQ25CLFFBQVFpQixPQUFPLEVBQUVqQjtJQUMvQm9CLE9BQU9wQixPQUFPLEdBQUdBLFFBQVFpQixPQUFPO0FBQ2xDLEVBRUEsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvY29tcG9uZW50cy9hc3luYy1sb2NhbC1zdG9yYWdlLmpzP2FmNDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBc3luY0xvY2FsU3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yID0gbmV3IEVycm9yKFwiSW52YXJpYW50OiBBc3luY0xvY2FsU3RvcmFnZSBhY2Nlc3NlZCBpbiBydW50aW1lIHdoZXJlIGl0IGlzIG5vdCBhdmFpbGFibGVcIik7XG5jbGFzcyBGYWtlQXN5bmNMb2NhbFN0b3JhZ2Uge1xuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIHRocm93IHNoYXJlZEFzeW5jTG9jYWxTdG9yYWdlTm90QXZhaWxhYmxlRXJyb3I7XG4gICAgfVxuICAgIGdldFN0b3JlKCkge1xuICAgICAgICAvLyBUaGlzIGZha2UgaW1wbGVtZW50YXRpb24gb2YgQXN5bmNMb2NhbFN0b3JhZ2UgYWx3YXlzIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJ1bigpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZXhpdCgpIHtcbiAgICAgICAgdGhyb3cgc2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvcjtcbiAgICB9XG4gICAgZW50ZXJXaXRoKCkge1xuICAgICAgICB0aHJvdyBzaGFyZWRBc3luY0xvY2FsU3RvcmFnZU5vdEF2YWlsYWJsZUVycm9yO1xuICAgIH1cbn1cbmNvbnN0IG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UgPSBnbG9iYWxUaGlzLkFzeW5jTG9jYWxTdG9yYWdlO1xuZnVuY3Rpb24gY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UoKSB7XG4gICAgaWYgKG1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBtYXliZUdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRmFrZUFzeW5jTG9jYWxTdG9yYWdlKCk7XG59XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFzeW5jLWxvY2FsLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlIiwic2hhcmVkQXN5bmNMb2NhbFN0b3JhZ2VOb3RBdmFpbGFibGVFcnJvciIsIkVycm9yIiwiRmFrZUFzeW5jTG9jYWxTdG9yYWdlIiwiZGlzYWJsZSIsImdldFN0b3JlIiwidW5kZWZpbmVkIiwicnVuIiwiZXhpdCIsImVudGVyV2l0aCIsIm1heWJlR2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2UiLCJnbG9iYWxUaGlzIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/async-local-storage.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/request-async-storage.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/request-async-storage.js ***!
  \***************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"requestAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return requestAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst requestAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JlcXVlc3QtYXN5bmMtc3RvcmFnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRkgsdURBQXNEO0lBQ2xESSxZQUFZO0lBQ1pDLEtBQUs7UUFDRCxPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMscUJBQXFCQyxtQkFBT0EsQ0FBQyx5R0FBdUI7QUFDMUQsTUFBTUYsc0JBQXNCLENBQUMsR0FBR0MsbUJBQW1CRSx1QkFBdUI7QUFFMUUsSUFBSSxDQUFDLE9BQU9QLFFBQVFRLE9BQU8sS0FBSyxjQUFlLE9BQU9SLFFBQVFRLE9BQU8sS0FBSyxZQUFZUixRQUFRUSxPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9SLFFBQVFRLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcktYLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUVEsT0FBTyxFQUFFLGNBQWM7UUFBRVAsT0FBTztJQUFLO0lBQ25FSCxPQUFPWSxNQUFNLENBQUNWLFFBQVFRLE9BQU8sRUFBRVI7SUFDL0JXLE9BQU9YLE9BQU8sR0FBR0EsUUFBUVEsT0FBTztBQUNsQyxFQUVBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2NvbXBvbmVudHMvcmVxdWVzdC1hc3luYy1zdG9yYWdlLmpzPzMzOWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXF1ZXN0QXN5bmNTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0QXN5bmNTdG9yYWdlO1xuICAgIH1cbn0pO1xuY29uc3QgX2FzeW5jbG9jYWxzdG9yYWdlID0gcmVxdWlyZShcIi4vYXN5bmMtbG9jYWwtc3RvcmFnZVwiKTtcbmNvbnN0IHJlcXVlc3RBc3luY1N0b3JhZ2UgPSAoMCwgX2FzeW5jbG9jYWxzdG9yYWdlLmNyZWF0ZUFzeW5jTG9jYWxTdG9yYWdlKSgpO1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInJlcXVlc3RBc3luY1N0b3JhZ2UiLCJfYXN5bmNsb2NhbHN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/request-async-storage.js\n");

/***/ }),

/***/ "(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/static-generation-async-storage.js ***!
  \*************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"staticGenerationAsyncStorage\", ({\n    enumerable: true,\n    get: function() {\n        return staticGenerationAsyncStorage;\n    }\n}));\nconst _asynclocalstorage = __webpack_require__(/*! ./async-local-storage */ \"(shared)/./node_modules/next/dist/client/components/async-local-storage.js\");\nconst staticGenerationAsyncStorage = (0, _asynclocalstorage.createAsyncLocalStorage)();\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=static-generation-async-storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNoYXJlZCkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGdFQUErRDtJQUMzREksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLHFCQUFxQkMsbUJBQU9BLENBQUMseUdBQXVCO0FBQzFELE1BQU1GLCtCQUErQixDQUFDLEdBQUdDLG1CQUFtQkUsdUJBQXVCO0FBRW5GLElBQUksQ0FBQyxPQUFPUCxRQUFRUSxPQUFPLEtBQUssY0FBZSxPQUFPUixRQUFRUSxPQUFPLEtBQUssWUFBWVIsUUFBUVEsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPUixRQUFRUSxPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLWCxPQUFPQyxjQUFjLENBQUNDLFFBQVFRLE9BQU8sRUFBRSxjQUFjO1FBQUVQLE9BQU87SUFBSztJQUNuRUgsT0FBT1ksTUFBTSxDQUFDVixRQUFRUSxPQUFPLEVBQUVSO0lBQy9CVyxPQUFPWCxPQUFPLEdBQUdBLFFBQVFRLE9BQU87QUFDbEMsRUFFQSwyREFBMkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3N0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanM/MmIyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2U7XG4gICAgfVxufSk7XG5jb25zdCBfYXN5bmNsb2NhbHN0b3JhZ2UgPSByZXF1aXJlKFwiLi9hc3luYy1sb2NhbC1zdG9yYWdlXCIpO1xuY29uc3Qgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSA9ICgwLCBfYXN5bmNsb2NhbHN0b3JhZ2UuY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UpKCk7XG5cbmlmICgodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIGV4cG9ydHMuZGVmYXVsdCA9PT0gJ29iamVjdCcgJiYgZXhwb3J0cy5kZWZhdWx0ICE9PSBudWxsKSkgJiYgdHlwZW9mIGV4cG9ydHMuZGVmYXVsdC5fX2VzTW9kdWxlID09PSAndW5kZWZpbmVkJykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5kZWZhdWx0LCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gIE9iamVjdC5hc3NpZ24oZXhwb3J0cy5kZWZhdWx0LCBleHBvcnRzKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpYy1nZW5lcmF0aW9uLWFzeW5jLXN0b3JhZ2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UiLCJfYXN5bmNsb2NhbHN0b3JhZ2UiLCJyZXF1aXJlIiwiY3JlYXRlQXN5bmNMb2NhbFN0b3JhZ2UiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(shared)/./node_modules/next/dist/client/components/static-generation-async-storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/lib/well-known/services.json":
/*!**************************************************************!*\
  !*** ./node_modules/nodemailer/lib/well-known/services.json ***!
  \**************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"126":{"host":"smtp.126.com","port":465,"secure":true},"163":{"host":"smtp.163.com","port":465,"secure":true},"1und1":{"host":"smtp.1und1.de","port":465,"secure":true,"authMethod":"LOGIN"},"AOL":{"domains":["aol.com"],"host":"smtp.aol.com","port":587},"Bluewin":{"host":"smtpauths.bluewin.ch","domains":["bluewin.ch"],"port":465},"DebugMail":{"host":"debugmail.io","port":25},"DynectEmail":{"aliases":["Dynect"],"host":"smtp.dynect.net","port":25},"Ethereal":{"aliases":["ethereal.email"],"host":"smtp.ethereal.email","port":587},"FastMail":{"domains":["fastmail.fm"],"host":"smtp.fastmail.com","port":465,"secure":true},"Forward Email":{"aliases":["FE","ForwardEmail"],"domains":["forwardemail.net"],"host":"smtp.forwardemail.net","port":465,"secure":true},"GandiMail":{"aliases":["Gandi","Gandi Mail"],"host":"mail.gandi.net","port":587},"Gmail":{"aliases":["Google Mail"],"domains":["gmail.com","googlemail.com"],"host":"smtp.gmail.com","port":465,"secure":true},"Godaddy":{"host":"smtpout.secureserver.net","port":25},"GodaddyAsia":{"host":"smtp.asia.secureserver.net","port":25},"GodaddyEurope":{"host":"smtp.europe.secureserver.net","port":25},"hot.ee":{"host":"mail.hot.ee"},"Hotmail":{"aliases":["Outlook","Outlook.com","Hotmail.com"],"domains":["hotmail.com","outlook.com"],"host":"smtp-mail.outlook.com","port":587},"iCloud":{"aliases":["Me","Mac"],"domains":["me.com","mac.com"],"host":"smtp.mail.me.com","port":587},"Infomaniak":{"host":"mail.infomaniak.com","domains":["ik.me","ikmail.com","etik.com"],"port":587},"mail.ee":{"host":"smtp.mail.ee"},"Mail.ru":{"host":"smtp.mail.ru","port":465,"secure":true},"Maildev":{"port":1025,"ignoreTLS":true},"Mailgun":{"host":"smtp.mailgun.org","port":465,"secure":true},"Mailjet":{"host":"in.mailjet.com","port":587},"Mailosaur":{"host":"mailosaur.io","port":25},"Mailtrap":{"host":"smtp.mailtrap.io","port":2525},"Mandrill":{"host":"smtp.mandrillapp.com","port":587},"Naver":{"host":"smtp.naver.com","port":587},"One":{"host":"send.one.com","port":465,"secure":true},"OpenMailBox":{"aliases":["OMB","openmailbox.org"],"host":"smtp.openmailbox.org","port":465,"secure":true},"Outlook365":{"host":"smtp.office365.com","port":587,"secure":false},"OhMySMTP":{"host":"smtp.ohmysmtp.com","port":587,"secure":false},"Postmark":{"aliases":["PostmarkApp"],"host":"smtp.postmarkapp.com","port":2525},"qiye.aliyun":{"host":"smtp.mxhichina.com","port":"465","secure":true},"QQ":{"domains":["qq.com"],"host":"smtp.qq.com","port":465,"secure":true},"QQex":{"aliases":["QQ Enterprise"],"domains":["exmail.qq.com"],"host":"smtp.exmail.qq.com","port":465,"secure":true},"SendCloud":{"host":"smtp.sendcloud.net","port":2525},"SendGrid":{"host":"smtp.sendgrid.net","port":587},"SendinBlue":{"aliases":["Brevo"],"host":"smtp-relay.brevo.com","port":587},"SendPulse":{"host":"smtp-pulse.com","port":465,"secure":true},"SES":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-EAST-1":{"host":"email-smtp.us-east-1.amazonaws.com","port":465,"secure":true},"SES-US-WEST-2":{"host":"email-smtp.us-west-2.amazonaws.com","port":465,"secure":true},"SES-EU-WEST-1":{"host":"email-smtp.eu-west-1.amazonaws.com","port":465,"secure":true},"Sparkpost":{"aliases":["SparkPost","SparkPost Mail"],"domains":["sparkpost.com"],"host":"smtp.sparkpostmail.com","port":587,"secure":false},"Tipimail":{"host":"smtp.tipimail.com","port":587},"Yahoo":{"domains":["yahoo.com"],"host":"smtp.mail.yahoo.com","port":465,"secure":true},"Yandex":{"domains":["yandex.ru"],"host":"smtp.yandex.ru","port":465,"secure":true},"Zoho":{"host":"smtp.zoho.com","port":465,"secure":true,"authMethod":"LOGIN"}}');

/***/ }),

/***/ "(rsc)/./node_modules/nodemailer/package.json":
/*!**********************************************!*\
  !*** ./node_modules/nodemailer/package.json ***!
  \**********************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"nodemailer","version":"6.9.4","description":"Easy as cake e-mail sending from your Node.js applications","main":"lib/nodemailer.js","scripts":{"test":"grunt --trace-warnings"},"repository":{"type":"git","url":"https://github.com/nodemailer/nodemailer.git"},"keywords":["Nodemailer"],"author":"Andris Reinman","license":"MIT-0","bugs":{"url":"https://github.com/nodemailer/nodemailer/issues"},"homepage":"https://nodemailer.com/","devDependencies":{"@aws-sdk/client-ses":"3.370.0","aws-sdk":"2.1417.0","bunyan":"1.8.15","chai":"4.3.7","eslint-config-nodemailer":"1.2.0","eslint-config-prettier":"8.8.0","grunt":"1.6.1","grunt-cli":"1.4.3","grunt-eslint":"24.3.0","grunt-mocha-test":"0.13.3","libbase64":"1.2.1","libmime":"5.2.1","libqp":"2.0.1","mocha":"10.2.0","nodemailer-ntlm-auth":"1.0.4","proxy":"1.0.2","proxy-test-server":"1.0.0","sinon":"15.2.0","smtp-server":"3.12.0"},"engines":{"node":">=6.0.0"}}');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Femail%2Froute&page=%2Fapi%2Femail%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Femail%2Froute.js&appDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5CRidwana%5COstad%5CModule%2014%20Practice%5Cmy-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!"));
module.exports = __webpack_exports__;

})();